[{"title":"概述","type":0,"sectionRef":"#","url":"1.6/","content":"","keywords":""},{"title":"容器管理​","type":1,"pageTitle":"概述","url":"1.6/#容器管理","content":"Rancher Desktop 提供了构建、推送和拉取容器镜像以及运行容器的功能，这些功能可以通过 Docker CLI（当你选择 Moby/dockerd 作为引擎时）或 nerdctl（当你选择 containerd 作为引擎时）实现，而 nerdctl 是 containerd 项目提供的 &quot;兼容 containerd 的 Docker CLI&quot;。 "},{"title":"Kubernetes​","type":1,"pageTitle":"概述","url":"1.6/#kubernetes","content":"Kubernetes 内置在 Rancher Desktop 中，由 K3s 提供。K3s 是一个经过认证的轻量级发行版。通过 Rancher Desktop，你能够 选择你的 Kubernetes 版本，并且一键重置 Kubernetes 或 Kubernetes 以及整个容器运行时。 "},{"title":"Rancher 与 Rancher Desktop​","type":1,"pageTitle":"概述","url":"1.6/#rancher-与-rancher-desktop","content":"虽然 Rancher 和 Rancher Desktop 的名字里都包含 Rancher，但它们的功能是有差别的。Rancher Desktop 不是桌面版 Rancher。Rancher 是管理 Kubernetes 集群的强大解决方案，Rancher Desktop 提供本地 Kubernetes 和容器管理平台，这两种解决方案相辅相成。 如果要在本地系统上运行 Rancher，你可以将 Rancher 安装到 Rancher Desktop 中。 "},{"title":"常见问题","type":0,"sectionRef":"#","url":"1.6/faq","content":"常见问题 本文包含了用户常见的 Rancher Desktop 问题和解答。 问：Rancher Desktop 是 Rancher 的桌面版吗？​ 答：虽然 Rancher 和 Rancher Desktop 的名称都包含 Rancher，但他们的功能不同。Rancher Desktop 不是桌面版 Rancher。Rancher 是管理 Kubernetes 集群的强大解决方案，而 Rancher Desktop 运行本地 Kubernetes 和容器管理平台，这两种解决方案相辅相成。 问：Rancher Desktop 中有 Kubernetes Cluster Explorer 吗？​ 答：是的，Rancher Dashboard 作为功能预览包含在 1.2.1 版本中。你可以通过单击系统托盘菜单中的 Dashboard 选项来调用仪表板。 要了解有关 Rancher Desktop 的更多信息，请单击此处。 要了解有关 Rancher 的更多信息，请单击此处。 问：我可以同时安装 Docker Desktop 与 Rancher Desktop 吗？​ 答：可以，但它们不能同时运行，因为 Rancher Desktop 和 Docker Desktop 使用相同的 Docker socket（/var/run/docker.sock）。在启动一个之前，一定要先停止另一个。 问：如何彻底卸载 Rancher Desktop？​ 答：首先，执行恢复出厂设置，然后你将卸载该应用程序。卸载过程因操作系统而异。如需更多信息，请参阅此处。 问：Windows 上的 DNS VPN 有哪些支持（如果有）？​ 答：Windows 的替代 DNS 解析器已实现，用来解决 Windows 上的某些 VPN 问题。它支持通过 VPN 连接进行 DNS 查找。它必须通过编辑内部配置文件手动启用。 问：“WSL 集成”选项卡有什么作用？​ 答：它能使 Kubernetes 配置可以在显示的 WSL 发行版中访问，以便你使用 kubectl 之类的命令与 Kubernetes 进行通信。 问：我在哪里可以找到详细的日志？​ 答：点击 Troubleshooting 标签，然后点击 Show Logs。 问：如何为 Traefik Ingress Controller 启用仪表板？​ 答：出于安全原因，Traefik 仪表板默认不公开。但是，你可以通过多种方式公开仪表板。你可以使用下面显示的两种方法之一。 使用 port-forward 来启用仪表板访问​ kubectl port-forward -n kube-system $(kubectl -n kube-system get pods --selector &quot;app.kubernetes.io/name=traefik&quot; --output=name) 9000:9000 在浏览器中访问 http://127.0.0.1:9000/dashboard/ 以查看 Traefik 仪表板。 使用 HelmChartConfig 来启用仪表板访问​ 将以下说明复制到文件中，例如 expose-traefik.yaml： apiVersion: helm.cattle.io/v1 kind: HelmChartConfig metadata: name: traefik namespace: kube-system spec: valuesContent: |- dashboard: enabled: true ports: traefik: expose: true # Avoid this in production deployments logs: access: enabled: true 运行命令： kubectl apply -f expose-traefik.yaml 在浏览器中访问 http://127.0.0.1:9000/dashboard/ 以查看 Traefik 仪表板。 问：如何禁用 Traefik，这样会删除 Traefik 资源吗？​ 答：是的，你可以禁用 Traefik 以释放端口 80 和 443 用于备用 ingress 配置。禁用 Traefik 不会 删除现有资源。Kubernetes Settings 下会默认选择 Enable Traefik 功能，取消选中此框即可禁用它。 如果要删除 Traefik 资源，请在 UI 的 Kubernetes Settings 面板上单击 Reset Kubernetes。 问：是否支持内部容器端口转发？​ 答：是的，我们已在 Linux 和 macOS 上再次启用此功能的支持。 问：文件共享的工作原理与 Docker Desktop 类似吗？是否必须进行任何其他配置才能将卷挂载到 VM？​ 答：目前默认共享以下目录：macOS 上为 /Users/$USER，Linux 上为 /home/$USER，二者均共享 /tmp/rancher-desktop。对于 Windows，所有文件都通过 WSL2 自动共享。 问：容器是否能通过 host.docker.internal 回到主机服务？​ 答：是的。在 Windows 上，你可能需要创建防火墙规则来允许主机和容器之间的通信。你可以在特权 powershell 中运行以下命令来创建防火墙规则： New-NetFirewallRule -DisplayName &quot;WSL&quot; -Direction Inbound -InterfaceAlias &quot;vEthernet (WSL)&quot; -Action Allow 问：我不需要 Rancher Desktop 部署的 Kubernetes 集群；如何禁用它以节省资源？​ 答：你可以将 Kubernetes 禁用为仅运行 containerd 或 dockerd，从而减少资源消耗。Kubernetes Settings下会默认选择 Enable Traefik 功能，取消选中此框即可禁用它。 问：Kubernetes Image Manager (kim) 发生了什么？​ 答：从 1.0 版本开始，Kim 不再被支持，而且已被 nerdctl 和 Docker CLI 取代。 问：为什么运行 brew install rancher 时出现 It seems there is already a Binary at '/usr/local/bin/&lt;BINARY&gt;' 的错误？​ 答：如果支持 Rancher Desktop 的工具（Helm、kubectl、nerdctl、docker）已经由 Homebrew 管理，那么由于 Homebrew cask 公式的定义方式，安装会失败。你可以使用 Mac 应用程序进行安装来避免这个问题。 问：我通过 Arch User Repository 安装了 nerdctl，但它不能与 Rancher Desktop 一起使用，为什么？​ 答：对于 Rancher Desktop，nerdctl 必须在 VM 内部而不是在主机上运行。主机版本只是一个 shell wrapper，用于在 VM 内执行命令。 问：Support Utilities 页面上的工具未安装，我看到 Insufficient permission to modify /usr/local/bin 错误，我该如何解决？​ 答：当你没有 /usr/local/bin 的权限时就会发生这种情况。改善权限处理的长期解决方案正在开发中。同时，一个临时的解决方法是通过运行 sudo chown $USER /usr/local/bin 来更改 /usr/local/bin 的权限。当你能够写入目录时，Rancher Desktop 就能够创建符号链接。 从 1.3.0 及更高版本开始，我们不再在 /usr/local/bin 中创建符号链接，而是在 ~/.rd/bin 中创建符号链接，并将该目录放在 PATH 中，这样可以避免处理 /usr/local/bin 的写权限和文件冲突。我们强烈建议你升级到最新版本的 Rancher Desktop。 问：Cygwin 与 Rancher Desktop 兼容吗？​ 答：没有，但我们有增加兼容性的计划。 问：如何将 Rancher Desktop 添加到 Windows 的启动程序列表中？​ 答：在 Windows 上，你可以通过不同的方式将程序添加到启动程序列表中。例如，你可以执行以下步骤： - 按 Windows+R 打开运行对话框。 - 输入 `shell:startup`，然后按 Enter 打开 Startup 文件夹。 - 从桌面复制 “Rancher Desktop” 快捷方式并粘贴到 Startup 文件夹中。 - 重新启动主机。 问：Rancher Desktop 实际将数据卷放在哪里？​ 答： Windows： 打开运行菜单（按 Windows + R）并打开下面的路径（具体取决于活动的容器运行时）： dockerd(moby): \\\\wsl$\\rancher-desktop-data\\var\\lib\\docker\\volumes containerd: \\\\wsl$\\rancher-desktop-data\\var\\lib\\nerdctl\\dbb19c5e\\volumes\\&lt;namespace&gt; macOS 和 Linux： 根据活动的容器运行时，在 (lima) VM 中导航到下面的路径。你可以使用 rdctl shell 访问 VM 中的这些路径。 dockerd(moby): /var/lib/docker/volumes containerd: /var/lib/nerdctl/dbb19c5e/volumes/&lt;namespace&gt; ","keywords":""},{"title":"安装","type":0,"sectionRef":"#","url":"1.6/getting-started/installation","content":"","keywords":""},{"title":"macOS​","type":1,"pageTitle":"安装","url":"1.6/getting-started/installation#macos","content":""},{"title":"要求​","type":1,"pageTitle":"安装","url":"1.6/getting-started/installation#要求","content":"Rancher Desktop 在 macOS 上运行需要以下条件： macOS Catalina 10.15 或更高版本。带有 VT-x 的 Apple 芯片 (M1) 或 Intel CPU。连接到互联网。 还建议具备以下条件： 8 GB 内存4 个 CPU 你要运行的工作负载可能还需要一些额外的资源。 "},{"title":"在 macOS 上安装 Rancher Desktop​","type":1,"pageTitle":"安装","url":"1.6/getting-started/installation#在-macos-上安装-rancher-desktop","content":"转到 GitHub 上的 Releases 页面。找到要下载的 Rancher Desktop 版本。展开 Assets 部分并下载 Rancher.Desktop-X.Y.Z.dmg，其中 X.Y.Z 是 Rancher Desktop 的版本。导航到下载安装程序的目录，并运行安装程序。这个目录通常是下载文件夹。双击 DMG 文件。在打开的访达窗口中，将 Rancher Desktop 图标拖到应用程序文件夹中。导航到应用程序文件夹，然后双击 Rancher Desktop 来启动它。 安装 Rancher Desktop 后，用户可以访问以下支持的工具： Helmkubectlnerdctldocker (moby) "},{"title":"在 macOS 上卸载 Rancher Desktop​","type":1,"pageTitle":"安装","url":"1.6/getting-started/installation#在-macos-上卸载-rancher-desktop","content":"打开访达 &gt; 应用程序。找到 Rancher Desktop。选中它，然后选择文件 &gt; 移到废纸篓。要删除应用程序，选择访达 &gt; 清倒废纸篓。 "},{"title":"Windows​","type":1,"pageTitle":"安装","url":"1.6/getting-started/installation#windows","content":""},{"title":"要求​","type":1,"pageTitle":"安装","url":"1.6/getting-started/installation#要求-1","content":"Rancher Desktop 在 Windows 上运行需要以下条件： Windows 10 build 1909 或更高版本。支持家庭版。在具有虚拟化功能的主机上运行。连接到互联网。 Rancher Desktop 在 Windows 上需要 Windows Subsystem for Linux，它将作为 Rancher Desktop 设置的一部分自动安装。你不需要手动下载发行版。 还建议具备以下条件： 8 GB 内存4 个 CPU 你要运行的工作负载可能还需要一些额外的资源。 注意：你可以在 Windows 主机上以非管理员用户身份使用 Rancher Desktop。但是，以下组件的安装过程需要管理员的干预： WSL2：你需要管理员权限才能安装 WSL2，它是 Rancher Desktop 的重要组件。Rancher Desktop Privileged Service：你需要管理员权限才能安装 Rancher Desktop Privileged Service，这是在主机的所有接口上公开运行在容器内的应用程序/服务所必需的。你也可以跳过 Rancher Desktop Privileged Service 的安装，这样的话，你将无法在 127.0.0.1 之外的任何接口上公开应用程序/服务。 "},{"title":"在 Windows 上安装 Rancher Desktop​","type":1,"pageTitle":"安装","url":"1.6/getting-started/installation#在-windows-上安装-rancher-desktop","content":"转到 GitHub 上的 Releases 页面。找到要下载的 Rancher Desktop 版本。展开 Assets 部分并下载 Windows 安装程序。它的名称是 Rancher.Desktop.Setup.X.Y.Z.exe，其中 X.Y.Z 是 Rancher Desktop 的版本。导航到下载安装程序的目录，并运行安装程序。这个目录通常是下载文件夹。查看许可协议并单击 I Agree 来继续安装。安装完成后，单击 Finish 来关闭安装向导。 "},{"title":"在 Windows 上卸载 Rancher Desktop​","type":1,"pageTitle":"安装","url":"1.6/getting-started/installation#在-windows-上卸载-rancher-desktop","content":"在任务栏中，单击开始菜单。转到设置 &gt; 应用程序 &gt; 应用程序和功能。找到并选择 Rancher Desktop。点击卸载，出现确认信息时再次点击。按照 Rancher Desktop 卸载程序上的提示继续。完成后点击完成。 "},{"title":"Linux​","type":1,"pageTitle":"安装","url":"1.6/getting-started/installation#linux","content":""},{"title":"要求​","type":1,"pageTitle":"安装","url":"1.6/getting-started/installation#要求-2","content":"Rancher Desktop 在 Linux 上运行需要以下条件： 一个可以安装 .deb 或 .rpm 包或 AppImages 的发行版。连接到互联网。带有 AMD-V 或 VT-x 的 x86_64 处理器。/dev/kvm 上的读写权限。详情见下文。 还建议具备以下条件： 8 GB 内存4 个 CPU 你要运行的工作负载可能还需要一些额外的资源。 "},{"title":"确保你可以访问 /dev/kvm​","type":1,"pageTitle":"安装","url":"1.6/getting-started/installation#确保你可以访问-devkvm","content":"Rancher Desktop 需要 /dev/kvm 的权限，而在某些发行版（例如 Ubuntu 18.04）上，用户没有足够的权限。 要检查你是否具有所需的权限，请执行以下操作： [ -r /dev/kvm ] &amp;&amp; [ -w /dev/kvm ] || echo 'insufficient privileges'  如果输出是 insufficientprivilege，你需要将你的用户添加到 kvm 组。你可以执行以下操作： sudo usermod -a -G kvm &quot;$USER&quot;  然后重新启动使更改生效。 "},{"title":"pass 设置​","type":1,"pageTitle":"安装","url":"1.6/getting-started/installation#pass-设置","content":"默认情况下，Rancher Desktop 使用 pass 来安全地存储通过 docker login 和 nerdctl login 传递的凭证。在第一次在主机上使用时，pass 需要你进行少量的设置。如果你不打算使用 docker login 或 nerdctl login，你不需要设置 pass。但请记住，如果你以后需要使用它们，你必须设置它们，否则会出现错误。 安装 Rancher Desktop 后，你应该创建一个 GPG 密钥。pass 会使用它来保护密文。要创建 GPG 密钥： gpg --generate-key  输出应该与 8D818FB37A9279E341F01506ED96AD27A40C9C73 类似。 这是你的密钥 ID。然后，你可以通过将此密钥 ID 传递给它来初始化 pass： pass init 8D818FB37A9279E341F01506ED96AD27A40C9C73  关于 pass 的更多信息，请参阅此处。 "},{"title":"Traefik 端口绑定访问​","type":1,"pageTitle":"安装","url":"1.6/getting-started/installation#traefik-端口绑定访问","content":"Rancher Desktop 使用 Traefik 作为默认 Ingress Controller。由于 Traefik Ingress 上的端口访问受限，用户在部署 Rancher Desktop 后可能会遇到 permission denied 错误。大多数 Linux 发行版（例如 Ubuntu 20.04）不允许非 root 用户监听 1024 以下的 TCP 和 UDP 端口。为了让 Traefik 监听本地主机上的特权端口，请运行以下命令： sudo sysctl -w net.ipv4.ip_unprivileged_port_start=80  命令运行后，80 及以上的所有端口都将变为非特权端口，Traefik 将能够成功访问这些端口。 "},{"title":"通过 .deb 包安装​","type":1,"pageTitle":"安装","url":"1.6/getting-started/installation#通过-deb-包安装","content":"添加 Rancher Desktop 仓库并使用以下命令安装 Rancher Desktop： curl -s https://download.opensuse.org/repositories/isv:/Rancher:/stable/deb/Release.key | gpg --dearmor | sudo dd status=none of=/usr/share/keyrings/isv-rancher-stable-archive-keyring.gpg echo 'deb [signed-by=/usr/share/keyrings/isv-rancher-stable-archive-keyring.gpg] https://download.opensuse.org/repositories/isv:/Rancher:/stable/deb/ ./' | sudo dd status=none of=/etc/apt/sources.list.d/isv-rancher-stable.list sudo apt update sudo apt install rancher-desktop  "},{"title":"卸载 .deb 包​","type":1,"pageTitle":"安装","url":"1.6/getting-started/installation#卸载-deb-包","content":"你可以使用以下命令删除包、仓库和密钥： sudo apt remove --autoremove rancher-desktop sudo rm /etc/apt/sources.list.d/isv-rancher-stable.list sudo rm /usr/share/keyrings/isv-rancher-stable-archive-keyring.gpg sudo apt update  "},{"title":"通过 .rpm 包安装​","type":1,"pageTitle":"安装","url":"1.6/getting-started/installation#通过-rpm-包安装","content":"注意：Rancher Desktop 在 Linux 上使用 QEMU，而 RHEL、Fedora 和相关发行版打包 QEMU 的方式与其他发行版不同。要在这些发行版上使用 Rancher Desktop，请使用 AppImage。 在 openSUSE 上添加仓库并安装： sudo zypper addrepo https://download.opensuse.org/repositories/isv:/Rancher:/stable/rpm/isv:Rancher:stable.repo sudo zypper install rancher-desktop  "},{"title":"卸载 .rpm 包​","type":1,"pageTitle":"安装","url":"1.6/getting-started/installation#卸载-rpm-包","content":"确保 Rancher Desktop 已退出（如果没有，它应该出现在 Dock 中），然后执行： sudo zypper remove --clean-deps rancher-desktop sudo zypper removerepo isv_Rancher_stable  "},{"title":"通过 AppImage 安装​","type":1,"pageTitle":"安装","url":"1.6/getting-started/installation#通过-appimage-安装","content":"首先，确保安装了 pass 和 gpg。例如，在 Fedora 上： dnf install pass gnupg2  你可以在此处下载 AppImage。要运行它，只需要添加可执行权限，然后执行即可。为了更好地与你的桌面集成，你可以使用 AppImageLauncher。 "},{"title":"卸载 AppImage​","type":1,"pageTitle":"安装","url":"1.6/getting-started/installation#卸载-appimage","content":"只需删除 AppImage。 "},{"title":"功能","type":0,"sectionRef":"#","url":"1.6/getting-started/features","content":"","keywords":""},{"title":"General​","type":1,"pageTitle":"功能","url":"1.6/getting-started/features#general","content":"General 选项卡提供了社区 channel 的信息，用户可以通过这些 channel 联系 Rancher Desktop 团队和社区，并提出问题、报告错误或讨论 Rancher Desktop。 "},{"title":"Port Forwarding​","type":1,"pageTitle":"功能","url":"1.6/getting-started/features#port-forwarding","content":"如需转发端口： 找到 Service 并单击 Forward，指定要使用的端口或使用随机分配的端口。点击 ✓ 按钮来确认你的选择。可选：单击 Cancel 来移除分配的端口。 "},{"title":"Images​","type":1,"pageTitle":"功能","url":"1.6/getting-started/features#images","content":"Images 选项卡允许你管理虚拟机上的镜像。 要改用 nerdctl 管理镜像，请参阅镜像。 "},{"title":"Scanning Images​","type":1,"pageTitle":"功能","url":"1.6/getting-started/features#scanning-images","content":"此功能使用 Trivy 来扫描你的镜像，从而查找漏洞和配置问题。 要扫描镜像： 从镜像列表中，找到要扫描的镜像。单击 ⋮ &gt; Scan。将显示按严重程度排序的漏洞摘要。单击 &gt; 查看​​每个漏洞的详细信息，其中包括漏洞详情的链接。 "},{"title":"Adding Images​","type":1,"pageTitle":"功能","url":"1.6/getting-started/features#adding-images","content":"Pulling Images​ 此选项可以让你将镜像从镜像仓库拉取到你的虚拟机中。 要拉取镜像： 单击右上角的 + 按钮。单击 Pull 选项卡。输入要拉取的镜像的名称。 注意：默认情况下，镜像是从 Docker Hub 中提取的（格式：repo/image[:tag]）。要从其他镜像仓库中拉取，请包含主机名 registry.example.com/repo/image[:tag]。 单击 Pull。 Building Images​ 使用此选项构建镜像并将其添加到你的虚拟机。 要构建镜像： 单击右上角的 + 按钮。单击 Build 选项卡。输入构建的镜像的名称，例如 repo/image、repo/image:tag、registry.example.com/repo/image 或 registry.example.com/repo/image:tag。单击 Build。在文件浏览器中，选择要用来构建镜像的 Dockerfile。 "},{"title":"Troubleshooting​","type":1,"pageTitle":"功能","url":"1.6/getting-started/features#troubleshooting","content":""},{"title":"Show Logs​","type":1,"pageTitle":"功能","url":"1.6/getting-started/features#show-logs","content":"使用此选项打开包含所有 Rancher Desktop 日志文件的文件夹。 Enable Debug Mode​ 启用 debug 级别日志记录。 "},{"title":"Reset Kubernetes​","type":1,"pageTitle":"功能","url":"1.6/getting-started/features#reset-kubernetes","content":"重置 Kubernetes 并删除所有工作负载和配置。在重置之前，用户会看到确认信息以及删除容器镜像的选项。 要重置 Kubernetes： 单击 Reset Kubernetes，然后，你会看到一个确认窗口。可选：选择是否同时删除容器镜像。单击 Reset。Kubernetes 会停止并重新启动。 "},{"title":"Factory Reset​","type":1,"pageTitle":"功能","url":"1.6/getting-started/features#factory-reset","content":"删除集群和所有其他 Rancher Desktop 设置。必须再次执行初始设置流程。 要恢复出厂设置： 单击 Reset。然后，你会看到一个确认窗口。可选：选择是否保留缓存的 Kubernetes 镜像。单击 Factory Reset。Kubernetes 会停止，Rancher Desktop 会关闭。可选：再次启动 Rancher Desktop。 "},{"title":"Diagnostics​","type":1,"pageTitle":"功能","url":"1.6/getting-started/features#diagnostics","content":"注意：Rancher Desktop 不会将诊断数据发送到任何远程服务器进行处理或存储。 Diagnostics 功能通过在后台运行多项检查来检测环境中的常见问题（例如不满足最低要求、配置错误等），帮助你自行排除和修复 Rancher Desktop 应用程序的问题。 每次启动应用程序时都会运行诊断检查。如果发现任何问题，则失败检查的数量会显示在左侧导航栏中的 Diagnostics 菜单文本的旁边。Diagnostics 选项卡会显示诊断测试的结果，突出显示需要注意的区域，并指导你解决问题。 如果你进行了非标准设置，并且知道这些检查不适用于你的情况，你可以在此选项卡上 mute/unmute 个别检查。你还可以随时重新运行诊断程序，从而验证你对环境所做的更改是否已经解决了问题。  "},{"title":"Preferences​","type":1,"pageTitle":"功能","url":"1.6/getting-started/features#preferences","content":"此页面允许你修改 Rancher Desktop 实例的设置。 要访问 Preferences，请单击右上角的 ⚙ 图标。你可以使用左侧的选项卡来访问不同类别的 Rancher Desktop 首选项。根据需要更新首选项。下方概述了可用的首选项设置。要应用更新，请单击 Apply。 "},{"title":"Application​","type":1,"pageTitle":"功能","url":"1.6/getting-started/features#application","content":"WindowsmacOS &amp; Linux Automatic Updates​ 当一个新版本发布时，用户会得到一个通知和升级目标的发行版说明。无论是否启用了自动更新，用户都会收到通知。如果启用此选项，更新会被下载，然后在下次启动 Rancher Desktop 时安装更新。 Statistics​ 该选项允许 Rancher Desktop 收集关于你与 Rancher Desktop 应用程序交互的信息，但不会收集你运行的工作负载等信息。 "},{"title":"WSL (Windows)​","type":1,"pageTitle":"功能","url":"1.6/getting-started/features#wsl-windows","content":"该选项使 Rancher Desktop Kubernetes 配置能够被任何 WSL 配置的 Linux 发行版所访问。一旦启用，你可以使用 WSL 发行版中的 kubectl 等工具与 Rancher Desktop Kubernetes 集群进行通信。 WSL 让你在所有 Linux 发行版中全局配置内存和 CPU 分配。请参阅 WSL 文档中的说明。 "},{"title":"Virtual Machine (macOS & Linux)​","type":1,"pageTitle":"功能","url":"1.6/getting-started/features#virtual-machine-macos--linux","content":"Memory​ 分配给 Rancher Desktop 的内存。可选范围取决于你的系统。红色区域表示分配可能会影响系统服务。 CPU​ 分配给 Rancher Desktop 的 CPU 数量。可选范围取决于你的系统。红色区域表示分配可能会影响系统服务。 "},{"title":"Container Runtime​","type":1,"pageTitle":"功能","url":"1.6/getting-started/features#container-runtime","content":"为 Rancher Desktop 设置容器运行时。用户可以选择 containerd 为容器提供命名空间，也可以使用 nerdctl 或 dockerd (moby) 来启用 D​​ocker API 和 Docker CLI。一次只能运行一个容器运行时。 切换到不同的容器运行时： 使用现有容器运行时构建或拉取的工作负载和镜像在切换的容器运行时不可用。 "},{"title":"Kubernetes​","type":1,"pageTitle":"功能","url":"1.6/getting-started/features#kubernetes","content":"Enable Kubernetes​ 此选项允许你启用或禁用 Kubernetes。禁用 Kubernetes 后，你可以只运行 containerd 或 dockerd 来减少资源消耗。默认情况下，Kubernetes 是启用的。 要启用/禁用 Kubernetes，只需选中/取消选中 Enable Kubernetes 复选框。启用/禁用 Kubernetes 时，该应用程序将重新启动。禁用 Kubernetes 不会删除现有资源，重新启用 Kubernetes 时，你可以再次使用这些资源。 Kubernetes Version​ 该选项显示了 Rancher Desktop 实例可以使用的 Kubernetes 版本列表。 升级时： 会进行检查，看目标 Kubernetes 版本是否可以在本地使用。如果没有，它会下载对应文件。保留工作负载。保留镜像。 降级时： 移除工作负载。保留镜像。 要切换版本： 点击 Kubernetes version 下拉菜单。选择要转换的版本。 Kubernetes Port​ 设置 Kubernetes 暴露的端口。如果有多个 K3s 实例正在运行，使用此设置可以避免端口冲突。 Enable Traefik​ 此选项允许你启用或禁用 Traefik。禁用 Traefik 后，你可以释放端口 80 和 443，以便将其用于备用 ingress 配置。默认情况下，Traefik 是启用的。 禁用 Traefik 不会删除现有资源。 "},{"title":"使用 k3d 创建多节点集群","type":0,"sectionRef":"#","url":"1.6/how-to-guides/create-multi-node-cluster","content":"","keywords":""},{"title":"启动多节点集群的步骤​","type":1,"pageTitle":"使用 k3d 创建多节点集群","url":"1.6/how-to-guides/create-multi-node-cluster#启动多节点集群的步骤","content":"确保在 Kubernetes Settings 页面中选择了 dockerd(moby) 作为容器运行时。 安装 k3d。 wgetcurl wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash  运行 k3d cluster create 命令来启动多节点集群。例如： k3d cluster create two-node-cluster --agents 2 k3d cluster create three-node-cluster --agents 3  k3d 将新创建的集群设置为 active。你可以通过 kubectl config use-context 命令来切换集群。例如： kubectl config use-context k3d-two-node-cluster  要了解有关 k3s 和 k3d 的更多信息，请参阅这些项目的文档（k3s 文档 和 k3d 文档）。 ⚠️ 请注意，k3d 创建的集群不是通过 Rancher Desktop GUI 管理的。 "},{"title":"Hello World 示例","type":0,"sectionRef":"#","url":"1.6/how-to-guides/hello-world-example","content":"","keywords":""},{"title":"示例 1 - 构建镜像并运行容器​","type":1,"pageTitle":"Hello World 示例","url":"1.6/how-to-guides/hello-world-example#示例-1---构建镜像并运行容器","content":"创建文件夹​ mkdir hello-world cd hello-world  创建一个空白的 Dockerfile​ 在 Windows 上，创建一个名为 Dockerfile 的空白文件。 在 Linux 上，你可以使用以下命令创建一个空白的 Dockerfile: vi Dockerfile  使用以下命令填充 Dockerfile​ FROM alpine CMD [&quot;echo&quot;, &quot;Hello World!!&quot;]  构建并运行镜像以进行验证​ nerdctldocker nerdctl build --tag helloworld:v1.0 . nerdctl images | grep helloworld nerdctl run --rm helloworld:v1.0 # 移除镜像 nerdctl rmi helloworld:v1.0  "},{"title":"示例 2 - 构建镜像并将容器部署到 Kubernetes​","type":1,"pageTitle":"Hello World 示例","url":"1.6/how-to-guides/hello-world-example#示例-2---构建镜像并将容器部署到-kubernetes","content":"根据需要将 Kubernetes Settings 面板中的 Container Runtime 切换为 dockerd 或 containerd。 创建一个文件夹并添加一个示例 index.html 文件，如下所示​ mkdir nginx cd nginx echo &quot;&lt;h1&gt;Hello World from NGINX!!&lt;/h1&gt;&quot; &gt; index.html  创建一个空白的 Dockerfile​ 在 Windows 上，创建一个名为 Dockerfile 的空白文件。 在 Linux 上，你可以使用以下命令创建一个空白的 Dockerfile: vi Dockerfile  使用以下命令填充 Dockerfile​ FROM nginx:alpine COPY . /usr/share/nginx/html  使用本地代码构建镜像​ ⚠️ 注意：你需要将 --namespace k8s.io 标志传递给 nerdctl build 命令，以便 nerdctl 构建镜像并使其在 k8s.io 命名空间中可用。 nerdctldocker nerdctl --namespace k8s.io build --tag nginx-helloworld:latest . nerdctl --namespace k8s.io images | grep nginx-helloworld  部署到 Kubernetes​ 运行以下命令，从而使用在上一步中构建的镜像创建和运行 pod。 ⚠️ 注意：你需要传递 --image-pull-policy=Never 标志以使用带有 :latest 标签的本地镜像（:latest 标签将始终尝试从远程仓库中拉取镜像）。 kubectl run hello-world --image=nginx-helloworld:latest --image-pull-policy=Never --port=80 kubectl port-forward pods/hello-world 8080:80  在浏览器中访问 localhost:8080，你将看到 Hello World from NGINX!! 的信息。如果你想留在命令行上，请使用 curl localhost:8080。 删除 pod 和镜像​ nerdctldocker kubectl delete pod hello-world # 移除镜像 nerdctl --namespace k8s.io rmi nginx-helloworld:latest  "},{"title":"增加打开文件限制","type":0,"sectionRef":"#","url":"1.6/how-to-guides/increasing-open-file-limit","content":"","keywords":""},{"title":"macOS & Linux 步骤​","type":1,"pageTitle":"增加打开文件限制","url":"1.6/how-to-guides/increasing-open-file-limit#macos--linux-步骤","content":"首先，使用 lima override.yaml 编写配置脚本。 在以下路径创建 override.yaml 文件。 macOSLinux ~/Library/Application Support/rancher-desktop/lima/_config/override.yaml  然后，使用下面的脚本为 override.yaml 文件中的容器增加 ulimit。 provision: - mode: system script: | #!/bin/sh cat &lt;&lt;'EOF' &gt; /etc/security/limits.d/rancher-desktop.conf * soft nofile 82920 * hard nofile 82920 EOF  如果你使用 Elastic 平台，请使用下面的脚本设置 vm.max_map_count 参数。 provision: - mode: system script: | #!/bin/sh cat &lt;&lt;'EOF' &gt; /etc/security/limits.d/rancher-desktop.conf * soft nofile 82920 * hard nofile 82920 sysctl -w vm.max_map_count=262144 EOF  最后，停止并重启 Rancher Desktop 来让新的限制生效。 "},{"title":"Windows 步骤​","type":1,"pageTitle":"增加打开文件限制","url":"1.6/how-to-guides/increasing-open-file-limit#windows-步骤","content":"首先，确保 Rancher Desktop 至少运行过一次来初始化配置。 然后，使用以下代码在 %AppData%\\rancher-desktop\\provisioning 中创建一个配置脚本，比如 map_count.start，这样能通过增加 max_map_count 参数的值来更新打开文件的限制。 #!/bin/sh sysctl -w vm.max_map_count=262144  最后，停止并重启 Rancher Desktop 来让变更生效。 "},{"title":"Rancher Desktop 上的 Rancher","type":0,"sectionRef":"#","url":"1.6/how-to-guides/rancher-on-rancher-desktop","content":"Rancher Desktop 上的 Rancher 虽然 Rancher 和 Rancher Desktop 的名字里都包含 Rancher，但它们的功能是有差别的。Rancher Desktop 不是桌面版 Rancher。Rancher 是管理 Kubernetes 集群的强大解决方案，而 Rancher Desktop 运行本地 Kubernetes 和容器管理平台，这两种解决方案相辅相成。例如，你可以将 Rancher 作为工作负载安装在 Rancher Desktop 中。 本指南概述了使用 container runtime 或 helm（本地环境）在 Rancher Desktop 上安装 Rancher Dashboard 的步骤： 注意：如果实用程序（例如：helm）或你的工作负载版本与会话中的 Kubernetes 版本不兼容，你可能会遇到问题。作为一个潜在的修复，你可以通过 Preferences &gt; Kubernetes 对话框切换到兼容的 Kubernetes 版本。支持矩阵页面上列出了 Rancher 支持的 Kubernetes 平台。 nerdctldockerhelm nerdctl run --privileged -d --restart=always -p 8080:80 -p 8443:443 rancher/rancher 安装需要几分钟才能完成。安装后，你可以访问 Rancher UI，如下所示： 通过 container runtime 安装：https://localhost:8443/通过 helm 安装：https://rancher.rd.localhost/ nerdctldocker 要访问 Rancher UI，你需要获取引导密码： 1：获取 Rancher UI 容器 ID/名称： nerdctl ps 2：获取引导密码： nerdctl logs [rancherContainerID] 2&gt;&amp;1 | grep &quot;Bootstrap Password:&quot; 3：引导密码示例： [INFO] Bootstrap Password: 7fwjjw4ldcmnq8ghns22q7nhl5lrznwwt9p9vjljfjc6tqbcvhxmwq 按照向导说明并单击 Continue 以进入 Rancher UI 主页面。 在 Rancher UI 中，你可以管理 local 集群、节点等。如需更多信息，请参阅 Rancher 文档。","keywords":""},{"title":"配置脚本","type":0,"sectionRef":"#","url":"1.6/how-to-guides/provisioning-scripts","content":"","keywords":""},{"title":"macOS & Linux​","type":1,"pageTitle":"配置脚本","url":"1.6/how-to-guides/provisioning-scripts#macos--linux","content":"在 macOS 和 Linux 上，你可以使用 lima override.yaml 来编写配置脚本。 在以下路径创建 override.yaml 文件。 macOSLinux ~/Library/Application Support/rancher-desktop/lima/_config/override.yaml  在上一步中创建的 override.yaml 文件中编写配置脚本。例如，你可以使用以下脚本来增加容器的 ulimit： provision: - mode: system script: | #!/bin/sh cat &lt;&lt;'EOF' &gt; /etc/security/limits.d/rancher-desktop.conf * soft nofile 82920 * hard nofile 82920 EOF  你还可以使用 override.yaml 来覆盖/修改 lima 配置设置。下面的示例创建了额外的挂载： mounts: - location: /some/path writable: true  "},{"title":"Windows​","type":1,"pageTitle":"配置脚本","url":"1.6/how-to-guides/provisioning-scripts#windows","content":"注意：在 Windows 上，你只能为 1.1.0 或更高版本的 Rancher Desktop 使用这些配置脚本。 你需要至少运行 Rancher Desktop 一次以允许它创建配置。 打开 %AppData%\\\\rancher-desktop\\\\provisioning 目录。完整路径的示例：C:\\\\Users\\\\Joe\\\\AppData\\\\Roaming\\\\rancher-desktop\\\\provisioning。 请注意，任何文件扩展名为 .start 的文件（例如 k3s-overrides.start）都可以在 Rancher Desktop 启动 Kubernetes 后端（如果启用） 时执行。此类文件将在 Rancher Desktop WSL 上下文中运行。 .start 文件的示例流程： Rancher Desktop 内部设置运行配置脚本在 UI 中启用 dockerd 或 containerdKubernetes (K3s) 例如，使用 %AppData%\\\\rancher-desktop\\\\provisioning\\\\insecure-registry.start 将允许 nerdctl 默认使用不安全的镜像仓库： #!/bin/sh mkdir -p /etc/nerdctl cat &gt; /etc/nerdctl/nerdctl.toml &lt;&lt;EOF insecure_registry = true EOF  请注意，文件扩展名为 .stop 的文件（例如 wipe-data.stop）可以在 Rancher Desktop 关闭 Kubernetes 后端（如果启用）后 执行。此类文件将在相同的 Rancher Desktop WSL 上下文中运行。 .stop 文件的示例流程： 停止 k3s、dockerd 或 containerd运行取消配置的脚本 重要提示：脚本需要以 Unix 行结尾保存，未完成行尾转换，且具有 DOS 行结尾的文件可能会产生意想不到的结果。你可以使用配置脚本更改的内容是有限制的。例如，你不能使用配置脚本更改 WSL2 上的硬 ulimit。请谨慎使用配置脚本，如果你对配置脚本有任何具体问题，请随时在 Slack/Github 上与 Rancher Desktop 团队联系。 "},{"title":"离线运行","type":0,"sectionRef":"#","url":"1.6/how-to-guides/running-air-gapped","content":"","keywords":""},{"title":"Windows 用户须知​","type":1,"pageTitle":"离线运行","url":"1.6/how-to-guides/running-air-gapped#windows-用户须知","content":"本文档的环境变量使用 Powershell 语法。如果你使用的是 Command shell，看到 $env:FOO 环境变量的引用时，请将其替换为 %FOO%。 "},{"title":"网络敏感区域​","type":1,"pageTitle":"离线运行","url":"1.6/how-to-guides/running-air-gapped#网络敏感区域","content":"Rancher Desktop 假设有两个的区域的网络可用，并会在离线的情况下进行恢复： 将 Kubernetes k3s 镜像拉入 k3s 缓存目录 使用 kuberlr 作为对 kubectl 的版本感知包装器，因此客户端与 Kubernetes Server 的差异不会超过一个次要版本。 "},{"title":"现有 Deployment​","type":1,"pageTitle":"离线运行","url":"1.6/how-to-guides/running-air-gapped#现有-deployment","content":"如果 Rancher Desktop 安装在最初就具有网络访问权限的主机上，在关闭网络连接后，Rancher Desktop 仍能在该主机上运行。但是，下拉菜单中可用的 Kubernetes 版本会限制为已下载并存储在缓存中的版本。 由于 kuberlr 包装器（Windows 用户需要为每个可执行实用程序文件添加 .exe 后缀），因此使用 kubectl 客户端会存在一个问题。 在这种情况下，虽然我们的系统在初始化时已经连接到互联网，但是后续使用时会让主机脱机使用。 假设 rancher-desktop 缓存中有三个版本的 k3s： 1.24.3 1.21.14 1.19.16 假设在这个系统上我们只有在使用 1.24.3 和 1.21.14 时运行了 kubectl。换言之，~/.kuberlr/PLATFORM-ARCH/ 目录（Windows 上为$env:HOMEDRIVE%\\$env:HOMEPATH/.kuberlr/windows-amd64）只包含两个文件： kubectl1.24.3 kubectl1.21.14 如果我们将系统脱机，并通过 UI 切换到 Kubernetes 1.19.16，则系统会在运行 kubectl 的时候失败。 问题在于 kubectl 是 kuberlr 的别名，它会尝试下载 kubectl 1.19.16 并将它安装到 .kuberlr 目录中，但却无法进行访问。 因此在这种情况下，最好的方法是选择缓存中每个可用的 Kubernetes 版本，并运行 kubectl --context rancher-desktop cluster-info 来确保安装了适当版本的 kubectl 客户端，以便在断开连接时能连接系统。 你可以手动安装版本化的 kubectl，具体内容会在下一节中介绍。 "},{"title":"准备离线系统​","type":1,"pageTitle":"离线运行","url":"1.6/how-to-guides/running-air-gapped#准备离线系统","content":"此处假设你有某种移动媒体，你可以将其填充到联网系统上，然后移至离线系统中。 要让 Rancher Desktop 离线运行，你需要填充两个目录： Cache 目录​ 要填充源磁盘（我们在此将其称为 %SOURCEDISK%，实际上它也可能是某种可移动设备，例如 USB 驱动器），你需要以下文件： k3s-versions.json：该文件由 Rancher Desktop 创建。它从 https://update.k3s.io/v1-release/channels 读取原始 JSON 文件并将其转换为不同类型的 JSON 文件。目前没有实用程序来进行这种转换。获取此文件的最简单方法是在连接的系统上运行 Rancher Desktop 并保存 CACHE/k3s-versions.json 文件（请参阅下方不同系统的 CACHE 位置）。Kubernetes K3s 镜像的 Tar 包。它们列在 https://github.com/k3s-io​​/k3s/releases。如果你使用的是 k3s v1.26.1 及更高版本，你需要为 AMD/Intel 主机下载 k3s-airgap-images-amd64.tar，为 M1 主机下载 k3s-airgap-images-arm64.tar，或下载相应的 *.tar.zst 压缩包。最后，你需要下载所选版本的 k3s 可执行文件。例如，以下命令将让你离线的情况下使用 K3s v1.24.3 build 1： cd .../CACHE mkdir v1.24.3+k3s1 cd v1.24.3+k3s1 wget https://github.com/k3s-io/k3s/releases/download/v1.24.3%2Bk3s1/k3s-airgap-images-amd64.tar wget https://github.com/k3s-io/k3s/releases/download/v1.24.3%2Bk3s1/sha256sum-amd64.txt wget https://github.com/k3s-io/k3s/releases/download/v1.24.3%2Bk3s1/k3s  WindowsmacOSLinux 在 Windows 上，缓存目录是 $env:HOMEDRIVE%\\$env:HOMEPATH\\AppData\\Local\\rancher-desktop\\cache\\k3s，你可以运行以下命令创建该目录： mkdir -Force $env:HOMEDRIVE%\\$env:HOMEPATH\\AppData\\Local\\rancher-desktop\\cache\\k3s 假设你已有某些源媒体，你还需要运行以下命令来预填充缓存： copy-item -Force $env:SOURCEDISK\\k3s-versions.json $env:HOMEDRIVE%\\$env:HOMEPATH\\AppData\\Local\\rancher-desktop\\cache\\ copy-item -Recurse -Force $env:SOURCEDISK\\v&lt;MAJOR&gt;.&lt;MINOR&gt;.&lt;PATCH&gt;+k3s&lt;BUILD&gt; $env:HOMEDRIVE%\\$env:HOMEPATH\\AppData\\Local\\rancher-desktop\\cache\\k3s\\  kuberlr 目录​ 这个目录的位置更直接，在所有平台上，该目录都位于 HOME/.kuberlr/PLATFORM-ARCH，其中： HOME 是主目录。通常情况下，在 Windows 上为 $env:HOMEDRIVE%\\$env:HOMEPATH，在 macOS 和 Linux 上为 ~ 或 $HOME。PLATFORM 是 windows、linux 或 darwin。ARCH 在 M1 主机上是 aarch64，在其它主机上是 amd64。 要进行填充，请确定你要使用的 Kubernetes 版本，并联网下载适当的可执行文件。它们将位于： WindowsmacOS &amp; Linux https://dl.k8s.io/VERSION/bin/PLATFORM/CPU/kubectl.exe 其中： VERSION 的格式是 vMAJOR.MINOR.PATCH（如 v1.22.1）PLATFORM 是 darwin、linux 或 windowsCPU 在 M1 主机上是 arm64，在其他主机上是 amd64 例如，要获取使用 Kubernetes v1.22 且用于 Windows 的 kubectl，此 Windows 命令 shell（不是 PowerShell）命令会将其放在 SOURCEDISK 上： wget -O %SOURCEDISK/kubectl1.22.1.exe https://dl.k8s.io/v1.22.1/bin/windows/amd64/kubectl.exe  版本说明​ Kubectl 客户端保证使用主要版本相同的 Server，且它们最多只相差一个次要版本。例如，如果你的组织使用的 Kubernetes 版本是 v1.21.x、v1.22.x 和 v1.23.x，对于任何 x 补丁版本，你只需在 .kuberlr 目录中安装 kubectl1.22.x 即可。但是，如果你复制一个 Kubernetes v1.24.x 到 CACHE 目录，你需要确保 .kuberlr 目录中也有一个兼容的 kubectl（v1.23.x、v1.24.x 或 v1.25.x 中的其中一个即可）。 "},{"title":"Skaffold 与 Rancher Desktop","type":0,"sectionRef":"#","url":"1.6/how-to-guides/skaffold-and-rancher-desktop","content":"Skaffold 与 Rancher Desktop Skaffold 是一个命令行工具，用于 Kubernetes 原生应用程序的持续开发。Skaffold 处理构建、推送和部署应用程序的工作流，并提供用于创建 CI/CD 流水线的构建块。它能让你专注于在本地迭代你的应用程序，Skaffold 则能持续部署到你的本地或远程 Kubernetes 集群。要了解有关 Skaffold 的更多信息，请参阅 Skaffold 项目文档。 为了演示使用 Rancher Desktop 设置 Skaffold 的步骤，Rancher Desktop 文档在此处提供了一个 nodejs 应用程序示例。 重要提示：Skaffold 仅适用于 dockerd (Moby)。因此，请确保在 Rancher Desktop UI 的 Kubernetes Settings 面板中选择了 dockerd 作为运行时。 访问 https://skaffold.dev/docs/install/ 安装 Skaffold。 克隆 Rancher Desktop 文档仓库并在终端中导航到 express-sample，如下所示： cd docs.rancherdesktop.io/assets/express-sample 运行 skaffold init。 根据 Skaffold 文档 的介绍，skaffold init 会遍历你的项目目录并查找 build 配置文件（例如 Dockerfile、build.gradle /pom.xml、package.json、requirements.txt 或 go.mod）。 在我们的示例中，我们将选择 Dockerfile 和 package.json。这将生成你可以修改的初始配置文件。出现提示时，选择 yes 将你的配置写入 skaffold.yaml。 在你的编辑器中，查看你的 app.js 和 manifests.yaml 文件。请注意，在 manifests.yaml 中，你将拥有一个 deployment 配置和一个 service 配置。在测试场景下，仅需要 1 个 replica 即可。 回到你的终端，你会注意到你有两个选项，分别是 skaffold run（允许你构建和部署）和 skaffold dev （允许你进入开发模式自动重新部署）。在此示例中，我们将使用 skaffold dev。 由于你需要对镜像仓库具有推送访问权限，因此你可以使用 docker 登录，也可以设置本地镜像仓库： Docker Hub本地镜像仓库 在运行 skaffold dev 之前，如果你有 Docker Hub 账号，请使用你的 docker 登录。然后，在文件 skaffold.yaml 和 manifests.yaml 中，将 matamagu/express-sample 替换为 YOUR_DOCKER_HUB_USERNAME/express-sample，这是因为 skaffold dev 会将构建的镜像推送到 DockerHub。 在进行开发时，Skaffold 将检测所有更改，并会自动再次执行构建和部署的过程。你将能够看到集群中的任何更改。 在浏览器中访问 localhost:3000，你将看到 express-sample 界面。","keywords":""},{"title":"设置 NGINX Ingress Controller","type":0,"sectionRef":"#","url":"1.6/how-to-guides/setup-NGINX-Ingress-Controller","content":"","keywords":""},{"title":"步骤​","type":1,"pageTitle":"设置 NGINX Ingress Controller","url":"1.6/how-to-guides/setup-NGINX-Ingress-Controller#步骤","content":"在 Kubernetes Settings 页面取消选中 Enable Traefik 来禁用 Traefik。你可能需要退出并重新启动 Rancher Desktop 才能使更改生效。 通过 helm 或 kubectl 部署 NGINX Ingress Controller： helmkubectl helm upgrade --install ingress-nginx ingress-nginx \\ --repo https://kubernetes.github.io/ingress-nginx \\ --namespace ingress-nginx --create-namespace  等待 ingress pod 运行： kubectl get pods --namespace=ingress-nginx  创建示例 deployment 和关联的 service： kubectl create deployment demo --image=nginx --port=80 kubectl expose deployment demo  创建 ingress 资源。以下命令使用了映射到 localhost 的主机： kubectl create ingress demo-localhost --class=nginx --rule=&quot;demo.localdev.me/*=demo:80&quot;  将本地端口转发到 Ingress Controller： kubectl port-forward --namespace=ingress-nginx service/ingress-nginx-controller 8080:80  现在，如果你访问 http://demo.localdev.me:8080/ ，你应该会看到 NGINX 的欢迎页面。 "},{"title":"使用 VS Code Docker 扩展来调试容器应用程序","type":0,"sectionRef":"#","url":"1.6/how-to-guides/vs-code-docker","content":"","keywords":""},{"title":"调试容器化应用程序的步骤​","type":1,"pageTitle":"使用 VS Code Docker 扩展来调试容器应用程序","url":"1.6/how-to-guides/vs-code-docker#调试容器化应用程序的步骤","content":"安装并启动 Rancher Desktop。从 Kubernetes Settings 菜单中，将 Container Runtime 选为 dockerd (moby)：  安装并启动 Visual Studio Code 或 Visual Studio Code Insiders。本教程使用 Visual Studio Code：  在扩展市场中安装 Docker 扩展。  你可以使用此 Github 仓库 (https://github.com/bwateratmsft/samples) 中提供的示例。克隆此仓库并在 VS Code 会话中打开 expressapp 文件夹。 打开命令面板（Ctrl+Shift+P、F1 或 Cmd+Shift+P）并运行 “Add Docker Files to Workspace”。由于这是一个 Express 应用程序，因此选择 Node.js 作为应用程序平台，选择 3000（或任何其他可用端口）作为 port。由于这是一个简单的示例，请在 Include optional Docker Compose files 选择 No。此步骤添加了调试应用程序所需的 Dockerfile 和 Launch Configuration。  在代码中插入断点：  在顶部的 Debug 窗口中，将活动调试配置切换为 Docker Node.js Launch。按 F5 以 Debug 模式启动应用程序容器。示例应用程序的登录页面将在你的浏览器中打开，而且代码会在断点处停止执行。你可以在这里调试应用程序，就像应用程序运行在你的主机上一样。   有时候，由于调试进程可能尚未启动，因此应用程序可能不会在第一次运行时在设置的断点处中断。在这种情况下，你可以刷新浏览器来再次触发执行，从而命中断点。你还可以通过在 task.json 文件中设置 inspectMode: 'break' 属性来避免此行为，从而防止应用程序在连接调试器之前运行。 在某些主机上，防火墙设置可能会阻止调试进程在主机和容器进程之间建立连接。在这种情况下，你可以添加防火墙规则，以允许运行容器的 VM 与运行 VS Code 会话的主机进行通信。在 Windows 上，你可以通过在特权 powershell 中运行以下命令来添加防火墙规则： New-NetFirewallRule -Action Allow -Description 'Allow communication from WSL containers' -Direction Inbound -Enabled True -InterfaceAlias 'vEthernet (WSL)' -Name 'WSL Inbound' -DisplayName 'WSL Inbound'  "},{"title":"VS Code Remote Containers","type":0,"sectionRef":"#","url":"1.6/how-to-guides/vs-code-remote-containers","content":"","keywords":""},{"title":"使用示例开发容器的步骤​","type":1,"pageTitle":"VS Code Remote Containers","url":"1.6/how-to-guides/vs-code-remote-containers#使用示例开发容器的步骤","content":"安装并启动 Rancher Desktop。从 Kubernetes Settings 菜单中，将 Container Runtime 选为 dockerd (moby)：  安装并启动 Visual Studio Code 或 Visual Studio Code Insiders。本教程使用 Visual Studio Code：  安装 Remote Development 扩展包：  安装扩展后，你将在侧栏中看到扩展项，左下角有一个显示命令面板的绿色按钮，其中包含与 Remote Development 相关的各种选项/命令：  Microsoft 在此 GitHub 仓库 (https://github.com/microsoft/vscode-dev-containers.git) 中提供了许多示例开发容器。将此仓库克隆到你的本地主机： git clone https://github.com/microsoft/vscode-dev-containers.git  单击窗口左下角的 按钮，然后从命令面板中选择 Open Folder in Container...。浏览克隆仓库中的其中一个示例，例如 javascript-node：   选择示例后，你会在容器加载时看到进度通知 ，容器启动成功后，左下角会显示容器名称 。 容器启动后，在 VS Code IDE 中按 F5 启动示例应用程序。你将看到应用程序已启动并在 localhost:3000 上提供服务：  恭喜！你已经使用 Rancher Desktop 和 VS Code 成功加载并运行了一个示例开发容器。 "},{"title":"后续步骤​","type":1,"pageTitle":"VS Code Remote Containers","url":"1.6/how-to-guides/vs-code-remote-containers#后续步骤","content":"Microsoft 在此处提供了在各种场景中使用开发容器的大量文档。请参阅以下教程，尝试使用与你的需求类似的用例。 现在，体验使用 Rancher Desktop 进行容器化的快乐吧！ "},{"title":"架构","type":0,"sectionRef":"#","url":"1.6/references/architecture","content":"架构 Ranche Desktop 是一个基于 Electron 的应用程序，它包装了其他工具，同时还提供了简单的用户体验。在 macOS 和 Linux 上，Rancher Desktop 利用虚拟机运行 containerd 或 dockerd 和 Kubernetes。适用于 Linux v2 的 Windows Subsystem 可用于 Windows 系统。你只需要下载并运行该应用程序即可。","keywords":""},{"title":"故障排除提示","type":0,"sectionRef":"#","url":"1.6/troubleshooting-tips","content":"故障排除提示 此页面提供了 Rancher Desktop 相关问题的故障排除提示。 问：为什么我在 Rancher Desktop 的 WSL 集成页面下看不到我的 WSL 发行版？​ 答：你可能使用的是 WSL 1 发行版。Rancher Desktop 仅支持 WSL 2 发行版。你可以通过运行 wsl --set-version &lt;distro-name&gt; 2 命令将 WSL 1 发行版转换为 WSL 2 发行版。你还可以运行 wsl --set-default-version 2 命令来将你之后可能安装的所有发行版设置为使用 WSL 2。 问：运行 kubectl config get-contexts 时，我没有看到 Rancher Desktop 的条目，它在哪里？​ 答：Rancher Desktop 将配置放置在默认位置 ~/.kube/config。你的 KUBECONFIG 环境变量可能被设置为在其他位置查找配置文件。 问：Rancher Desktop 卡在 Waiting for Kubernetes API，我该怎么办？​ 答：没有额外信息我们很难确定原因。导航到 Troubleshooting 选项卡并访问日志。然后，转到 Rancher Desktop GitHub 页面并提交附加了你的日志的 Issue。 问：安装 Rancher Desktop 并卸载 Docker Desktop 后，我无法再运行 docker compose，为什么？​ 答：这是 Rancher Desktop 早期版本（1.1.0 之前）的问题。Rancher Desktop 1.1.0 及以上版本附带了 docker-compose，并在 ~/.docker/cli-plugins 提供了 CLI 插件。我们强烈建议你升级到最新版本的 Rancher Desktop。 如果你仍然无法使用 docker-compose，请在 Github上报告这个 Bug。 问：我使用 Homebrew 来安装 Rancher Desktop，但是 brew install rancher-desktop 提示失败，为什么？​ 答：Homebrew cask 的命名约定规定了 -desktop 后缀要从 cask formula 名称中删除。因此，请改用 brew install rancher。 问：尝试在 WSL 上使用 Docker 时，如何修复 permission denied 错误？​ 答：你需要写权限才能访问 docker socket。解决这个问题的方法有很多，以下是常见的方法之一。使用 Ubuntu WSL 命令行： sudo groupadd docker sudo adduser $USER docker sudo chown root:docker /var/run/docker.sock sudo chmod g+w /var/run/docker.sock newgrp docker 问：如何解决 Linux 上的 kubectl: command not found 问题？​ A: 默认情况下，Rancher Desktop 会在 Linux 的 /home/&lt;user&gt;/.local/bin 下创建 kubectl、docker、helm 和 nerdctl 二进制文件的符号链接。要直接从控制台调用这些命令，你可以在控制台中执行以下命令，并执行注销和登录来将目录添加到你的 PATH 环境变量中： echo &quot;export PATH=\\$PATH:/home/$(whoami)/.local/bin&quot; &gt;&gt; ~/.bashrc 问：使用 nerdctl run 运行容器时，如何修复 FATA[0005] subnet 10.4.0.0/24 overlaps with other one on this address space 问题？​ 答：如果路由规则的 IP 地址来自 Iptables 上的冲突子网，你将看到此错误。冲突的路由可能来自主机网络（桥接模式）或 Kubernetes 网络。此问题的快速解决方法是通过命令 wsl --shutdown 关闭 WSL。 警告：关闭 WSL 将停止所有其他发行版以及 rancher-desktop 发行版。","keywords":""},{"title":"使用容器","type":0,"sectionRef":"#","url":"1.6/tutorials/working-with-containers","content":"","keywords":""},{"title":"运行容器​","type":1,"pageTitle":"使用容器","url":"1.6/tutorials/working-with-containers#运行容器","content":"要使用默认的 bridge CNI 网络 (10.4.0.0/24) 运行容器： nerdctldocker nerdctl run -it --rm alpine  要使用 BuildKit 构建镜像： nerdctldocker nerdctl build -t foo /some-dockerfile-directory nerdctl run -it --rm foo  要使用 BuiltKit 进行构建并将输出发送到本地目录： nerdctldocker nerdctl build -o type=local,dest=. /some-dockerfile-directory  "},{"title":"Docker Compose​","type":1,"pageTitle":"使用容器","url":"1.6/tutorials/working-with-containers#docker-compose","content":"Docker Compose 是一个用于定义和运行多容器 Docker 应用程序的工具。 nerdctldocker nerdctl-compose CLI 用于与 docker-compose 兼容： nerdctl compose up -d nerdctl compose down  "},{"title":"暴露端口​","type":1,"pageTitle":"使用容器","url":"1.6/tutorials/working-with-containers#暴露端口","content":"要为容器公开端口 8000： nerdctldocker nerdctl run -d -p 8000:80 nginx  然后，你可以在浏览器中访问 http://localhost:8000/ 来访问容器： 注意：默认情况下，暴露的端口可以在 macOS 和 Linux 上的所有网络接口上访问。然而，在 Windows 上，暴露的端口只能通过 localhost 网络接口访问（参见 issue #1180）。目前的一个解决方法是在 Windows 主机上配置 portproxy，从而将端口公开给其他网络接口。 netsh interface portproxy add v4tov4 listenport=8080 listenaddress=0.0.0.0 connectport=8080 connectaddress=localhost  "},{"title":"定位 Kubernetes 命名空间​","type":1,"pageTitle":"使用容器","url":"1.6/tutorials/working-with-containers#定位-kubernetes-命名空间","content":"你还可以通过 containerd 使用 --namespace 参数来定位 Kubernetes 命名空间。请注意 docker 不使用命名空间。 nerdctl nerdctl --namespace k8s.io build -t demo:latest /code/demos/rd/anvil-app nerdctl --namespace k8s.io ps  "},{"title":"rdctl 命令参考","type":0,"sectionRef":"#","url":"1.6/references/rdctl-command-reference","content":"","keywords":""},{"title":"rdctl 或 rdctl help​","type":1,"pageTitle":"rdctl 命令参考","url":"1.6/references/rdctl-command-reference#rdctl-或-rdctl-help","content":"运行 rdctl 或 rdctl help 查看可用命令的列表： &gt; rdctl help The eventual goal of this CLI is to enable any UI-based operation to be done from the command-line as well. Usage: rdctl [command] Available Commands: api Runs API endpoints directly api /vX Enables you to see the endpoints for a particular version; e.g., v0 completion Generates the autocompletion script for the specified shell help Help about any command list-settings Lists the current settings set Updates selected fields in the Rancher Desktop UI and restart the backend shell Run an interactive shell or a command in a Rancher Desktop-managed VM shutdown Shuts down the running Rancher Desktop application start Start up Rancher Desktop or update its settings version Shows the CLI version Flags: --config-path string config file (default C:\\Users\\GunasekharMatamalam\\AppData\\Roaming\\rancher-desktop\\rd-engine.json) -h, --help help for rdctl --host string default is localhost; most useful for WSL --password string overrides the password setting in the config file --port string overrides the port setting in the config file --user string overrides the user setting in the config file Use &quot;rdctl [command] --help&quot; for more information about a command.  "},{"title":"rdctl api​","type":1,"pageTitle":"rdctl 命令参考","url":"1.6/references/rdctl-command-reference#rdctl-api","content":"运行 rdctl api 全局列出所有端点： $ ../../../resources/darwin/bin/rdctl api / | jq -r . [ &quot;GET /&quot;, &quot;GET /v0&quot;, &quot;GET /v0/settings&quot;, &quot;PUT /v0/settings&quot;, &quot;PUT /v0/shutdown&quot; ]  "},{"title":"rdctl api /vX​","type":1,"pageTitle":"rdctl 命令参考","url":"1.6/references/rdctl-command-reference#rdctl-api-vx","content":"运行 rdctl api /v0 列出指定版本的所有端点： $ rdctl api /v0 | jq -r . [ &quot;GET /v0&quot;, &quot;GET /v0/settings&quot;, &quot;PUT /v0/settings&quot;, &quot;PUT /v0/shutdown&quot; ]  "},{"title":"rdctl api /v0/settings​","type":1,"pageTitle":"rdctl 命令参考","url":"1.6/references/rdctl-command-reference#rdctl-api-v0settings","content":"rdctl api [endpoints] 是对直接使用 API 的用户最有用的命令，因此它们不适合像 rdctl set 一样日常使用。例如： 以下命令 rdctl api /v0/settings --method PUT --body '{&quot;kubernetes&quot;: {&quot;enabled&quot;: false}}'  与以下命令是一样的： rdctl set --kubernetes-enabled=false  只是它没那么简洁和用户友好。 "},{"title":"rdctl list-settings​","type":1,"pageTitle":"rdctl 命令参考","url":"1.6/references/rdctl-command-reference#rdctl-list-settings","content":"CLIAPI 运行 rdctl list-settings 以查看当前的活动配置： &gt; rdctl list-settings { &quot;version&quot;: 4, &quot;kubernetes&quot;: { &quot;version&quot;: &quot;1.22.7&quot;, &quot;memoryInGB&quot;: 2, &quot;numberCPUs&quot;: 2, &quot;port&quot;: 6443, &quot;containerEngine&quot;: &quot;moby&quot;, &quot;checkForExistingKimBuilder&quot;: false, &quot;enabled&quot;: true, &quot;WSLIntegrations&quot;: {}, &quot;options&quot;: { &quot;traefik&quot;: true } }, &quot;portForwarding&quot;: { &quot;includeKubernetesServices&quot;: false }, &quot;images&quot;: { &quot;showAll&quot;: true, &quot;namespace&quot;: &quot;k8s.io&quot; }, &quot;telemetry&quot;: true, &quot;updater&quot;: true, &quot;debug&quot;: false }  "},{"title":"rdctl set​","type":1,"pageTitle":"rdctl 命令参考","url":"1.6/references/rdctl-command-reference#rdctl-set","content":"CLIAPI 运行 rdctl set [flags] 来设置属性。在大多数情况下，Kubernetes 会在运行 set 命令时重置。你可以通过在单个命令中使用链接来设置多个属性。下面是一些参考示例： &gt; rdctl set --kubernetes-enabled=false &gt; rdctl set --container-engine docker --kubernetes-version 1.21.2  "},{"title":"rdctl shutdown​","type":1,"pageTitle":"rdctl 命令参考","url":"1.6/references/rdctl-command-reference#rdctl-shutdown","content":"CLIAPI 运行 rdctl shutdown 来正常关闭 Rancher Desktop： &gt; rdctl shutdown Shutting down.  "},{"title":"rdctl start​","type":1,"pageTitle":"rdctl 命令参考","url":"1.6/references/rdctl-command-reference#rdctl-start","content":"CLIAPI 运行 rdctl start 来确保 Rancher Desktop 按照要求运行和配置： &gt; rdctl start --container-runtime dockerd -- kubernetes-version 1.19.3  "},{"title":"rdctl version​","type":1,"pageTitle":"rdctl 命令参考","url":"1.6/references/rdctl-command-reference#rdctl-version","content":"运行 rdctl version 来查看当前 rdctl CLI 的版本： &gt; rdctl version rdctl client version: 1.0.0, targeting server version: v0  "},{"title":"概述","type":0,"sectionRef":"#","url":"1.7/","content":"","keywords":""},{"title":"容器管理​","type":1,"pageTitle":"概述","url":"1.7/#容器管理","content":"Rancher Desktop 提供了构建、推送和拉取容器镜像以及运行容器的功能，这些功能可以通过 Docker CLI（当你选择 Moby/dockerd 作为引擎时）或 nerdctl（当你选择 containerd 作为引擎时）实现，而 nerdctl 是 containerd 项目提供的 &quot;兼容 containerd 的 Docker CLI&quot;。 "},{"title":"Kubernetes​","type":1,"pageTitle":"概述","url":"1.7/#kubernetes","content":"Kubernetes 内置在 Rancher Desktop 中，由 K3s 提供。K3s 是一个经过认证的轻量级发行版。通过 Rancher Desktop，你能够 选择你的 Kubernetes 版本，并且一键重置 Kubernetes 或 Kubernetes 以及整个容器运行时。 "},{"title":"Rancher 与 Rancher Desktop​","type":1,"pageTitle":"概述","url":"1.7/#rancher-与-rancher-desktop","content":"虽然 Rancher 和 Rancher Desktop 的名字里都包含 Rancher，但它们的功能是有差别的。Rancher Desktop 不是桌面版 Rancher。Rancher 是管理 Kubernetes 集群的强大解决方案，Rancher Desktop 提供本地 Kubernetes 和容器管理平台，这两种解决方案相辅相成。 如果要在本地系统上运行 Rancher，你可以将 Rancher 安装到 Rancher Desktop 中。 "},{"title":"v1.6.0","type":0,"sectionRef":"#","url":"1.7/bundled-utilities-version-info/v1.6.0","content":"v1.6.0 amazon-ecr-credential-helper: 0.6.0 docker: 20.10.17 docker-buildx: 0.9.1 docker-compose: 2.11.1 docker-credential-helpers: 0.6.4 helm: 3.9.4 kuberlr: 0.4.2 nerdctl: 0.23.0 trivy: 0.32.0 ","keywords":""},{"title":"v1.7.0","type":0,"sectionRef":"#","url":"1.7/bundled-utilities-version-info/v1.7.0","content":"v1.7.0 amazon-ecr-credential-helper: 0.6.0 docker: 20.10.21 docker-buildx: 0.9.1 docker-compose: 2.14.0 docker-credential-helpers: 0.6.4 helm: 3.10.2 kuberlr: 0.4.2 nerdctl: 1.0.0 trivy: 0.35.0 ","keywords":""},{"title":"使用镜像","type":0,"sectionRef":"#","url":"1.6/tutorials/working-with-images","content":"","keywords":""},{"title":"常规用法​","type":1,"pageTitle":"使用镜像","url":"1.6/tutorials/working-with-images#常规用法","content":"使用任何一种工具都需要 Rancher Desktop 与适当的容器运行时一起运行。对于 nerdctl，使用 containerd 运行时。对于 docker，使用 Moby 运行时。 要了解所有命令选项并显示帮助文档，运行： nerdctldocker nerdctl -h 与 Docker 不同，containerd 具有自己的命名空间。默认情况下，nerdctl 镜像存储在 default 命名空间中。如果你希望你的镜像可供 Kubernetes 使用，请使用 --namespace k8s.io 或 -n k8s.io CLI 参数。你还可以使用 --namespace &lt;NAMESPACE_NAME&gt; 选项来切换到 default 或其他命名空间。请注意，nerdctl 命名空间独立于 Kubernetes 和 kubectl 命名空间。 "},{"title":"列出镜像​","type":1,"pageTitle":"使用镜像","url":"1.6/tutorials/working-with-images#列出镜像","content":"要查看当前可用的镜像，请运行以下命令： nerdctldocker nerdctl images  "},{"title":"构建镜像​","type":1,"pageTitle":"使用镜像","url":"1.6/tutorials/working-with-images#构建镜像","content":"nerdctldocker 构建镜像与现有工具的操作相似。你可以在具有 Dockerfile（Dockerfile 使用了一个 scratch 镜像）的路径上运行 nerdctl： nerdctl build . [+] Building 0.1s (4/4) FINISHED =&gt; [internal] load build definition from Dockerfile =&gt; =&gt; transferring dockerfile: 31B =&gt; [internal] load .dockerignore =&gt; =&gt; transferring context: 2B =&gt; [internal] load build context =&gt; =&gt; transferring context: 33B =&gt; CACHED [1/1] ADD anvil-app / nerdctl 具有在构建时进行标记的选项以及一些其他选项： nerdctl build -t TAG . 要构建用于 Kubernetes 的镜像，请指定 k8s.io 命名空间，如下所示： nerdctl build -n k8s.io .  "},{"title":"构建本地镜像​","type":1,"pageTitle":"使用镜像","url":"1.6/tutorials/working-with-images#构建本地镜像","content":"为了演示构建本地镜像和运行应用程序的步骤，Rancher Desktop 的 docs 仓库提供了一个示例 nodejs 应用程序。首先，克隆仓库并 cd 到终端中的 assets/express-sample 中。 运行以下命令来使用 Dockerfile 构建镜像： nerdctldocker nerdctl --namespace k8s.io build -t expressapp:v1.0 .  运行以下命令来运行容器： kubectl run --image expressapp:v1.0 expressapp kubectl port-forward pods/expressapp 3000:3000  注意：添加 latest 标签时，请务必同时指定以下内容： imagePullPolicy: Never  "},{"title":"标记镜像​","type":1,"pageTitle":"使用镜像","url":"1.6/tutorials/working-with-images#标记镜像","content":"如果要标记已构建的现有镜像，你可以运行以下命令： nerdctldocker nerdctl tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]  "},{"title":"删除镜像​","type":1,"pageTitle":"使用镜像","url":"1.6/tutorials/working-with-images#删除镜像","content":"要删除镜像，请运行以下命令： nerdctldocker nerdctl rmi IMAGE  "},{"title":"常见问题","type":0,"sectionRef":"#","url":"1.7/faq","content":"常见问题 本文包含了用户常见的 Rancher Desktop 问题和解答。 问：Rancher Desktop 是 Rancher 的桌面版吗？​ 答：不是。Rancher Desktop 不是桌面版 Rancher。 虽然 Rancher 和 Rancher Desktop 的名字里都包含 Rancher，但它们的功能是有差别的。这两种解决方案相辅相成。 Rancher 是一个完整的软件堆栈，用于跨任何基础设施管理多个 Kubernetes 集群。 Rancher Desktop 在桌面上提供容器管理和 Kubernetes 实例，用于支持本地开发用例。 问：Rancher Desktop 中有 Kubernetes Cluster Explorer 吗？​ 答：是的，Rancher Dashboard 作为功能预览包含在 1.2.1 版本中。你可以通过单击系统托盘菜单中的 Dashboard 选项来调用仪表板。 要了解有关 Rancher Desktop 的更多信息，请单击此处。 要了解有关 Rancher 的更多信息，请单击此处。 问：我可以同时安装 Docker Desktop 与 Rancher Desktop 吗？​ 答：可以，但它们不能同时运行，因为 Rancher Desktop 和 Docker Desktop 使用相同的 Docker socket（/var/run/docker.sock）。在启动一个之前，一定要先停止另一个。 问：如何彻底卸载 Rancher Desktop？​ 答：首先，执行恢复出厂设置，然后卸载该应用程序。卸载过程因操作系统而异。如需更多信息，请参阅此处。 问：Windows 上的 DNS VPN 有哪些支持（如果有）？​ 答：Windows 的替代 DNS 解析器已实现，用来解决 Windows 上的某些 VPN 问题。它支持通过 VPN 连接进行 DNS 查找。它必须通过编辑内部配置文件手动启用。 问：“WSL 集成”选项卡有什么作用？​ 答：它能使 Kubernetes 配置可以在显示的 WSL 发行版中访问，以便你使用 kubectl 之类的命令与 Kubernetes 进行通信。 问：我在哪里可以找到详细的日志？​ 答：点击 Troubleshooting 标签，然后点击 Show Logs。 问：如何为 Traefik Ingress Controller 启用仪表板？​ 答：出于安全原因，Traefik 仪表板默认不公开。但是，你可以通过多种方式公开仪表板。你可以使用下面显示的两种方法之一。 使用 port-forward 来启用仪表板访问​ kubectl port-forward -n kube-system $(kubectl -n kube-system get pods --selector &quot;app.kubernetes.io/name=traefik&quot; --output=name) 9000:9000 在浏览器中访问 http://127.0.0.1:9000/dashboard/ 以查看 Traefik 仪表板。 使用 HelmChartConfig 来启用仪表板访问​ 将以下说明复制到文件中，例如 expose-traefik.yaml： apiVersion: helm.cattle.io/v1 kind: HelmChartConfig metadata: name: traefik namespace: kube-system spec: valuesContent: |- dashboard: enabled: true ports: traefik: expose: true # Avoid this in production deployments logs: access: enabled: true 运行命令： kubectl apply -f expose-traefik.yaml 在浏览器中访问 http://127.0.0.1:9000/dashboard/ 以查看 Traefik 仪表板。 问：如何禁用 Traefik，这样会删除 Traefik 资源吗？​ 答：是的，你可以禁用 Traefik 以释放端口 80 和 443 用于备用 ingress 配置。禁用 Traefik 不会 删除现有资源。Kubernetes Settings 下会默认选择 Enable Traefik 功能，取消选中此框即可禁用它。 如果要删除 Traefik 资源，请在 UI 的 Kubernetes Settings 面板上单击 Reset Kubernetes。 问：是否支持内部容器端口转发？​ 答：是的，从 v1.1.0 起，所有三个平台（Windows、Linux 和 macOS）都支持此功能。 问：文件共享的工作原理与 Docker Desktop 类似吗？是否必须进行任何其他配置才能将卷挂载到 VM？​ 答：目前默认共享以下目录：macOS 上为 /Users/$USER，Linux 上为 /home/$USER，二者均共享 /tmp/rancher-desktop。对于 Windows，所有文件都通过 WSL2 自动共享。 通常无法开箱即用地从主机访问标准的 Docker 卷。 要访问 Linux/macOS 上的其他目录，你必须进行额外的配置。 如果要改变挂载的行为，你也需要进行额外的配置。 问：容器是否能通过 host.docker.internal 回到主机服务？​ 答：是的。在 Windows 上，你可能需要创建防火墙规则来允许主机和容器之间的通信。你可以在特权 powershell 中运行以下命令来创建防火墙规则： New-NetFirewallRule -DisplayName &quot;WSL&quot; -Direction Inbound -InterfaceAlias &quot;vEthernet (WSL)&quot; -Action Allow 问：我不需要 Rancher Desktop 部署的 Kubernetes 集群；如何禁用它以节省资源？​ 答：打开 Rancher Desktop 设置，点击齿轮打开 Preferences，选择 Kuberentes 选项卡，然后取消勾选 Kubernetes Settings 下的 Enable Kubernetes 功能以禁用它。 这将允许你在不为 Kubernetes 分配资源的情况下仅运行 containerd 或 dockerd。 问：Kubernetes Image Manager (kim) 发生了什么？​ 答：从 1.0 版本开始，Kim 不再被支持，而且已被 nerdctl 和 Docker CLI 取代。 问：为什么运行 brew install rancher 时出现 It seems there is already a Binary at '/usr/local/bin/&lt;BINARY&gt;' 的错误？​ 答：如果支持 Rancher Desktop 的工具（Helm、kubectl、nerdctl、docker）已经由 Homebrew 管理，那么由于 Homebrew cask 公式的定义方式，安装会失败。你可以使用 Mac 应用程序进行安装来避免这个问题。 问：我通过 Arch User Repository 安装了 nerdctl，但它不能与 Rancher Desktop 一起使用，为什么？​ 答：对于 Rancher Desktop，nerdctl 必须在 VM 内部而不是在主机上运行。与 Rancher Desktop 一起打包的主机版本只是一个 shell wrapper，用于在 VM 内执行命令。 问：Support Utilities 页面（Rancher Desktop &lt;1.3.0）上的工具未安装，我看到 Insufficient permission to modify /usr/local/bin 错误，我该如何解决？​ 答：当你没有 /usr/local/bin 的权限时就会发生这种情况。改善权限处理的长期解决方案正在开发中。同时，一个临时的解决方法是通过运行 sudo chown $USER /usr/local/bin 来更改 /usr/local/bin 的权限。当你能够写入目录时，Rancher Desktop 就能够创建符号链接。 从 1.3.0 及更高版本开始，我们不再在 /usr/local/bin 中创建符号链接，而是在 ~/.rd/bin 中创建符号链接，并将该目录放在 PATH 中，这样可以避免处理 /usr/local/bin 的写权限和文件冲突。我们强烈建议你升级到最新版本的 Rancher Desktop。 问：Cygwin 与 Rancher Desktop 兼容吗？​ 答：没有，但我们有增加兼容性的计划。 问：如何将 Rancher Desktop 添加到 Windows 的启动程序列表中？​ 答：在 Windows 上，你可以通过不同的方式将程序添加到启动程序列表中。例如，你可以执行以下步骤： 按 Windows+R 打开运行对话框。输入 shell:startup，然后按 Enter 打开 Startup 文件夹。从桌面复制“Rancher Desktop”快捷方式并粘贴到 Startup 文件夹中。重新启动主机。 问：Rancher Desktop 实际将数据卷放在哪里？​ 答： Windows： 打开运行菜单（按 Windows + R）并打开下面的路径（具体取决于活动的容器运行时）： dockerd(moby): \\\\wsl$\\rancher-desktop-data\\var\\lib\\docker\\volumes containerd: \\\\wsl$\\rancher-desktop-data\\var\\lib\\nerdctl\\dbb19c5e\\volumes\\&lt;namespace&gt; macOS 和 Linux： 根据活动的容器运行时，在 (lima) VM 中导航到下面的路径。你可以使用 rdctl shell 访问 VM 中的这些路径。 dockerd(moby): /var/lib/docker/volumes containerd: /var/lib/nerdctl/dbb19c5e/volumes/&lt;namespace&gt; 问：如何将 Rancher Desktop 降级到旧版本​ 答：我们强烈建议你使用包含最新功能和错误修复的当前发行版。但是，如果你想降级到较早的版本，请按照以下步骤操作。 执行 Troubleshooting &gt; Factory Reset。请确保没有在 Factory Reset 对话框中选中 Keep cached Kubernetes images。按照适用于你操作系统的卸载说明卸载当前版本。安装你所需的旧版本。","keywords":""},{"title":"安装","type":0,"sectionRef":"#","url":"1.7/getting-started/installation","content":"","keywords":""},{"title":"macOS​","type":1,"pageTitle":"安装","url":"1.7/getting-started/installation#macos","content":""},{"title":"要求​","type":1,"pageTitle":"安装","url":"1.7/getting-started/installation#要求","content":"Rancher Desktop 在 macOS 上运行需要以下条件： macOS Catalina 10.15 或更高版本。带有 VT-x 的 Apple 芯片 (M1) 或 Intel CPU。连接到互联网。 还建议具备以下条件： 8 GB 内存4 个 CPU 你要运行的工作负载可能还需要一些额外的资源。 "},{"title":"在 macOS 上安装 Rancher Desktop​","type":1,"pageTitle":"安装","url":"1.7/getting-started/installation#在-macos-上安装-rancher-desktop","content":"转到 GitHub 上的 Releases 页面。找到要下载的 Rancher Desktop 版本。展开 Assets 部分并下载 Rancher.Desktop-X.Y.Z.dmg，其中 X.Y.Z 是 Rancher Desktop 的版本。导航到下载安装程序的目录，并运行安装程序。这个目录通常是下载文件夹。双击 DMG 文件。在打开的访达窗口中，将 Rancher Desktop 图标拖到应用程序文件夹中。导航到应用程序文件夹，然后双击 Rancher Desktop 来启动它。 安装 Rancher Desktop 后，用户可以访问以下支持的工具： Helmkubectlnerdctldocker (moby) "},{"title":"在 macOS 上卸载 Rancher Desktop​","type":1,"pageTitle":"安装","url":"1.7/getting-started/installation#在-macos-上卸载-rancher-desktop","content":"打开访达 &gt; 应用程序。找到 Rancher Desktop。选中它，然后选择文件 &gt; 移到废纸篓。要删除应用程序，选择访达 &gt; 清倒废纸篓。 "},{"title":"Windows​","type":1,"pageTitle":"安装","url":"1.7/getting-started/installation#windows","content":""},{"title":"要求​","type":1,"pageTitle":"安装","url":"1.7/getting-started/installation#要求-1","content":"Rancher Desktop 在 Windows 上运行需要以下条件： Windows 10 build 1909 或更高版本。支持家庭版。在具有虚拟化功能的主机上运行。连接到互联网。 Rancher Desktop 在 Windows 上需要 Windows Subsystem for Linux，它将作为 Rancher Desktop 设置的一部分自动安装。你不需要手动下载发行版。 还建议具备以下条件： 8 GB 内存4 个 CPU 你要运行的工作负载可能还需要一些额外的资源。 注意：你可以在 Windows 主机上以非管理员用户身份使用 Rancher Desktop。但是，以下组件的安装过程需要管理员的干预： WSL2：你需要管理员权限才能安装 WSL2，它是 Rancher Desktop 的重要组件。Rancher Desktop Privileged Service：你需要管理员权限才能安装 Rancher Desktop Privileged Service，这是在主机的所有接口上公开运行在容器内的应用程序/服务所必需的。你也可以跳过 Rancher Desktop Privileged Service 的安装，这样的话，你将无法在 127.0.0.1 之外的任何接口上公开应用程序/服务。 "},{"title":"在 Windows 上安装 Rancher Desktop​","type":1,"pageTitle":"安装","url":"1.7/getting-started/installation#在-windows-上安装-rancher-desktop","content":"转到 GitHub 上的 Releases 页面。找到要下载的 Rancher Desktop 版本。展开 Assets 部分并下载 Windows 安装程序。它的名称是 Rancher.Desktop.Setup.X.Y.Z.msi，其中 X.Y.Z 是 Rancher Desktop 的版本。导航到下载安装程序的目录，并运行安装程序。这个目录通常是下载文件夹。查看许可协议并单击 I Agree 来继续安装。如果出现提示，请选择为计算机的所有用户安装，或仅为当前用户安装。建议为所有用户安装，以便安装 Rancher Desktop Privileged Service，如上所述。按照提示确认安装。安装完成后，单击 Finish 来关闭安装向导。 "},{"title":"在 Windows 上卸载 Rancher Desktop​","type":1,"pageTitle":"安装","url":"1.7/getting-started/installation#在-windows-上卸载-rancher-desktop","content":"在任务栏中，单击开始菜单。转到设置 &gt; 应用程序 &gt; 应用程序和功能。找到并选择 Rancher Desktop。点击卸载，出现确认信息时再次点击。按照 Rancher Desktop 卸载程序上的提示继续。完成后点击完成。 "},{"title":"Linux​","type":1,"pageTitle":"安装","url":"1.7/getting-started/installation#linux","content":""},{"title":"要求​","type":1,"pageTitle":"安装","url":"1.7/getting-started/installation#要求-2","content":"Rancher Desktop 在 Linux 上运行需要以下条件： 一个可以安装 .deb 或 .rpm 包或 AppImages 的发行版。连接到互联网。带有 AMD-V 或 VT-x 的 x86_64 处理器。/dev/kvm 上的读写权限。详情见下文。 还建议具备以下条件： 8 GB 内存4 个 CPU 你要运行的工作负载可能还需要一些额外的资源。 "},{"title":"确保你可以访问 /dev/kvm​","type":1,"pageTitle":"安装","url":"1.7/getting-started/installation#确保你可以访问-devkvm","content":"Rancher Desktop 需要 /dev/kvm 的权限，而在某些发行版（例如 Ubuntu 18.04）上，用户没有足够的权限。 要检查你是否具有所需的权限，请执行以下操作： [ -r /dev/kvm ] &amp;&amp; [ -w /dev/kvm ] || echo 'insufficient privileges'  如果输出是 insufficientprivilege，你需要将你的用户添加到 kvm 组。你可以执行以下操作： sudo usermod -a -G kvm &quot;$USER&quot;  然后重新启动使更改生效。 "},{"title":"pass 设置​","type":1,"pageTitle":"安装","url":"1.7/getting-started/installation#pass-设置","content":"默认情况下，Rancher Desktop 使用 pass 来安全地存储通过 docker login 和 nerdctl login 传递的凭证。在第一次在主机上使用时，pass 需要你进行少量的设置。如果你不打算使用 docker login 或 nerdctl login，你不需要设置 pass。但请记住，如果你以后需要使用它们，你必须设置它们，否则会出现错误。 安装 Rancher Desktop 后，你应该创建一个 GPG 密钥。pass 会使用它来保护密文。要创建 GPG 密钥： gpg --generate-key  输出应该与 8D818FB37A9279E341F01506ED96AD27A40C9C73 类似。 这是你的密钥 ID。然后，你可以通过将此密钥 ID 传递给它来初始化 pass： pass init 8D818FB37A9279E341F01506ED96AD27A40C9C73  关于 pass 的更多信息，请参阅此处。 "},{"title":"Traefik 端口绑定访问​","type":1,"pageTitle":"安装","url":"1.7/getting-started/installation#traefik-端口绑定访问","content":"Rancher Desktop 使用 Traefik 作为默认 Ingress Controller。由于 Traefik Ingress 上的端口访问受限，用户在部署 Rancher Desktop 后可能会遇到 permission denied 错误。大多数 Linux 发行版（例如 Ubuntu 20.04）不允许非 root 用户监听 1024 以下的 TCP 和 UDP 端口。为了让 Traefik 监听本地主机上的特权端口，请运行以下命令： sudo sysctl -w net.ipv4.ip_unprivileged_port_start=80  命令运行后，80 及以上的所有端口都将变为非特权端口，Traefik 将能够成功访问这些端口。 "},{"title":"通过 .deb 包安装​","type":1,"pageTitle":"安装","url":"1.7/getting-started/installation#通过-deb-包安装","content":"添加 Rancher Desktop 仓库并使用以下命令安装 Rancher Desktop： curl -s https://download.opensuse.org/repositories/isv:/Rancher:/stable/deb/Release.key | gpg --dearmor | sudo dd status=none of=/usr/share/keyrings/isv-rancher-stable-archive-keyring.gpg echo 'deb [signed-by=/usr/share/keyrings/isv-rancher-stable-archive-keyring.gpg] https://download.opensuse.org/repositories/isv:/Rancher:/stable/deb/ ./' | sudo dd status=none of=/etc/apt/sources.list.d/isv-rancher-stable.list sudo apt update sudo apt install rancher-desktop  "},{"title":"卸载 .deb 包​","type":1,"pageTitle":"安装","url":"1.7/getting-started/installation#卸载-deb-包","content":"你可以使用以下命令删除包、仓库和密钥： sudo apt remove --autoremove rancher-desktop sudo rm /etc/apt/sources.list.d/isv-rancher-stable.list sudo rm /usr/share/keyrings/isv-rancher-stable-archive-keyring.gpg sudo apt update  "},{"title":"通过 .rpm 包安装​","type":1,"pageTitle":"安装","url":"1.7/getting-started/installation#通过-rpm-包安装","content":"注意：Rancher Desktop 在 Linux 上使用 QEMU，而 RHEL、Fedora 和相关发行版打包 QEMU 的方式与其他发行版不同。要在这些发行版上使用 Rancher Desktop，请使用 AppImage。 在 openSUSE 上添加仓库并安装： sudo zypper addrepo https://download.opensuse.org/repositories/isv:/Rancher:/stable/rpm/isv:Rancher:stable.repo sudo zypper install rancher-desktop  "},{"title":"卸载 .rpm 包​","type":1,"pageTitle":"安装","url":"1.7/getting-started/installation#卸载-rpm-包","content":"确保 Rancher Desktop 已退出（如果没有，它应该出现在 Dock 中），然后执行： sudo zypper remove --clean-deps rancher-desktop sudo zypper removerepo isv_Rancher_stable  "},{"title":"通过 AppImage 安装​","type":1,"pageTitle":"安装","url":"1.7/getting-started/installation#通过-appimage-安装","content":"首先，确保安装了 pass 和 gpg。例如，在 Fedora 上： dnf install pass gnupg2  你可以在此处下载 AppImage。要运行它，只需要添加可执行权限，然后执行即可。为了更好地与你的桌面集成，你可以使用 AppImageLauncher。 "},{"title":"卸载 AppImage​","type":1,"pageTitle":"安装","url":"1.7/getting-started/installation#卸载-appimage","content":"只需删除 AppImage。 "},{"title":"使用 k3d 创建多节点集群","type":0,"sectionRef":"#","url":"1.7/how-to-guides/create-multi-node-cluster","content":"","keywords":""},{"title":"启动多节点集群的步骤​","type":1,"pageTitle":"使用 k3d 创建多节点集群","url":"1.7/how-to-guides/create-multi-node-cluster#启动多节点集群的步骤","content":"确保在 Kubernetes Settings 页面中选择了 dockerd(moby) 作为容器运行时。 安装 k3d。 wgetcurl wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash  运行 k3d cluster create 命令来启动多节点集群。例如： k3d cluster create two-node-cluster --agents 2 k3d cluster create three-node-cluster --agents 3  k3d 将新创建的集群设置为 active。你可以通过 kubectl config use-context 命令来切换集群。例如： kubectl config use-context k3d-two-node-cluster  要了解有关 k3s 和 k3d 的更多信息，请参阅这些项目的文档（k3s 文档 和 k3d 文档）。 ⚠️ 请注意，k3d 创建的集群不是通过 Rancher Desktop GUI 管理的。 "},{"title":"Hello World 示例","type":0,"sectionRef":"#","url":"1.7/how-to-guides/hello-world-example","content":"","keywords":""},{"title":"示例 1 - 构建镜像并运行容器​","type":1,"pageTitle":"Hello World 示例","url":"1.7/how-to-guides/hello-world-example#示例-1---构建镜像并运行容器","content":"创建文件夹​ mkdir hello-world cd hello-world  创建一个空白的 Dockerfile​ 在 Windows 上，创建一个名为 Dockerfile 的空白文件。 在 Linux 上，你可以使用以下命令创建一个空白的 Dockerfile: vi Dockerfile  使用以下命令填充 Dockerfile​ FROM alpine CMD [&quot;echo&quot;, &quot;Hello World!!&quot;]  构建并运行镜像以进行验证​ nerdctldocker nerdctl build --tag helloworld:v1.0 . nerdctl images | grep helloworld nerdctl run --rm helloworld:v1.0 # 移除镜像 nerdctl rmi helloworld:v1.0  "},{"title":"示例 2 - 构建镜像并将容器部署到 Kubernetes​","type":1,"pageTitle":"Hello World 示例","url":"1.7/how-to-guides/hello-world-example#示例-2---构建镜像并将容器部署到-kubernetes","content":"根据需要将 Kubernetes Settings 面板中的 Container Runtime 切换为 dockerd 或 containerd。 创建一个文件夹并添加一个示例 index.html 文件，如下所示​ mkdir nginx cd nginx echo &quot;&lt;h1&gt;Hello World from NGINX!!&lt;/h1&gt;&quot; &gt; index.html  创建一个空白的 Dockerfile​ 在 Windows 上，创建一个名为 Dockerfile 的空白文件。 在 Linux 上，你可以使用以下命令创建一个空白的 Dockerfile: vi Dockerfile  使用以下命令填充 Dockerfile​ FROM nginx:alpine COPY . /usr/share/nginx/html  使用本地代码构建镜像​ ⚠️ 注意：你需要将 --namespace k8s.io 标志传递给 nerdctl build 命令，以便 nerdctl 构建镜像并使其在 k8s.io 命名空间中可用。 nerdctldocker nerdctl --namespace k8s.io build --tag nginx-helloworld:latest . nerdctl --namespace k8s.io images | grep nginx-helloworld  部署到 Kubernetes​ 运行以下命令，从而使用在上一步中构建的镜像创建和运行 pod。 ⚠️ 注意：你需要传递 --image-pull-policy=Never 标志以使用带有 :latest 标签的本地镜像（:latest 标签将始终尝试从远程仓库中拉取镜像）。 kubectl run hello-world --image=nginx-helloworld:latest --image-pull-policy=Never --port=80 kubectl port-forward pods/hello-world 8080:80  在浏览器中访问 localhost:8080，你将看到 Hello World from NGINX!! 的信息。如果你想留在命令行上，请使用 curl localhost:8080。 删除 pod 和镜像​ nerdctldocker kubectl delete pod hello-world # 移除镜像 nerdctl --namespace k8s.io rmi nginx-helloworld:latest  "},{"title":"增加打开文件限制","type":0,"sectionRef":"#","url":"1.7/how-to-guides/increasing-open-file-limit","content":"","keywords":""},{"title":"macOS & Linux 步骤​","type":1,"pageTitle":"增加打开文件限制","url":"1.7/how-to-guides/increasing-open-file-limit#macos--linux-步骤","content":"首先，使用 lima override.yaml 编写配置脚本。 在以下路径创建 override.yaml 文件。 macOSLinux ~/Library/Application Support/rancher-desktop/lima/_config/override.yaml  然后，使用下面的脚本为 override.yaml 文件中的容器增加 ulimit。 provision: - mode: system script: | #!/bin/sh cat &lt;&lt;'EOF' &gt; /etc/security/limits.d/rancher-desktop.conf * soft nofile 82920 * hard nofile 82920 EOF  如果你使用 Elastic 平台，请使用下面的脚本设置 vm.max_map_count 参数。 provision: - mode: system script: | #!/bin/sh cat &lt;&lt;'EOF' &gt; /etc/security/limits.d/rancher-desktop.conf * soft nofile 82920 * hard nofile 82920 sysctl -w vm.max_map_count=262144 EOF  最后，停止并重启 Rancher Desktop 来让新的限制生效。 "},{"title":"Windows 步骤​","type":1,"pageTitle":"增加打开文件限制","url":"1.7/how-to-guides/increasing-open-file-limit#windows-步骤","content":"首先，确保 Rancher Desktop 至少运行过一次来初始化配置。 然后，使用以下代码在 %AppData%\\rancher-desktop\\provisioning 中创建一个配置脚本，比如 map_count.start，这样能通过增加 max_map_count 参数的值来更新打开文件的限制。 #!/bin/sh sysctl -w vm.max_map_count=262144  最后，停止并重启 Rancher Desktop 来让变更生效。 "},{"title":"配置脚本","type":0,"sectionRef":"#","url":"1.7/how-to-guides/provisioning-scripts","content":"","keywords":""},{"title":"macOS & Linux​","type":1,"pageTitle":"配置脚本","url":"1.7/how-to-guides/provisioning-scripts#macos--linux","content":"在 macOS 和 Linux 上，你可以使用 lima override.yaml 来编写配置脚本。 在以下路径创建 override.yaml 文件。 macOSLinux ~/Library/Application Support/rancher-desktop/lima/_config/override.yaml  在上一步中创建的 override.yaml 文件中编写配置脚本。例如，你可以使用以下脚本来增加容器的 ulimit： provision: - mode: system script: | #!/bin/sh cat &lt;&lt;'EOF' &gt; /etc/security/limits.d/rancher-desktop.conf * soft nofile 82920 * hard nofile 82920 EOF  你还可以使用 override.yaml 来覆盖/修改 lima 配置设置。下面的示例创建了额外的挂载： mounts: - location: /some/path writable: true  "},{"title":"Windows​","type":1,"pageTitle":"配置脚本","url":"1.7/how-to-guides/provisioning-scripts#windows","content":"注意：在 Windows 上，你只能为 1.1.0 或更高版本的 Rancher Desktop 使用这些配置脚本。 你需要至少运行 Rancher Desktop 一次以允许它创建配置。 打开 %AppData%\\\\rancher-desktop\\\\provisioning 目录。完整路径的示例：C:\\\\Users\\\\Joe\\\\AppData\\\\Roaming\\\\rancher-desktop\\\\provisioning。 请注意，任何文件扩展名为 .start 的文件（例如 k3s-overrides.start）都可以在 Rancher Desktop 启动 Kubernetes 后端（如果启用） 时执行。此类文件将在 Rancher Desktop WSL 上下文中运行。 .start 文件的示例流程： Rancher Desktop 内部设置运行配置脚本在 UI 中启用 dockerd 或 containerdKubernetes (K3s) 例如，使用 %AppData%\\\\rancher-desktop\\\\provisioning\\\\insecure-registry.start 将允许 nerdctl 默认使用不安全的镜像仓库： #!/bin/sh mkdir -p /etc/nerdctl cat &gt; /etc/nerdctl/nerdctl.toml &lt;&lt;EOF insecure_registry = true EOF  请注意，文件扩展名为 .stop 的文件（例如 wipe-data.stop）可以在 Rancher Desktop 关闭 Kubernetes 后端（如果启用）后 执行。此类文件将在相同的 Rancher Desktop WSL 上下文中运行。 .stop 文件的示例流程： 停止 k3s、dockerd 或 containerd运行取消配置的脚本 重要提示：脚本需要以 Unix 行结尾保存，未完成行尾转换，且具有 DOS 行结尾的文件可能会产生意想不到的结果。你可以使用配置脚本更改的内容是有限制的。例如，你不能使用配置脚本更改 WSL2 上的硬 ulimit。请谨慎使用配置脚本，如果你对配置脚本有任何具体问题，请随时在 Slack/Github 上与 Rancher Desktop 团队联系。 "},{"title":"Rancher Desktop 上的 Rancher","type":0,"sectionRef":"#","url":"1.7/how-to-guides/rancher-on-rancher-desktop","content":"Rancher Desktop 上的 Rancher 虽然 Rancher 和 Rancher Desktop 的名字里都包含 Rancher，但它们的功能是有差别的。Rancher Desktop 不是桌面版 Rancher。Rancher 是管理 Kubernetes 集群的强大解决方案，而 Rancher Desktop 运行本地 Kubernetes 和容器管理平台，这两种解决方案相辅相成。例如，你可以将 Rancher 作为工作负载安装在 Rancher Desktop 中。 本指南概述了使用 container runtime 或 helm（本地环境）在 Rancher Desktop 上安装 Rancher Dashboard 的步骤： 注意：如果实用程序（例如：helm）或你的工作负载版本与会话中的 Kubernetes 版本不兼容，你可能会遇到问题。作为一个潜在的修复，你可以通过 Preferences &gt; Kubernetes 对话框切换到兼容的 Kubernetes 版本。支持矩阵页面上列出了 Rancher 支持的 Kubernetes 平台。 nerdctldockerhelm nerdctl run --privileged -d --restart=always -p 8080:80 -p 8443:443 rancher/rancher 安装需要几分钟才能完成。安装后，你可以访问 Rancher UI，如下所示： 通过 container runtime 安装：https://localhost:8443/通过 helm 安装：https://rancher.rd.localhost/ nerdctldocker 要访问 Rancher UI，你需要获取引导密码： 1：获取 Rancher UI 容器 ID/名称： nerdctl ps 2：获取引导密码： nerdctl logs [rancherContainerID] 2&gt;&amp;1 | grep &quot;Bootstrap Password:&quot; 3：引导密码示例： [INFO] Bootstrap Password: 7fwjjw4ldcmnq8ghns22q7nhl5lrznwwt9p9vjljfjc6tqbcvhxmwq 按照向导说明并单击 Continue 以进入 Rancher UI 主页面。 在 Rancher UI 中，你可以管理 local 集群、节点等。如需更多信息，请参阅 Rancher 文档。","keywords":""},{"title":"离线运行","type":0,"sectionRef":"#","url":"1.7/how-to-guides/running-air-gapped","content":"","keywords":""},{"title":"Windows 用户须知​","type":1,"pageTitle":"离线运行","url":"1.7/how-to-guides/running-air-gapped#windows-用户须知","content":"本文档的环境变量使用 Powershell 语法。如果你使用的是 Command shell，看到 $env:FOO 环境变量的引用时，请将其替换为 %FOO%。 "},{"title":"网络敏感区域​","type":1,"pageTitle":"离线运行","url":"1.7/how-to-guides/running-air-gapped#网络敏感区域","content":"Rancher Desktop 假设有两个的区域的网络可用，并会在离线的情况下进行恢复： 将 Kubernetes k3s 镜像拉入 k3s 缓存目录 使用 kuberlr 作为对 kubectl 的版本感知包装器，因此客户端与 Kubernetes Server 的差异不会超过一个次要版本。 "},{"title":"现有 Deployment​","type":1,"pageTitle":"离线运行","url":"1.7/how-to-guides/running-air-gapped#现有-deployment","content":"如果 Rancher Desktop 安装在最初就具有网络访问权限的主机上，在关闭网络连接后，Rancher Desktop 仍能在该主机上运行。但是，下拉菜单中可用的 Kubernetes 版本会限制为已下载并存储在缓存中的版本。 由于 kuberlr 包装器（Windows 用户需要为每个可执行实用程序文件添加 .exe 后缀），因此使用 kubectl 客户端会存在一个问题。 在这种情况下，虽然我们的系统在初始化时已经连接到互联网，但是后续使用时会让主机脱机使用。 假设 rancher-desktop 缓存中有三个版本的 k3s： 1.24.3 1.21.14 1.19.16 假设在这个系统上我们只有在使用 1.24.3 和 1.21.14 时运行了 kubectl。换言之，~/.kuberlr/PLATFORM-ARCH/ 目录（Windows 上为$env:HOMEDRIVE%\\$env:HOMEPATH/.kuberlr/windows-amd64）只包含两个文件： kubectl1.24.3 kubectl1.21.14 如果我们将系统脱机，并通过 UI 切换到 Kubernetes 1.19.16，则系统会在运行 kubectl 的时候失败。 问题在于 kubectl 是 kuberlr 的别名，它会尝试下载 kubectl 1.19.16 并将它安装到 .kuberlr 目录中，但却无法进行访问。 因此在这种情况下，最好的方法是选择缓存中每个可用的 Kubernetes 版本，并运行 kubectl --context rancher-desktop cluster-info 来确保安装了适当版本的 kubectl 客户端，以便在断开连接时能连接系统。 你可以手动安装版本化的 kubectl，具体内容会在下一节中介绍。 "},{"title":"准备离线系统​","type":1,"pageTitle":"离线运行","url":"1.7/how-to-guides/running-air-gapped#准备离线系统","content":"此处假设你有某种移动媒体，你可以将其填充到联网系统上，然后移至离线系统中。 要让 Rancher Desktop 离线运行，你需要填充两个目录： Cache 目录​ 要填充源磁盘（我们在此将其称为 %SOURCEDISK%，实际上它也可能是某种可移动设备，例如 USB 驱动器），你需要以下文件： k3s-versions.json：该文件由 Rancher Desktop 创建。它从 https://update.k3s.io/v1-release/channels 读取原始 JSON 文件并将其转换为不同类型的 JSON 文件。目前没有实用程序来进行这种转换。获取此文件的最简单方法是在连接的系统上运行 Rancher Desktop 并保存 CACHE/k3s-versions.json 文件（请参阅下方不同系统的 CACHE 位置）。Kubernetes K3s 镜像的 Tar 包。它们列在 https://github.com/k3s-io​​/k3s/releases。如果你使用的是 k3s v1.26.1 及更高版本，你需要为 AMD/Intel 主机下载 k3s-airgap-images-amd64.tar，为 M1 主机下载 k3s-airgap-images-arm64.tar，或下载相应的 *.tar.zst 压缩包。最后，你需要下载所选版本的 k3s 可执行文件。例如，以下命令将让你离线的情况下使用 K3s v1.24.3 build 1： cd .../CACHE mkdir v1.24.3+k3s1 cd v1.24.3+k3s1 wget https://github.com/k3s-io/k3s/releases/download/v1.24.3%2Bk3s1/k3s-airgap-images-amd64.tar wget https://github.com/k3s-io/k3s/releases/download/v1.24.3%2Bk3s1/sha256sum-amd64.txt wget https://github.com/k3s-io/k3s/releases/download/v1.24.3%2Bk3s1/k3s  WindowsmacOSLinux 在 Linux 上，缓存目录是 $HOME/.cache/rancher-desktop，你可以运行以下命令进行填充： CACHEDIR=$HOME/.cache/rancher-desktop mkdir -p $CACHEDIR/k3s cp $SOURCEDISK/k3s-versions.json $CACHEDIR/ cp -r $SOURCEDISK/v&lt;MAJOR&gt;.&lt;MINOR&gt;.&lt;PATCH&gt;+k3s&lt;BUILD&gt; $CACHEDIR/k3s/  kuberlr 目录​ 这个目录的位置更直接，在所有平台上，该目录都位于 HOME/.kuberlr/PLATFORM-ARCH，其中： HOME 是主目录。通常情况下，在 Windows 上为 $env:HOMEDRIVE%\\$env:HOMEPATH，在 macOS 和 Linux 上为 ~ 或 $HOME。PLATFORM 是 windows、linux 或 darwin。ARCH 在 M1 主机上是 aarch64，在其它主机上是 amd64。 要进行填充，请确定你要使用的 Kubernetes 版本，并联网下载适当的可执行文件。它们将位于： WindowsmacOSLinux https://dl.k8s.io/VERSION/bin/PLATFORM/CPU/kubectl 其中： VERSION 的格式是 vMAJOR.MINOR.PATCH（如 v1.22.1）PLATFORM 是 darwin、linux 或 windowsCPU 在 M1 主机上是 arm64，在其他主机上是 amd64 例如，要获取使用 Kubernetes v1.22 且用于 Windows 的 kubectl，此 Windows 命令 shell（不是 PowerShell）命令会将其放在 SOURCEDISK 上： wget -O %SOURCEDISK/kubectl1.22.1.exe https://dl.k8s.io/v1.22.1/bin/windows/amd64/kubectl.exe  版本说明​ Kubectl 客户端保证使用主要版本相同的 Server，且它们最多只相差一个次要版本。例如，如果你的组织使用的 Kubernetes 版本是 v1.21.x、v1.22.x 和 v1.23.x，对于任何 x 补丁版本，你只需在 .kuberlr 目录中安装 kubectl1.22.x 即可。但是，如果你复制一个 Kubernetes v1.24.x 到 CACHE 目录，你需要确保 .kuberlr 目录中也有一个兼容的 kubectl（v1.23.x、v1.24.x 或 v1.25.x 中的其中一个即可）。 "},{"title":"设置 NGINX Ingress Controller","type":0,"sectionRef":"#","url":"1.7/how-to-guides/setup-NGINX-Ingress-Controller","content":"","keywords":""},{"title":"步骤​","type":1,"pageTitle":"设置 NGINX Ingress Controller","url":"1.7/how-to-guides/setup-NGINX-Ingress-Controller#步骤","content":"在 Kubernetes Settings 页面取消选中 Enable Traefik 来禁用 Traefik。你可能需要退出并重新启动 Rancher Desktop 才能使更改生效。 通过 helm 或 kubectl 部署 NGINX Ingress Controller： helmkubectl helm upgrade --install ingress-nginx ingress-nginx \\ --repo https://kubernetes.github.io/ingress-nginx \\ --namespace ingress-nginx --create-namespace  等待 ingress pod 运行： kubectl get pods --namespace=ingress-nginx  创建示例 deployment 和关联的 service： kubectl create deployment demo --image=nginx --port=80 kubectl expose deployment demo  创建 ingress 资源。以下命令使用了映射到 localhost 的主机： kubectl create ingress demo-localhost --class=nginx --rule=&quot;demo.localdev.me/*=demo:80&quot;  将本地端口转发到 Ingress Controller： kubectl port-forward --namespace=ingress-nginx service/ingress-nginx-controller 8080:80  现在，如果你访问 http://demo.localdev.me:8080/ ，你应该会看到 NGINX 的欢迎页面。 "},{"title":"Skaffold 与 Rancher Desktop","type":0,"sectionRef":"#","url":"1.7/how-to-guides/skaffold-and-rancher-desktop","content":"Skaffold 与 Rancher Desktop Skaffold 是一个命令行工具，用于 Kubernetes 原生应用程序的持续开发。Skaffold 处理构建、推送和部署应用程序的工作流，并提供用于创建 CI/CD 流水线的构建块。它能让你专注于在本地迭代你的应用程序，Skaffold 则能持续部署到你的本地或远程 Kubernetes 集群。要了解有关 Skaffold 的更多信息，请参阅 Skaffold 项目文档。 为了演示使用 Rancher Desktop 设置 Skaffold 的步骤，Rancher Desktop 文档在此处提供了一个 nodejs 应用程序示例。 重要提示：Skaffold 仅适用于 dockerd (Moby)。因此，请确保在 Rancher Desktop UI 的 Kubernetes Settings 面板中选择了 dockerd 作为运行时。 访问 https://skaffold.dev/docs/install/ 安装 Skaffold。 克隆 Rancher Desktop 文档仓库并在终端中导航到 express-sample，如下所示： cd docs.rancherdesktop.io/assets/express-sample 运行 skaffold init。 根据 Skaffold 文档 的介绍，skaffold init 会遍历你的项目目录并查找 build 配置文件（例如 Dockerfile、build.gradle /pom.xml、package.json、requirements.txt 或 go.mod）。 在我们的示例中，我们将选择 Dockerfile 和 package.json。这将生成你可以修改的初始配置文件。出现提示时，选择 yes 将你的配置写入 skaffold.yaml。 在你的编辑器中，查看你的 app.js 和 manifests.yaml 文件。请注意，在 manifests.yaml 中，你将拥有一个 deployment 配置和一个 service 配置。在测试场景下，仅需要 1 个 replica 即可。 回到你的终端，你会注意到你有两个选项，分别是 skaffold run（允许你构建和部署）和 skaffold dev （允许你进入开发模式自动重新部署）。在此示例中，我们将使用 skaffold dev。 由于你需要对镜像仓库具有推送访问权限，因此你可以使用 docker 登录，也可以设置本地镜像仓库： Docker Hub本地镜像仓库 在运行 skaffold dev 之前，如果你有 Docker Hub 账号，请使用你的 docker 登录。然后，在文件 skaffold.yaml 和 manifests.yaml 中，将 matamagu/express-sample 替换为 YOUR_DOCKER_HUB_USERNAME/express-sample，这是因为 skaffold dev 会将构建的镜像推送到 DockerHub。 在进行开发时，Skaffold 将检测所有更改，并会自动再次执行构建和部署的过程。你将能够看到集群中的任何更改。 在浏览器中访问 localhost:3000，你将看到 express-sample 界面。","keywords":""},{"title":"使用 VS Code Docker 扩展来调试容器应用程序","type":0,"sectionRef":"#","url":"1.7/how-to-guides/vs-code-docker","content":"","keywords":""},{"title":"调试容器化应用程序的步骤​","type":1,"pageTitle":"使用 VS Code Docker 扩展来调试容器应用程序","url":"1.7/how-to-guides/vs-code-docker#调试容器化应用程序的步骤","content":"安装并启动 Rancher Desktop。从 Kubernetes Settings 菜单中，将 Container Runtime 选为 dockerd (moby)：  安装并启动 Visual Studio Code 或 Visual Studio Code Insiders。本教程使用 Visual Studio Code：  在扩展市场中安装 Docker 扩展。  你可以使用此 Github 仓库 (https://github.com/bwateratmsft/samples) 中提供的示例。克隆此仓库并在 VS Code 会话中打开 expressapp 文件夹。 打开命令面板（Ctrl+Shift+P、F1 或 Cmd+Shift+P）并运行 “Add Docker Files to Workspace”。由于这是一个 Express 应用程序，因此选择 Node.js 作为应用程序平台，选择 3000（或任何其他可用端口）作为 port。由于这是一个简单的示例，请在 Include optional Docker Compose files 选择 No。此步骤添加了调试应用程序所需的 Dockerfile 和 Launch Configuration。  在代码中插入断点：  在顶部的 Debug 窗口中，将活动调试配置切换为 Docker Node.js Launch。按 F5 以 Debug 模式启动应用程序容器。示例应用程序的登录页面将在你的浏览器中打开，而且代码会在断点处停止执行。你可以在这里调试应用程序，就像应用程序运行在你的主机上一样。   有时候，由于调试进程可能尚未启动，因此应用程序可能不会在第一次运行时在设置的断点处中断。在这种情况下，你可以刷新浏览器来再次触发执行，从而命中断点。你还可以通过在 task.json 文件中设置 inspectMode: 'break' 属性来避免此行为，从而防止应用程序在连接调试器之前运行。 在某些主机上，防火墙设置可能会阻止调试进程在主机和容器进程之间建立连接。在这种情况下，你可以添加防火墙规则，以允许运行容器的 VM 与运行 VS Code 会话的主机进行通信。在 Windows 上，你可以通过在特权 powershell 中运行以下命令来添加防火墙规则： New-NetFirewallRule -Action Allow -Description 'Allow communication from WSL containers' -Direction Inbound -Enabled True -InterfaceAlias 'vEthernet (WSL)' -Name 'WSL Inbound' -DisplayName 'WSL Inbound'  "},{"title":"传输容器镜像","type":0,"sectionRef":"#","url":"1.7/how-to-guides/transfer-container-images","content":"","keywords":""},{"title":"步骤​","type":1,"pageTitle":"传输容器镜像","url":"1.7/how-to-guides/transfer-container-images#步骤","content":"1. 将源环境的镜像保存为 tar 包。 nerdctldocker 保存单个镜像 nerdctl save -o local-image.tar image:tag 保存多个镜像 nerdctl save -o local-images.tar image1:tag1 image2:tag2 将所有镜像保存在命名空间中 下面两个命令使用 jq 进行 JSON 解析。长命令会执行以下步骤： nerdctl -n k8s.io image ls 子命令会获取 k8s.io 命名空间中所有镜像的列表，因此不包括其他命名空间的镜像（例如 default）。jq 子命令会过滤并格式化上一步获取的镜像列表。 命令的 select(.Repository!=\\&quot;&lt;none&gt;\\&quot;) 部分会跳过仓库值为 &lt;none&gt; 的镜像。根据镜像标签的值是否为 &lt;none&gt;，命令的 if (.Tag==&quot;&lt;none&gt;&quot;) then .Repository else (.Repository+&quot;:&quot;+.Tag) end') 部分会将镜像的名称格式化为 &lt;Repository&gt; 或 &lt;Repository&gt;:&lt;Tag&gt;。 最后，命令的 nerdctl -n k8s.io save -o all-local-images-in-namespace.tar 部分会将前两步过滤和格式化的镜像列表保存到 tar 文件中。 BashPowerShell nerdctl -n k8s.io save -o all-local-images-in-namespace.tar $(nerdctl -n k8s.io image ls --format '{{json .}}' | jq -r 'select(.Repository!=&quot;&lt;none&gt;&quot;) | if (.Tag==&quot;&lt;none&gt;&quot;) then .Repository else (.Repository+&quot;:&quot;+.Tag) end')  2. 使用目标环境中保存的 tar 包加载镜像。 nerdctldocker nerdctl load &lt; local-images.tar  "},{"title":"VS Code Remote Containers","type":0,"sectionRef":"#","url":"1.7/how-to-guides/vs-code-remote-containers","content":"","keywords":""},{"title":"使用示例开发容器的步骤​","type":1,"pageTitle":"VS Code Remote Containers","url":"1.7/how-to-guides/vs-code-remote-containers#使用示例开发容器的步骤","content":"安装并启动 Rancher Desktop。从 Kubernetes Settings 菜单中，将 Container Runtime 选为 dockerd (moby)：  安装并启动 Visual Studio Code 或 Visual Studio Code Insiders。本教程使用 Visual Studio Code：  安装 Remote Development 扩展包：  安装扩展后，你将在侧栏中看到扩展项，左下角有一个显示命令面板的绿色按钮，其中包含与 Remote Development 相关的各种选项/命令：  Microsoft 在此 GitHub 仓库 (https://github.com/microsoft/vscode-dev-containers.git) 中提供了许多示例开发容器。将此仓库克隆到你的本地主机： git clone https://github.com/microsoft/vscode-dev-containers.git  单击窗口左下角的 按钮，然后从命令面板中选择 Open Folder in Container...。浏览克隆仓库中的其中一个示例，例如 javascript-node：   选择示例后，你会在容器加载时看到进度通知 ，容器启动成功后，左下角会显示容器名称 。 容器启动后，在 VS Code IDE 中按 F5 启动示例应用程序。你将看到应用程序已启动并在 localhost:3000 上提供服务：  恭喜！你已经使用 Rancher Desktop 和 VS Code 成功加载并运行了一个示例开发容器。 "},{"title":"后续步骤​","type":1,"pageTitle":"VS Code Remote Containers","url":"1.7/how-to-guides/vs-code-remote-containers#后续步骤","content":"Microsoft 在此处提供了在各种场景中使用开发容器的大量文档。请参阅以下教程，尝试使用与你的需求类似的用例。 现在，体验使用 Rancher Desktop 进行容器化的快乐吧！ "},{"title":"捆绑的实用程序","type":0,"sectionRef":"#","url":"1.7/references/bundled-utilities","content":"捆绑的实用程序 Rancher Desktop 使用多个实用程序/子系统作为依赖项。例如，docker CLI 会与 dockerd 交互，helm 会管理 Chart，而 trivy 用于容器镜像扫描。本文介绍了特定 Rancher Desktop 版本包括的捆绑实用程序版本信息。 Rancher Desktop 版本\t依赖版本v1.7.0 amazon-ecr-credential-helper: 0.6.0 docker: 20.10.21 docker-buildx: 0.9.1 docker-compose: 2.14.0 docker-credential-helpers: 0.6.4 helm: 3.10.2 kuberlr: 0.4.2 nerdctl: 1.0.0 trivy: 0.35.0 v1.6.2\t1.6.2 版本中没有更新的依赖项 v1.6.1\t1.6.1 版本中没有更新的依赖项 v1.6.0 amazon-ecr-credential-helper: 0.6.0 docker: 20.10.17 docker-buildx: 0.9.1 docker-compose: 2.11.1 docker-credential-helpers: 0.6.4 helm: 3.9.4 kuberlr: 0.4.2 nerdctl: 0.23.0 trivy: 0.32.0 ","keywords":""},{"title":"架构","type":0,"sectionRef":"#","url":"1.7/references/architecture","content":"架构 Ranche Desktop 是一个基于 Electron 的应用程序，它包装了其他工具，同时还提供了简单的用户体验。在 macOS 和 Linux 上，Rancher Desktop 利用虚拟机运行 containerd 或 dockerd 和 Kubernetes。适用于 Linux v2 的 Windows Subsystem 可用于 Windows 系统。你只需要下载并运行该应用程序即可。","keywords":""},{"title":"故障排除提示","type":0,"sectionRef":"#","url":"1.7/troubleshooting-tips","content":"故障排除提示 此页面提供了 Rancher Desktop 相关问题的故障排除提示。 问：为什么我在 Rancher Desktop 的 WSL 集成页面下看不到我的 WSL 发行版？​ 答：你可能使用的是 WSL 1 发行版。Rancher Desktop 仅支持 WSL 2 发行版。你可以通过运行 wsl --set-version &lt;distro-name&gt; 2 命令将 WSL 1 发行版转换为 WSL 2 发行版。你还可以运行 wsl --set-default-version 2 命令来将你之后可能安装的所有发行版设置为使用 WSL 2。 问：运行 kubectl config get-contexts 时，我没有看到 Rancher Desktop 的条目，它在哪里？​ 答：Rancher Desktop 将配置放置在默认位置 ~/.kube/config。你的 KUBECONFIG 环境变量可能被设置为在其他位置查找配置文件。 问：Rancher Desktop 卡在 Waiting for Kubernetes API，我该怎么办？​ 答：没有额外信息我们很难确定原因。导航到 Troubleshooting 选项卡并访问日志。然后，转到 Rancher Desktop GitHub 页面并提交附加了你的日志的 Issue。 问：安装 Rancher Desktop 并卸载 Docker Desktop 后，我无法再运行 docker compose，为什么？​ 答：这是 Rancher Desktop 早期版本（1.1.0 之前）的问题。Rancher Desktop 1.1.0 及以上版本附带了 docker-compose，并在 ~/.docker/cli-plugins 提供了 CLI 插件。我们强烈建议你升级到最新版本的 Rancher Desktop。 如果你仍然无法使用 docker-compose，请在 Github上报告这个 Bug。 问：我使用 Homebrew 来安装 Rancher Desktop，但是 brew install rancher-desktop 提示失败，为什么？​ 答：Homebrew cask 的命名约定规定了 -desktop 后缀要从 cask formula 名称中删除。因此，请改用 brew install rancher。 问：尝试在 WSL 上使用 Docker 时，如何修复 permission denied 错误？​ 答：你需要写权限才能访问 docker socket。解决这个问题的方法有很多，以下是常见的方法之一。使用 Ubuntu WSL 命令行： sudo groupadd docker sudo adduser $USER docker sudo chown root:docker /var/run/docker.sock sudo chmod g+w /var/run/docker.sock newgrp docker 问：如何解决 Linux 上的 kubectl: command not found 问题？​ A: 默认情况下，Rancher Desktop 会在 Linux 的 /home/&lt;user&gt;/.local/bin 下创建 kubectl、docker、helm 和 nerdctl 二进制文件的符号链接。要直接从控制台调用这些命令，你可以在控制台中执行以下命令，并执行注销和登录来将目录添加到你的 PATH 环境变量中： echo &quot;export PATH=\\$PATH:/home/$(whoami)/.local/bin&quot; &gt;&gt; ~/.bashrc 问：使用 nerdctl run 运行容器时，如何修复 FATA[0005] subnet 10.4.0.0/24 overlaps with other one on this address space 问题？​ 答：如果路由规则的 IP 地址来自 Iptables 上的冲突子网，你将看到此错误。冲突的路由可能来自主机网络（桥接模式）或 Kubernetes 网络。此问题的快速解决方法是通过命令 wsl --shutdown 关闭 WSL。 警告：关闭 WSL 将停止所有其他发行版以及 rancher-desktop 发行版。 问：在 Windows 上将现有 MSI 降级到较旧的 EXE 版本（1.6.x 或更早版本）时，如何修复 Installation Aborted 错误？​ 答：在 MSI 卸载过程中，如果应该删除的 Windows 注册表项 HKEY_LOCAL_MACHINE\\\\System\\\\CurrentControlSet\\\\Services\\\\EventLog\\\\Application\\\\RancherDesktopPrivilegedService 没有被删除，你将看到此错误。请手动删除注册表项并尝试安装 EXE 版本。你可以在特权 shell 中运行以下命令来删除注册表项： reg.exe delete HKLM\\System\\CurrentControlSet\\Services\\EventLog\\Application\\RancherDesktopPrivilegedService /reg:64 /f 问：为什么启动 Cluster Dashboard 时会出现空白屏幕？​ 答：Cluster Dashboard 可能无法正常运行，因为你主机上的另一个进程正在使用 Dashboard 进程（steve）所依赖的 9080 或 9443 端口。要解决此问题，请识别并终止使用这些端口的进程。你可以使用下面的命令来识别使用主机上特定端口的进程。请注意，在 macOS 和 Linux 上，Rancher Dashboard 进程名为 steve，而在 Windows 上，它是 steve.exe。如果 steve 是唯一使用端口 9080 或 9443 的进程，请不要终止它。 查找使用特定端口的进程的命令。 WindowsmacOSLinux netstat -ano | findstr :9443 ","keywords":""},{"title":"命令参考：rdctl","type":0,"sectionRef":"#","url":"1.7/references/rdctl-command-reference","content":"","keywords":""},{"title":"rdctl 或 rdctl help​","type":1,"pageTitle":"命令参考：rdctl","url":"1.7/references/rdctl-command-reference#rdctl-或-rdctl-help","content":"运行 rdctl 或 rdctl help 查看可用命令的列表： &gt; rdctl help The eventual goal of this CLI is to enable any UI-based operation to be done from the command-line as well. Usage: rdctl [command] Available Commands: api Runs API endpoints directly api /vX Enables you to see the endpoints for a particular version; e.g., v0 completion Generates the autocompletion script for the specified shell help Help about any command list-settings Lists the current settings set Updates selected fields in the Rancher Desktop UI and restart the backend shell Run an interactive shell or a command in a Rancher Desktop-managed VM shutdown Shuts down the running Rancher Desktop application start Start up Rancher Desktop or update its settings version Shows the CLI version Flags: --config-path string config file (default C:\\Users\\GunasekharMatamalam\\AppData\\Roaming\\rancher-desktop\\rd-engine.json) -h, --help help for rdctl --host string default is localhost; most useful for WSL --password string overrides the password setting in the config file --port string overrides the port setting in the config file --user string overrides the user setting in the config file Use &quot;rdctl [command] --help&quot; for more information about a command.  "},{"title":"rdctl api​","type":1,"pageTitle":"命令参考：rdctl","url":"1.7/references/rdctl-command-reference#rdctl-api","content":"运行 rdctl api 全局列出所有端点： $ ../../../resources/darwin/bin/rdctl api / | jq -r . [ &quot;GET /&quot;, &quot;GET /v0&quot;, &quot;GET /v0/settings&quot;, &quot;PUT /v0/settings&quot;, &quot;PUT /v0/shutdown&quot; ]  "},{"title":"rdctl api /vX​","type":1,"pageTitle":"命令参考：rdctl","url":"1.7/references/rdctl-command-reference#rdctl-api-vx","content":"运行 rdctl api /v0 列出指定版本的所有端点： $ rdctl api /v0 | jq -r . [ &quot;GET /v0&quot;, &quot;GET /v0/settings&quot;, &quot;PUT /v0/settings&quot;, &quot;PUT /v0/shutdown&quot; ]  "},{"title":"rdctl api /v0/settings​","type":1,"pageTitle":"命令参考：rdctl","url":"1.7/references/rdctl-command-reference#rdctl-api-v0settings","content":"rdctl api [endpoints] 是对直接使用 API 的用户最有用的命令，因此它们不适合像 rdctl set 一样日常使用。例如： 以下命令 rdctl api /v0/settings --method PUT --body '{&quot;kubernetes&quot;: {&quot;enabled&quot;: false}}'  与以下命令是一样的： rdctl set --kubernetes-enabled=false  只是它没那么简洁和用户友好。 "},{"title":"rdctl list-settings​","type":1,"pageTitle":"命令参考：rdctl","url":"1.7/references/rdctl-command-reference#rdctl-list-settings","content":"CLIAPI 运行 rdctl list-settings 以查看当前的活动配置： &gt; rdctl list-settings { &quot;version&quot;: 4, &quot;kubernetes&quot;: { &quot;version&quot;: &quot;1.22.7&quot;, &quot;memoryInGB&quot;: 2, &quot;numberCPUs&quot;: 2, &quot;port&quot;: 6443, &quot;containerEngine&quot;: &quot;moby&quot;, &quot;checkForExistingKimBuilder&quot;: false, &quot;enabled&quot;: true, &quot;WSLIntegrations&quot;: {}, &quot;options&quot;: { &quot;traefik&quot;: true } }, &quot;portForwarding&quot;: { &quot;includeKubernetesServices&quot;: false }, &quot;images&quot;: { &quot;showAll&quot;: true, &quot;namespace&quot;: &quot;k8s.io&quot; }, &quot;telemetry&quot;: true, &quot;updater&quot;: true, &quot;debug&quot;: false }  "},{"title":"rdctl set​","type":1,"pageTitle":"命令参考：rdctl","url":"1.7/references/rdctl-command-reference#rdctl-set","content":"CLIAPI 运行 rdctl set [flags] 来设置属性。在大多数情况下，Kubernetes 会在运行 set 命令时重置。你可以通过在单个命令中使用链接来设置多个属性。下面是一些参考示例： &gt; rdctl set --kubernetes-enabled=false &gt; rdctl set --container-engine docker --kubernetes-version 1.21.2  "},{"title":"rdctl shutdown​","type":1,"pageTitle":"命令参考：rdctl","url":"1.7/references/rdctl-command-reference#rdctl-shutdown","content":"CLIAPI 运行 rdctl shutdown 来正常关闭 Rancher Desktop： &gt; rdctl shutdown Shutting down.  "},{"title":"rdctl start​","type":1,"pageTitle":"命令参考：rdctl","url":"1.7/references/rdctl-command-reference#rdctl-start","content":"CLIAPI 运行 rdctl start 来确保 Rancher Desktop 按照要求运行和配置： &gt; rdctl start --container-runtime dockerd -- kubernetes-version 1.19.3  "},{"title":"rdctl version​","type":1,"pageTitle":"命令参考：rdctl","url":"1.7/references/rdctl-command-reference#rdctl-version","content":"运行 rdctl version 来查看当前 rdctl CLI 的版本： &gt; rdctl version rdctl client version: 1.0.0, targeting server version: v0  "},{"title":"使用容器","type":0,"sectionRef":"#","url":"1.7/tutorials/working-with-containers","content":"","keywords":""},{"title":"运行容器​","type":1,"pageTitle":"使用容器","url":"1.7/tutorials/working-with-containers#运行容器","content":"要使用默认的 bridge CNI 网络 (10.4.0.0/24) 运行容器： nerdctldocker nerdctl run -it --rm alpine  要使用 BuildKit 构建镜像： nerdctldocker nerdctl build -t foo /some-dockerfile-directory nerdctl run -it --rm foo  要使用 BuiltKit 进行构建并将输出发送到本地目录： nerdctldocker nerdctl build -o type=local,dest=. /some-dockerfile-directory  "},{"title":"Docker Compose​","type":1,"pageTitle":"使用容器","url":"1.7/tutorials/working-with-containers#docker-compose","content":"Docker Compose 是一个用于定义和运行多容器 Docker 应用程序的工具。 nerdctldocker nerdctl-compose CLI 用于与 docker-compose 兼容： nerdctl compose up -d nerdctl compose down  "},{"title":"暴露端口​","type":1,"pageTitle":"使用容器","url":"1.7/tutorials/working-with-containers#暴露端口","content":"要为容器公开端口 8000： nerdctldocker nerdctl run -d -p 8000:80 nginx  然后，你可以在浏览器中访问 http://localhost:8000/ 来访问容器： 注意：默认情况下，暴露的端口可以在 macOS 和 Linux 上的所有网络接口上访问。然而，在 Windows 上，暴露的端口只能通过 localhost 网络接口访问（参见 issue #1180）。目前的一个解决方法是在 Windows 主机上配置 portproxy，从而将端口公开给其他网络接口。 netsh interface portproxy add v4tov4 listenport=8080 listenaddress=0.0.0.0 connectport=8080 connectaddress=localhost  "},{"title":"定位 Kubernetes 命名空间​","type":1,"pageTitle":"使用容器","url":"1.7/tutorials/working-with-containers#定位-kubernetes-命名空间","content":"你还可以通过 containerd 使用 --namespace 参数来定位 Kubernetes 命名空间。请注意 docker 不使用命名空间。 nerdctl nerdctl --namespace k8s.io build -t demo:latest /code/demos/rd/anvil-app nerdctl --namespace k8s.io ps  "},{"title":"诊断","type":0,"sectionRef":"#","url":"1.7/ui/diagnostics","content":"诊断 注意：Rancher Desktop 不会将诊断数据发送到任何远程服务器进行处理或存储。 Diagnostics 功能通过在后台运行多项检查来检测环境中的常见问题（例如不满足最低要求、配置错误等），帮助你自行排除和修复 Rancher Desktop 应用程序的问题。 每次启动应用程序时都会运行诊断检查。如果发现任何问题，则失败检查的数量会显示在左侧导航栏中的 Diagnostics 菜单文本的旁边。Diagnostics 选项卡会显示诊断测试的结果，突出显示需要注意的区域，并指导你解决问题。 如果你进行了非标准设置，并且知道这些检查不适用于你的情况，你可以在此选项卡上 mute/unmute 个别检查。你还可以随时重新运行诊断程序，从而验证你对环境所做的更改是否已经解决了问题。 WindowsmacOSLinux","keywords":""},{"title":"使用镜像","type":0,"sectionRef":"#","url":"1.7/tutorials/working-with-images","content":"","keywords":""},{"title":"常规用法​","type":1,"pageTitle":"使用镜像","url":"1.7/tutorials/working-with-images#常规用法","content":"使用任何一种工具都需要 Rancher Desktop 与适当的容器运行时一起运行。对于 nerdctl，使用 containerd 运行时。对于 docker，使用 Moby 运行时。 要了解所有命令选项并显示帮助文档，运行： nerdctldocker nerdctl -h 与 Docker 不同，containerd 具有自己的命名空间。默认情况下，nerdctl 镜像存储在 default 命名空间中。如果你希望你的镜像可供 Kubernetes 使用，请使用 --namespace k8s.io 或 -n k8s.io CLI 参数。你还可以使用 --namespace &lt;NAMESPACE_NAME&gt; 选项来切换到 default 或其他命名空间。请注意，nerdctl 命名空间独立于 Kubernetes 和 kubectl 命名空间。 "},{"title":"列出镜像​","type":1,"pageTitle":"使用镜像","url":"1.7/tutorials/working-with-images#列出镜像","content":"要查看当前可用的镜像，请运行以下命令： nerdctldocker nerdctl images  "},{"title":"构建镜像​","type":1,"pageTitle":"使用镜像","url":"1.7/tutorials/working-with-images#构建镜像","content":"nerdctldocker 构建镜像与现有工具的操作相似。你可以在具有 Dockerfile（Dockerfile 使用了一个 scratch 镜像）的路径上运行 nerdctl： nerdctl build . [+] Building 0.1s (4/4) FINISHED =&gt; [internal] load build definition from Dockerfile =&gt; =&gt; transferring dockerfile: 31B =&gt; [internal] load .dockerignore =&gt; =&gt; transferring context: 2B =&gt; [internal] load build context =&gt; =&gt; transferring context: 33B =&gt; CACHED [1/1] ADD anvil-app / nerdctl 具有在构建时进行标记的选项以及一些其他选项： nerdctl build -t TAG . 要构建用于 Kubernetes 的镜像，请指定 k8s.io 命名空间，如下所示： nerdctl build -n k8s.io .  "},{"title":"构建本地镜像​","type":1,"pageTitle":"使用镜像","url":"1.7/tutorials/working-with-images#构建本地镜像","content":"为了演示构建本地镜像和运行应用程序的步骤，Rancher Desktop 的 docs 仓库提供了一个示例 nodejs 应用程序。首先，克隆仓库并 cd 到终端中的 assets/express-sample 中。 运行以下命令来使用 Dockerfile 构建镜像： nerdctldocker nerdctl --namespace k8s.io build -t expressapp:v1.0 .  运行以下命令来运行容器： kubectl run --image expressapp:v1.0 expressapp kubectl port-forward pods/expressapp 3000:3000  注意：添加 latest 标签时，请务必同时指定以下内容： imagePullPolicy: Never  "},{"title":"标记镜像​","type":1,"pageTitle":"使用镜像","url":"1.7/tutorials/working-with-images#标记镜像","content":"如果要标记已构建的现有镜像，你可以运行以下命令： nerdctldocker nerdctl tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]  "},{"title":"删除镜像​","type":1,"pageTitle":"使用镜像","url":"1.7/tutorials/working-with-images#删除镜像","content":"要删除镜像，请运行以下命令： nerdctldocker nerdctl rmi IMAGE  "},{"title":"通用","type":0,"sectionRef":"#","url":"1.7/ui/general","content":"通用 General 选项卡提供了社区 channel 的信息，用户可以通过这些 channel 联系 Rancher Desktop 团队和社区，并提出问题、报告错误或讨论 Rancher Desktop。 WindowsmacOSLinux","keywords":""},{"title":"镜像","type":0,"sectionRef":"#","url":"1.7/ui/images","content":"","keywords":""},{"title":"Scanning Images​","type":1,"pageTitle":"镜像","url":"1.7/ui/images#scanning-images","content":"此功能使用 Trivy 来扫描你的镜像，从而查找漏洞和配置问题。 要扫描镜像： 从镜像列表中，找到要扫描的镜像。单击 ⋮ &gt; Scan。将显示按严重程度排序的漏洞摘要。单击 &gt; 查看​​每个漏洞的详细信息，其中包括漏洞详情的链接。 "},{"title":"Adding Images​","type":1,"pageTitle":"镜像","url":"1.7/ui/images#adding-images","content":"Pulling Images​ 此选项可以让你将镜像从镜像仓库拉取到你的虚拟机中。 要拉取镜像： 单击右上角的 + 按钮。单击 Pull 选项卡。输入要拉取的镜像的名称。 注意：默认情况下，镜像是从 Docker Hub 中提取的（格式：repo/image[:tag]）。要从其他镜像仓库中拉取，请包含主机名 registry.example.com/repo/image[:tag]。 单击 Pull。 Building Images​ 使用此选项构建镜像并将其添加到你的虚拟机。 要构建镜像： 单击右上角的 + 按钮。单击 Build 选项卡。输入构建的镜像的名称，例如 repo/image、repo/image:tag、registry.example.com/repo/image 或 registry.example.com/repo/image:tag。单击 Build。在文件浏览器中，选择要用来构建镜像的 Dockerfile。 "},{"title":"端口转发","type":0,"sectionRef":"#","url":"1.7/ui/port-forwarding","content":"端口转发 如需转发端口： 找到 Service 并单击 Forward，指定要使用的端口或使用随机分配的端口。点击 ✓ 按钮来确认你的选择。可选：单击 Cancel 来移除分配的端口。 WindowsmacOSLinux","keywords":""},{"title":"应用程序","type":0,"sectionRef":"#","url":"1.7/ui/preferences/application","content":"应用程序 WindowsmacOSLinux Behavior​ Administrative Access​ 允许 Rancher Desktop 在启动某些操作时获得管理访问权限（sudo 权限）。这能用于增强功能，包括桥接网络和默认 docker socket 支持。更改会在 Rancher Desktop 下次启动时应用。 Automatic Updates​ 当一个新版本发布时，用户会得到一个通知和升级目标的发行版说明。无论是否启用了自动更新，用户都会收到通知。如果启用此选项，更新会被下载，然后在下次启动 Rancher Desktop 时安装更新。 Statistics​ 该选项允许 Rancher Desktop 收集关于你与 Rancher Desktop 应用程序交互的信息，但不会收集你运行的工作负载等信息。 Environment​ 配置 PATH​ Rancher Desktop 附带命令行实用程序，用于与其各种功能交互。这些实用程序包括 docker、nerdctl、kubectl 和 helm 等。这些实用程序位于 ~/.rd/bin，因此你可以通过运行 ls ~/.rd/bin 来查看你的安装中包含了哪些实用程序。 要使用这些实用程序，~/.rd/bin 必须位于 shell 的 PATH 变量中。 有两种执行此操作的选项： Automatic：PATH 管理将通过修改你的 shell .rc 文件来将 ~/.rd/bin 添加到 PATH 中。Manual：PATH 管理不会改变任何东西 - 在这种模式下，你必须手动将 ~/.rd/bin 添加到 PATH 中。","keywords":""},{"title":"容器引擎","type":0,"sectionRef":"#","url":"1.7/ui/preferences/container-engine","content":"","keywords":""},{"title":"General​","type":1,"pageTitle":"容器引擎","url":"1.7/ui/preferences/container-engine#general","content":"为 Rancher Desktop 设置容器运行时。用户可以选择 containerd 为容器提供命名空间，也可以使用 nerdctl 或 dockerd (moby) 来启用 D​​ocker API 和 Docker CLI。一次只能运行一个容器运行时。 切换到不同的容器运行时： 使用现有容器运行时构建或拉取的工作负载和镜像在切换的容器运行时不可用。 WindowsmacOSLinux "},{"title":"Allowed Images​","type":1,"pageTitle":"容器引擎","url":"1.7/ui/preferences/container-engine#allowed-images","content":"Allowed Images 选项卡用于控制可以在 Rancher Desktop 中访问的镜像仓库工件。例如，你可能只想从组织的私有镜像仓库，或仅从组织镜像仓库中特定部门的命名空间中拉取容器镜像。你可以指定镜像名称模式，从而仅允许访问特定镜像仓库和/或仓库的镜像。 选中 Enable 复选框，这样，Rancher Desktop 在拉取或推送镜像时将应用指定的模式，这意味着只允许名称至少与指定模式之一匹配的镜像。 你可以使用 + 和 - 按钮来添加/删除镜像名称模式。 WindowsmacOSLinux "},{"title":"如何指定 Allowed Image Patterns​","type":1,"pageTitle":"容器引擎","url":"1.7/ui/preferences/container-engine#如何指定-allowed-image-patterns","content":"你可以使用 [registry/][:port/][organization/]repository[:tag] 格式来指定 Allowed Image Pattern（允许的镜像模式）。 如果未指定 Allowed Image Patterns， registry 默认为 Docker Hub (docker.io)。port 默认为 433。Docker Hub 的 organization 默认为 library，不适用于其他镜像仓库。tag 默认为任何内容，不仅仅是 latest。 注意：按 tag 过滤实际上不起作用；相应的摘要 (repository@digest) 也必须添加到允许列表中才行，因此不实用。如果你有需要根据标签进行过滤的用例，请提交 Github issue。 "},{"title":"示例​","type":1,"pageTitle":"容器引擎","url":"1.7/ui/preferences/container-engine#示例","content":"模式\t意义busybox\t允许 docker.io 镜像仓库的 library 组织中的 busybox 仓库。 suse/\t允许 docker.io 镜像仓库的 suse 组织中的任何镜像。 注意：仓库末尾的斜杠表示后面跟着单独的一段，例如 suse/nginx，而不是 suse/cap/uaa。 suse//\t允许 docker.io 镜像仓库的 suse 组织中的任何镜像。 注意：仓库末尾的双斜杠表示后面跟着一个或多个段，例如 suse/cap/uaa。 registry.internal:5000\t允许来自 registry.internal:5000 镜像仓库的任何镜像。 registry.suse.com/nginx\t允许来自 registry.suse.com 镜像仓库的镜像 nginx。 注意：DockerHub 之外的镜像仓库没有顶层组织的概念，因此没有默认的 library 组织。 "},{"title":"Kubernetes","type":0,"sectionRef":"#","url":"1.7/ui/preferences/kubernetes","content":"","keywords":""},{"title":"Enable Kubernetes​","type":1,"pageTitle":"Kubernetes","url":"1.7/ui/preferences/kubernetes#enable-kubernetes","content":"此选项允许你启用或禁用 Kubernetes。禁用 Kubernetes 后，你可以只运行 containerd 或 dockerd 来减少资源消耗。默认情况下，Kubernetes 是启用的。 要启用/禁用 Kubernetes，只需选中/取消选中 Enable Kubernetes 复选框。启用/禁用 Kubernetes 时，该应用程序将重新启动。禁用 Kubernetes 不会删除现有资源，重新启用 Kubernetes 时，你可以再次使用这些资源。 "},{"title":"Kubernetes Version​","type":1,"pageTitle":"Kubernetes","url":"1.7/ui/preferences/kubernetes#kubernetes-version","content":"该选项显示了 Rancher Desktop 实例可以使用的 Kubernetes 版本列表。 升级时： 会进行检查，看目标 Kubernetes 版本是否可以在本地使用。如果没有，它会下载对应文件。保留工作负载。保留镜像。 降级时： 移除工作负载。保留镜像。 要切换版本： 点击 Kubernetes version 下拉菜单。选择要转换的版本。 "},{"title":"Kubernetes Port​","type":1,"pageTitle":"Kubernetes","url":"1.7/ui/preferences/kubernetes#kubernetes-port","content":"设置 Kubernetes 暴露的端口。如果有多个 K3s 实例正在运行，使用此设置可以避免端口冲突。 "},{"title":"Enable Traefik​","type":1,"pageTitle":"Kubernetes","url":"1.7/ui/preferences/kubernetes#enable-traefik","content":"此选项允许你启用或禁用 Traefik。禁用 Traefik 后，你可以释放端口 80 和 443，以便将其用于备用 ingress 配置。默认情况下，Traefik 是启用的。 禁用 Traefik 不会删除现有资源。 WindowsmacOSLinux "},{"title":"WSL (Windows)","type":0,"sectionRef":"#","url":"1.7/ui/preferences/wsl","content":"WSL (Windows) 该选项使 Rancher Desktop Kubernetes 配置能够被任何 WSL 配置的 Linux 发行版所访问。一旦启用，你可以使用 WSL 发行版中的 kubectl 等工具与 Rancher Desktop Kubernetes 集群进行通信。 WSL 让你在所有 Linux 发行版中全局配置内存和 CPU 分配。请参阅 WSL 文档中的说明。","keywords":""},{"title":"虚拟机（macOS 和 Linux）","type":0,"sectionRef":"#","url":"1.7/ui/preferences/virtual-machine","content":"","keywords":""},{"title":"Memory​","type":1,"pageTitle":"虚拟机（macOS 和 Linux）","url":"1.7/ui/preferences/virtual-machine#memory","content":"分配给 Rancher Desktop 的内存。可选范围取决于你的系统。红色区域表示分配可能会影响系统服务。 "},{"title":"CPU​","type":1,"pageTitle":"虚拟机（macOS 和 Linux）","url":"1.7/ui/preferences/virtual-machine#cpu","content":"分配给 Rancher Desktop 的 CPU 数量。可选范围取决于你的系统。红色区域表示分配可能会影响系统服务。 macOSLinux "},{"title":"概述","type":0,"sectionRef":"#","url":"1.8/","content":"","keywords":""},{"title":"容器管理​","type":1,"pageTitle":"概述","url":"1.8/#容器管理","content":"Rancher Desktop 提供了构建、推送和拉取容器镜像以及运行容器的功能，这些功能可以通过 Docker CLI（当你选择 Moby/dockerd 作为引擎时）或 nerdctl（当你选择 containerd 作为引擎时）实现，而 nerdctl 是 containerd 项目提供的 &quot;兼容 containerd 的 Docker CLI&quot;。 "},{"title":"Kubernetes​","type":1,"pageTitle":"概述","url":"1.8/#kubernetes","content":"Kubernetes 内置在 Rancher Desktop 中，由 K3s 提供。K3s 是一个经过认证的轻量级发行版。通过 Rancher Desktop，你能够 选择你的 Kubernetes 版本，并且一键重置 Kubernetes 或 Kubernetes 以及整个容器运行时。 "},{"title":"Rancher 与 Rancher Desktop​","type":1,"pageTitle":"概述","url":"1.8/#rancher-与-rancher-desktop","content":"虽然 Rancher 和 Rancher Desktop 的名字里都包含 Rancher，但它们的功能是有差别的。Rancher Desktop 不是桌面版 Rancher。Rancher 是管理 Kubernetes 集群的强大解决方案，Rancher Desktop 提供本地 Kubernetes 和容器管理平台，这两种解决方案相辅相成。 如果要在本地系统上运行 Rancher，你可以将 Rancher 安装到 Rancher Desktop 中。 "},{"title":"故障排除","type":0,"sectionRef":"#","url":"1.7/ui/troubleshooting","content":"","keywords":""},{"title":"Show Logs​","type":1,"pageTitle":"故障排除","url":"1.7/ui/troubleshooting#show-logs","content":"使用此选项打开包含所有 Rancher Desktop 日志文件的文件夹。 Enable Debug Mode​ 启用 debug 级别日志记录。 "},{"title":"Reset Kubernetes​","type":1,"pageTitle":"故障排除","url":"1.7/ui/troubleshooting#reset-kubernetes","content":"重置 Kubernetes 并删除所有工作负载和配置。在重置之前，用户会看到确认信息以及删除容器镜像的选项。 要重置 Kubernetes： 单击 Reset Kubernetes，然后，你会看到一个确认窗口。可选：选择是否同时删除容器镜像。单击 Reset。Kubernetes 会停止并重新启动。 "},{"title":"Factory Reset​","type":1,"pageTitle":"故障排除","url":"1.7/ui/troubleshooting#factory-reset","content":"删除集群和所有其他 Rancher Desktop 设置。必须再次执行初始设置流程。 要恢复出厂设置： 单击 Reset。然后，你会看到一个确认窗口。可选：选择是否保留缓存的 Kubernetes 镜像。单击 Factory Reset。Kubernetes 会停止，Rancher Desktop 会关闭。可选：再次启动 Rancher Desktop。 WindowsmacOSLinux "},{"title":"v1.7.0","type":0,"sectionRef":"#","url":"1.8/bundled-utilities-version-info/v1.7.0","content":"v1.7.0 amazon-ecr-credential-helper: 0.6.0 docker: 20.10.21 docker-buildx: 0.9.1 docker-compose: 2.14.0 docker-credential-helpers: 0.6.4 helm: 3.10.2 kuberlr: 0.4.2 nerdctl: 1.0.0 trivy: 0.35.0 ","keywords":""},{"title":"v1.6.0","type":0,"sectionRef":"#","url":"1.8/bundled-utilities-version-info/v1.6.0","content":"v1.6.0 amazon-ecr-credential-helper: 0.6.0 docker: 20.10.17 docker-buildx: 0.9.1 docker-compose: 2.11.1 docker-credential-helpers: 0.6.4 helm: 3.9.4 kuberlr: 0.4.2 nerdctl: 0.23.0 trivy: 0.32.0 ","keywords":""},{"title":"v1.8.0","type":0,"sectionRef":"#","url":"1.8/bundled-utilities-version-info/v1.8.0","content":"v1.8.0 amazon-ecr-credential-helper: 0.6.0 docker: 23.0.1 docker-buildx: 0.10.4 docker-compose: 2.16.0 docker-credential-helpers: 0.6.4 helm: 3.11.2 kuberlr: 0.4.2 nerdctl: 1.2.1 trivy: 0.38.3 ","keywords":""},{"title":"常见问题","type":0,"sectionRef":"#","url":"1.8/faq","content":"常见问题 本文包含了用户常见的 Rancher Desktop 问题和解答。 问：Rancher Desktop 是 Rancher 的桌面版吗？​ 答：不是。Rancher Desktop 不是桌面版 Rancher。 虽然 Rancher 和 Rancher Desktop 的名字里都包含 Rancher，但它们的功能是有差别的。这两种解决方案相辅相成。 Rancher 是一个完整的软件堆栈，用于跨任何基础设施管理多个 Kubernetes 集群。 Rancher Desktop 在桌面上提供容器管理和 Kubernetes 实例，用于支持本地开发用例。 问：Rancher Desktop 中有 Kubernetes Cluster Explorer 吗？​ 答：是的，Rancher Dashboard 作为功能预览包含在 1.2.1 版本中。你可以通过单击系统托盘菜单中的 Dashboard 选项来调用仪表板。 要了解有关 Rancher Desktop 的更多信息，请单击此处。 要了解有关 Rancher 的更多信息，请单击此处。 问：我可以同时安装 Docker Desktop 与 Rancher Desktop 吗？​ 答：可以，但它们不能同时运行，因为 Rancher Desktop 和 Docker Desktop 使用相同的 Docker socket（/var/run/docker.sock）。在启动一个之前，一定要先停止另一个。 问：如何彻底卸载 Rancher Desktop？​ 答：首先，执行恢复出厂设置，然后卸载该应用程序。卸载过程因操作系统而异。如需更多信息，请参阅此处。 问：Windows 上的 DNS VPN 有哪些支持（如果有）？​ 答：Windows 的替代 DNS 解析器已实现，用来解决 Windows 上的某些 VPN 问题。它支持通过 VPN 连接进行 DNS 查找。它必须通过编辑内部配置文件手动启用。 问：“WSL 集成”选项卡有什么作用？​ 答：它能使 Kubernetes 配置可以在显示的 WSL 发行版中访问，以便你使用 kubectl 之类的命令与 Kubernetes 进行通信。 问：我在哪里可以找到详细的日志？​ 答：点击 Troubleshooting 标签，然后点击 Show Logs。 问：如何为 Traefik Ingress Controller 启用仪表板？​ 答：出于安全原因，Traefik 仪表板默认不公开。但是，你可以通过多种方式公开仪表板。你可以使用下面显示的两种方法之一。 使用 port-forward 来启用仪表板访问​ kubectl port-forward -n kube-system $(kubectl -n kube-system get pods --selector &quot;app.kubernetes.io/name=traefik&quot; --output=name) 9000:9000 在浏览器中访问 http://127.0.0.1:9000/dashboard/ 以查看 Traefik 仪表板。 使用 HelmChartConfig 来启用仪表板访问​ 将以下说明复制到文件中，例如 expose-traefik.yaml： apiVersion: helm.cattle.io/v1 kind: HelmChartConfig metadata: name: traefik namespace: kube-system spec: valuesContent: |- dashboard: enabled: true ports: traefik: expose: true # Avoid this in production deployments logs: access: enabled: true 运行命令： kubectl apply -f expose-traefik.yaml 在浏览器中访问 http://127.0.0.1:9000/dashboard/ 以查看 Traefik 仪表板。 问：如何禁用 Traefik，这样会删除 Traefik 资源吗？​ 答：是的，你可以禁用 Traefik 以释放端口 80 和 443 用于备用 ingress 配置。禁用 Traefik 不会 删除现有资源。Kubernetes Settings 下会默认选择 Enable Traefik 功能，取消选中此框即可禁用它。 如果要删除 Traefik 资源，请在 UI 的 Kubernetes Settings 面板上单击 Reset Kubernetes。 问：是否支持内部容器端口转发？​ 答：是的，从 v1.1.0 起，所有三个平台（Windows、Linux 和 macOS）都支持此功能。 问：文件共享的工作原理与 Docker Desktop 类似吗？是否必须进行任何其他配置才能将卷挂载到 VM？​ 答：目前默认共享以下目录：macOS 上为 /Users/$USER，Linux 上为 /home/$USER，二者均共享 /tmp/rancher-desktop。对于 Windows，所有文件都通过 WSL2 自动共享。 通常无法开箱即用地从主机访问标准的 Docker 卷。 要访问 Linux/macOS 上的其他目录，你必须进行额外的配置。 如果要改变挂载的行为，你也需要进行额外的配置。 问：容器是否能通过 host.docker.internal 回到主机服务？​ 答：是的。在 Windows 上，你可能需要创建防火墙规则来允许主机和容器之间的通信。你可以在特权 powershell 中运行以下命令来创建防火墙规则： New-NetFirewallRule -DisplayName &quot;WSL&quot; -Direction Inbound -InterfaceAlias &quot;vEthernet (WSL)&quot; -Action Allow 问：我不需要 Rancher Desktop 部署的 Kubernetes 集群；如何禁用它以节省资源？​ 答：打开 Rancher Desktop 设置，点击齿轮打开 Preferences，选择 Kuberentes 选项卡，然后取消勾选 Kubernetes Settings 下的 Enable Kubernetes 功能以禁用它。 这将允许你在不为 Kubernetes 分配资源的情况下仅运行 containerd 或 dockerd。 问：Kubernetes Image Manager (kim) 发生了什么？​ 答：从 1.0 版本开始，Kim 不再被支持，而且已被 nerdctl 和 Docker CLI 取代。 问：为什么运行 brew install rancher 时出现 It seems there is already a Binary at '/usr/local/bin/&lt;BINARY&gt;' 的错误？​ 答：如果支持 Rancher Desktop 的工具（Helm、kubectl、nerdctl、docker）已经由 Homebrew 管理，那么由于 Homebrew cask 公式的定义方式，安装会失败。你可以使用 Mac 应用程序进行安装来避免这个问题。 问：我通过 Arch User Repository 安装了 nerdctl，但它不能与 Rancher Desktop 一起使用，为什么？​ 答：对于 Rancher Desktop，nerdctl 必须在 VM 内部而不是在主机上运行。与 Rancher Desktop 一起打包的主机版本只是一个 shell wrapper，用于在 VM 内执行命令。 问：Support Utilities 页面（Rancher Desktop &lt;1.3.0）上的工具未安装，我看到 Insufficient permission to modify /usr/local/bin 错误，我该如何解决？​ 答：当你没有 /usr/local/bin 的权限时就会发生这种情况。改善权限处理的长期解决方案正在开发中。同时，一个临时的解决方法是通过运行 sudo chown $USER /usr/local/bin 来更改 /usr/local/bin 的权限。当你能够写入目录时，Rancher Desktop 就能够创建符号链接。 从 1.3.0 及更高版本开始，我们不再在 /usr/local/bin 中创建符号链接，而是在 ~/.rd/bin 中创建符号链接，并将该目录放在 PATH 中，这样可以避免处理 /usr/local/bin 的写权限和文件冲突。我们强烈建议你升级到最新版本的 Rancher Desktop。 问：Cygwin 与 Rancher Desktop 兼容吗？​ 答：没有，但我们有增加兼容性的计划。 问：如何将 Rancher Desktop 添加到 Windows 的启动程序列表中？​ 答：在 Windows 上，你可以通过不同的方式将程序添加到启动程序列表中。例如，你可以执行以下步骤： 按 Windows+R 打开运行对话框。输入 shell:startup，然后按 Enter 打开 Startup 文件夹。从桌面复制“Rancher Desktop”快捷方式并粘贴到 Startup 文件夹中。重新启动主机。 问：Rancher Desktop 实际将数据卷放在哪里？​ 答： Windows： 打开运行菜单（按 Windows + R）并打开下面的路径（具体取决于活动的容器运行时）： dockerd(moby): \\\\wsl$\\rancher-desktop-data\\var\\lib\\docker\\volumes containerd: \\\\wsl$\\rancher-desktop-data\\var\\lib\\nerdctl\\dbb19c5e\\volumes\\&lt;namespace&gt; macOS 和 Linux： 根据活动的容器运行时，在 (lima) VM 中导航到下面的路径。你可以使用 rdctl shell 访问 VM 中的这些路径。 dockerd(moby): /var/lib/docker/volumes containerd: /var/lib/nerdctl/dbb19c5e/volumes/&lt;namespace&gt; 问：如何将 Rancher Desktop 降级到旧版本​ 答：我们强烈建议你使用包含最新功能和错误修复的当前发行版。但是，如果你想降级到较早的版本，请按照以下步骤操作。 执行 Troubleshooting &gt; Factory Reset。请确保没有在 Factory Reset 对话框中选中 Keep cached Kubernetes images。按照适用于你操作系统的卸载说明卸载当前版本。安装你所需的旧版本。","keywords":""},{"title":"安装","type":0,"sectionRef":"#","url":"1.8/getting-started/installation","content":"","keywords":""},{"title":"macOS​","type":1,"pageTitle":"安装","url":"1.8/getting-started/installation#macos","content":""},{"title":"要求​","type":1,"pageTitle":"安装","url":"1.8/getting-started/installation#要求","content":"Rancher Desktop 在 macOS 上运行需要以下条件： macOS Catalina 10.15 或更高版本。带有 VT-x 的 Apple 芯片 (M1) 或 Intel CPU。连接到互联网。 还建议具备以下条件： 8 GB 内存4 个 CPU 你要运行的工作负载可能还需要一些额外的资源。 "},{"title":"在 macOS 上安装 Rancher Desktop​","type":1,"pageTitle":"安装","url":"1.8/getting-started/installation#在-macos-上安装-rancher-desktop","content":"转到 GitHub 上的 Releases 页面。找到要下载的 Rancher Desktop 版本。展开 Assets 部分并下载 Rancher.Desktop-X.Y.Z.dmg，其中 X.Y.Z 是 Rancher Desktop 的版本。导航到下载安装程序的目录，并运行安装程序。这个目录通常是下载文件夹。双击 DMG 文件。在打开的访达窗口中，将 Rancher Desktop 图标拖到应用程序文件夹中。导航到应用程序文件夹，然后双击 Rancher Desktop 来启动它。 安装 Rancher Desktop 后，用户可以访问以下支持的工具： Helmkubectlnerdctldocker (moby) "},{"title":"在 macOS 上卸载 Rancher Desktop​","type":1,"pageTitle":"安装","url":"1.8/getting-started/installation#在-macos-上卸载-rancher-desktop","content":"打开访达 &gt; 应用程序。找到 Rancher Desktop。选中它，然后选择文件 &gt; 移到废纸篓。要删除应用程序，选择访达 &gt; 清倒废纸篓。 "},{"title":"Windows​","type":1,"pageTitle":"安装","url":"1.8/getting-started/installation#windows","content":""},{"title":"要求​","type":1,"pageTitle":"安装","url":"1.8/getting-started/installation#要求-1","content":"Rancher Desktop 在 Windows 上运行需要以下条件： Windows 10 build 1909 或更高版本。支持家庭版。在具有虚拟化功能的主机上运行。连接到互联网。 Rancher Desktop 在 Windows 上需要 Windows Subsystem for Linux，它将作为 Rancher Desktop 设置的一部分自动安装。你不需要手动下载发行版。 还建议具备以下条件： 8 GB 内存4 个 CPU 你要运行的工作负载可能还需要一些额外的资源。 注意：你可以在 Windows 主机上以非管理员用户身份使用 Rancher Desktop。但是，以下组件的安装过程需要管理员的干预： WSL2：你需要管理员权限才能安装 WSL2，它是 Rancher Desktop 的重要组件。Rancher Desktop Privileged Service：你需要管理员权限才能安装 Rancher Desktop Privileged Service，这是在主机的所有接口上公开运行在容器内的应用程序/服务所必需的。你也可以跳过 Rancher Desktop Privileged Service 的安装，这样的话，你将无法在 127.0.0.1 之外的任何接口上公开应用程序/服务。 "},{"title":"在 Windows 上安装 Rancher Desktop​","type":1,"pageTitle":"安装","url":"1.8/getting-started/installation#在-windows-上安装-rancher-desktop","content":"转到 GitHub 上的 Releases 页面。找到要下载的 Rancher Desktop 版本。展开 Assets 部分并下载 Windows 安装程序。它的名称是 Rancher.Desktop.Setup.X.Y.Z.msi，其中 X.Y.Z 是 Rancher Desktop 的版本。导航到下载安装程序的目录，并运行安装程序。这个目录通常是下载文件夹。查看许可协议并单击 I Agree 来继续安装。如果出现提示，请选择为计算机的所有用户安装，或仅为当前用户安装。建议为所有用户安装，以便安装 Rancher Desktop Privileged Service，如上所述。按照提示确认安装。安装完成后，单击 Finish 来关闭安装向导。 "},{"title":"在 Windows 上卸载 Rancher Desktop​","type":1,"pageTitle":"安装","url":"1.8/getting-started/installation#在-windows-上卸载-rancher-desktop","content":"在任务栏中，单击开始菜单。转到设置 &gt; 应用程序 &gt; 应用程序和功能。找到并选择 Rancher Desktop。点击卸载，出现确认信息时再次点击。按照 Rancher Desktop 卸载程序上的提示继续。完成后点击完成。 "},{"title":"Linux​","type":1,"pageTitle":"安装","url":"1.8/getting-started/installation#linux","content":""},{"title":"要求​","type":1,"pageTitle":"安装","url":"1.8/getting-started/installation#要求-2","content":"Rancher Desktop 在 Linux 上运行需要以下条件： 一个可以安装 .deb 或 .rpm 包或 AppImages 的发行版。连接到互联网。带有 AMD-V 或 VT-x 的 x86_64 处理器。/dev/kvm 上的读写权限。详情见下文。 还建议具备以下条件： 8 GB 内存4 个 CPU 你要运行的工作负载可能还需要一些额外的资源。 "},{"title":"确保你可以访问 /dev/kvm​","type":1,"pageTitle":"安装","url":"1.8/getting-started/installation#确保你可以访问-devkvm","content":"Rancher Desktop 需要 /dev/kvm 的权限，而在某些发行版（例如 Ubuntu 18.04）上，用户没有足够的权限。 要检查你是否具有所需的权限，请执行以下操作： [ -r /dev/kvm ] &amp;&amp; [ -w /dev/kvm ] || echo 'insufficient privileges'  如果输出是 insufficientprivilege，你需要将你的用户添加到 kvm 组。你可以执行以下操作： sudo usermod -a -G kvm &quot;$USER&quot;  然后重新启动使更改生效。 "},{"title":"pass 设置​","type":1,"pageTitle":"安装","url":"1.8/getting-started/installation#pass-设置","content":"默认情况下，Rancher Desktop 使用 pass 来安全地存储通过 docker login 和 nerdctl login 传递的凭证。在第一次在主机上使用时，pass 需要你进行少量的设置。如果你不打算使用 docker login 或 nerdctl login，你不需要设置 pass。但请记住，如果你以后需要使用它们，你必须设置它们，否则会出现错误。 安装 Rancher Desktop 后，你应该创建一个 GPG 密钥。pass 会使用它来保护密文。要创建 GPG 密钥： gpg --generate-key  输出应该与 8D818FB37A9279E341F01506ED96AD27A40C9C73 类似。 这是你的密钥 ID。然后，你可以通过将此密钥 ID 传递给它来初始化 pass： pass init 8D818FB37A9279E341F01506ED96AD27A40C9C73  关于 pass 的更多信息，请参阅此处。 "},{"title":"Traefik 端口绑定访问​","type":1,"pageTitle":"安装","url":"1.8/getting-started/installation#traefik-端口绑定访问","content":"Rancher Desktop 使用 Traefik 作为默认 Ingress Controller。由于 Traefik Ingress 上的端口访问受限，用户在部署 Rancher Desktop 后可能会遇到 permission denied 错误。大多数 Linux 发行版（例如 Ubuntu 20.04）不允许非 root 用户监听 1024 以下的 TCP 和 UDP 端口。为了让 Traefik 监听本地主机上的特权端口，请运行以下命令： sudo sysctl -w net.ipv4.ip_unprivileged_port_start=80  命令运行后，80 及以上的所有端口都将变为非特权端口，Traefik 将能够成功访问这些端口。 "},{"title":"通过 .deb 包安装​","type":1,"pageTitle":"安装","url":"1.8/getting-started/installation#通过-deb-包安装","content":"添加 Rancher Desktop 仓库并使用以下命令安装 Rancher Desktop： curl -s https://download.opensuse.org/repositories/isv:/Rancher:/stable/deb/Release.key | gpg --dearmor | sudo dd status=none of=/usr/share/keyrings/isv-rancher-stable-archive-keyring.gpg echo 'deb [signed-by=/usr/share/keyrings/isv-rancher-stable-archive-keyring.gpg] https://download.opensuse.org/repositories/isv:/Rancher:/stable/deb/ ./' | sudo dd status=none of=/etc/apt/sources.list.d/isv-rancher-stable.list sudo apt update sudo apt install rancher-desktop  "},{"title":"卸载 .deb 包​","type":1,"pageTitle":"安装","url":"1.8/getting-started/installation#卸载-deb-包","content":"你可以使用以下命令删除包、仓库和密钥： sudo apt remove --autoremove rancher-desktop sudo rm /etc/apt/sources.list.d/isv-rancher-stable.list sudo rm /usr/share/keyrings/isv-rancher-stable-archive-keyring.gpg sudo apt update  "},{"title":"通过 .rpm 包安装​","type":1,"pageTitle":"安装","url":"1.8/getting-started/installation#通过-rpm-包安装","content":"注意：Rancher Desktop 在 Linux 上使用 QEMU，而 RHEL、Fedora 和相关发行版打包 QEMU 的方式与其他发行版不同。要在这些发行版上使用 Rancher Desktop，请使用 AppImage。 在 openSUSE 上添加仓库并安装： sudo zypper addrepo https://download.opensuse.org/repositories/isv:/Rancher:/stable/rpm/isv:Rancher:stable.repo sudo zypper install rancher-desktop  "},{"title":"卸载 .rpm 包​","type":1,"pageTitle":"安装","url":"1.8/getting-started/installation#卸载-rpm-包","content":"确保 Rancher Desktop 已退出（如果没有，它应该出现在 Dock 中），然后执行： sudo zypper remove --clean-deps rancher-desktop sudo zypper removerepo isv_Rancher_stable  "},{"title":"通过 AppImage 安装​","type":1,"pageTitle":"安装","url":"1.8/getting-started/installation#通过-appimage-安装","content":"首先，确保安装了 pass 和 gpg。例如，在 Fedora 上： dnf install pass gnupg2  你可以在此处下载 AppImage。要运行它，只需要添加可执行权限，然后执行即可。为了更好地与你的桌面集成，你可以使用 AppImageLauncher。 "},{"title":"卸载 AppImage​","type":1,"pageTitle":"安装","url":"1.8/getting-started/installation#卸载-appimage","content":"只需删除 AppImage。 "},{"title":"部署配置文件","type":0,"sectionRef":"#","url":"1.8/getting-started/deployment","content":"","keywords":""},{"title":"启动首选值​","type":1,"pageTitle":"部署配置文件","url":"1.8/getting-started/deployment#启动首选值","content":"Rancher Desktop 设置如下： 加载 “admin” 部署配置文件（“defaults” 和 “locked”）如果都不存在，则加载 “user” 部署配置文件（同样是 “defaults” 和 “locked”）从 settings.json 文件加载保存的首选项如果没有保存的设置，请改用之前加载的 “defaults” 配置文件将用于启动应用程序的命令行参数值复制到设置中如果设置仍然完全为空，则显示首次运行对话框使用内置应用程序默认值填充任何缺失的值将 “locked” 配置文件中的值复制到当前设置上 用户无法通过 GUI 或 CLI 修改已被配置文件锁定的设置。 如果配置文件存在但无法正确解析，Rancher Desktop 将拒绝加载应用程序。 Rancher Desktop 不会修改或删除部署配置文件。它们不会受到恢复出厂设置或卸载的影响。 配置文件数据的结构与应用程序设置匹配： rdctl list-settings { ... &quot;containerEngine&quot;: { &quot;allowedImages&quot;: { &quot;enabled&quot;: false, &quot;patterns&quot;: [] }, &quot;name&quot;: &quot;containerd&quot; }, ... }  下面针对各系统的文档说明了如何创建部署配置文件，该配置文件将默认容器引擎更改为 moby，禁用 Kubernetes，并将镜像列表锁定为仅允许 busybox 和 nginx。 "},{"title":"配置文件格式和位置​","type":1,"pageTitle":"部署配置文件","url":"1.8/getting-started/deployment#配置文件格式和位置","content":"不同系统使用的部署配置文件存储格式和位置不同。 WindowsmacOSLinux 在 Linux 上，部署配置文件以 JSON 格式存储。 配置文件的位置是： /etc/rancher-desktop/defaults.json /etc/rancher-desktop/locked.json ~/.config/rancher-desktop.defaults.json ~/.config/rancher-desktop.locked.json 将所有当前设置转换为部署配置文件​ 由于部署配置文件以 JSON 格式存储，因此创建配置文件最简单的方法是将当前应用程序设置保存到配置文件位置，然后使用文本编辑器微调配置文件。 rdctl list-settings &gt; ~/.config/rancher-desktop.defaults.json 默认使用 “moby” 容器引擎并禁用 Kubernetes​ ~/.config/rancher-desktop.defaults.json { &quot;containerEngine&quot;: { &quot;name&quot;: &quot;moby&quot; }, &quot;kubernetes&quot;: { &quot;enabled&quot;: false } } 将镜像列表锁定为仅允许 “busybox” 和 “nginx”​ ~/.config/rancher-desktop.locked.json { &quot;containerEngine&quot;: { &quot;allowedImages&quot;: { &quot;enabled&quot;: true, &quot;patterns&quot;: [&quot;busybox&quot;,&quot;nginx&quot;] } } }  "},{"title":"已知问题和限制​","type":1,"pageTitle":"部署配置文件","url":"1.8/getting-started/deployment#已知问题和限制","content":"containerEngine.allowedImages 是当前唯一可以锁定的设置。在 macOS 上，格式不正确的配置文件会被忽略，而不是阻止应用程序加载。无法通过部署配置文件设置 diagnostics.showMuted（Windows 上的 WSL.integrations）。在 macOS 和 Linux 上，如果 “defaults” 配置文件未为 application.pathManagementStrategy 配置值，则仍会显示一个简短的首次运行对话框。 "},{"title":"使用 k3d 创建多节点集群","type":0,"sectionRef":"#","url":"1.8/how-to-guides/create-multi-node-cluster","content":"","keywords":""},{"title":"启动多节点集群的步骤​","type":1,"pageTitle":"使用 k3d 创建多节点集群","url":"1.8/how-to-guides/create-multi-node-cluster#启动多节点集群的步骤","content":"确保在 Kubernetes Settings 页面中选择了 dockerd(moby) 作为容器运行时。 安装 k3d。 wgetcurl wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash  运行 k3d cluster create 命令来启动多节点集群。例如： k3d cluster create two-node-cluster --agents 2 k3d cluster create three-node-cluster --agents 3  k3d 将新创建的集群设置为 active。你可以通过 kubectl config use-context 命令来切换集群。例如： kubectl config use-context k3d-two-node-cluster  要了解有关 k3s 和 k3d 的更多信息，请参阅这些项目的文档（k3s 文档 和 k3d 文档）。 ⚠️ 请注意，k3d 创建的集群不是通过 Rancher Desktop GUI 管理的。 "},{"title":"Increasing Open File Limit","type":0,"sectionRef":"#","url":"1.8/how-to-guides/increasing-open-file-limit","content":"","keywords":""},{"title":"macOS & Linux Steps​","type":1,"pageTitle":"Increasing Open File Limit","url":"1.8/how-to-guides/increasing-open-file-limit#macos--linux-steps","content":"First, use lima override.yaml to write the provisioning scripts. Create override.yaml file at below path macOSLinux ~/Library/Application Support/rancher-desktop/lima/_config/override.yaml  You can then use the script below to increase the ulimit for containers inside your created override.yaml file. provision: - mode: system script: | #!/bin/sh cat &lt;&lt;'EOF' &gt; /etc/security/limits.d/rancher-desktop.conf * soft nofile 82920 * hard nofile 82920 EOF  If using the Elastic platform, please use the script below to set the vm.max_map_count parameter as well. provision: - mode: system script: | #!/bin/sh cat &lt;&lt;'EOF' &gt; /etc/security/limits.d/rancher-desktop.conf * soft nofile 82920 * hard nofile 82920 EOF sysctl -w vm.max_map_count=262144  Lastly, please stop and restart Rancher Desktop in order for the updated limits to take effect. "},{"title":"Windows Steps​","type":1,"pageTitle":"Increasing Open File Limit","url":"1.8/how-to-guides/increasing-open-file-limit#windows-steps","content":"First, be sure that you have run Rancher Desktop at least once in order for the configurations to initialize. You can then create a provisioning script, say map_count.start, at %AppData%\\rancher-desktop\\provisioning with the below code to update the open file limit by increasing the max_map_count parameter. #!/bin/sh sysctl -w vm.max_map_count=262144  Lastly, please stop and restart Rancher Desktop for these changes to take effect. "},{"title":"配置脚本","type":0,"sectionRef":"#","url":"1.8/how-to-guides/provisioning-scripts","content":"","keywords":""},{"title":"macOS & Linux​","type":1,"pageTitle":"配置脚本","url":"1.8/how-to-guides/provisioning-scripts#macos--linux","content":"在 macOS 和 Linux 上，你可以使用 lima override.yaml 来编写配置脚本。 在以下路径创建 override.yaml 文件。 macOSLinux ~/Library/Application Support/rancher-desktop/lima/_config/override.yaml  在上一步中创建的 override.yaml 文件中编写配置脚本。例如，你可以使用以下脚本来增加容器的 ulimit： provision: - mode: system script: | #!/bin/sh cat &lt;&lt;'EOF' &gt; /etc/security/limits.d/rancher-desktop.conf * soft nofile 82920 * hard nofile 82920 EOF  你还可以使用 override.yaml 来覆盖/修改 lima 配置设置。下面的示例创建了额外的挂载： mounts: - location: /some/path writable: true  "},{"title":"Windows​","type":1,"pageTitle":"配置脚本","url":"1.8/how-to-guides/provisioning-scripts#windows","content":"注意：在 Windows 上，你只能为 1.1.0 或更高版本的 Rancher Desktop 使用这些配置脚本。 你需要至少运行 Rancher Desktop 一次以允许它创建配置。 打开 %AppData%\\\\rancher-desktop\\\\provisioning 目录。完整路径的示例：C:\\\\Users\\\\Joe\\\\AppData\\\\Roaming\\\\rancher-desktop\\\\provisioning。 请注意，任何文件扩展名为 .start 的文件（例如 k3s-overrides.start）都可以在 Rancher Desktop 启动 Kubernetes 后端（如果启用） 时执行。此类文件将在 Rancher Desktop WSL 上下文中运行。 .start 文件的示例流程： Rancher Desktop 内部设置运行配置脚本在 UI 中启用 dockerd 或 containerdKubernetes (K3s) 例如，使用 %AppData%\\\\rancher-desktop\\\\provisioning\\\\insecure-registry.start 将允许 nerdctl 默认使用不安全的镜像仓库： #!/bin/sh mkdir -p /etc/nerdctl cat &gt; /etc/nerdctl/nerdctl.toml &lt;&lt;EOF insecure_registry = true EOF  请注意，文件扩展名为 .stop 的文件（例如 wipe-data.stop）可以在 Rancher Desktop 关闭 Kubernetes 后端（如果启用）后 执行。此类文件将在相同的 Rancher Desktop WSL 上下文中运行。 .stop 文件的示例流程： 停止 k3s、dockerd 或 containerd运行取消配置的脚本 重要提示：脚本需要以 Unix 行结尾保存，未完成行尾转换，且具有 DOS 行结尾的文件可能会产生意想不到的结果。你可以使用配置脚本更改的内容是有限制的。例如，你不能使用配置脚本更改 WSL2 上的硬 ulimit。请谨慎使用配置脚本，如果你对配置脚本有任何具体问题，请随时在 Slack/Github 上与 Rancher Desktop 团队联系。 "},{"title":"Hello World 示例","type":0,"sectionRef":"#","url":"1.8/how-to-guides/hello-world-example","content":"","keywords":""},{"title":"示例 1 - 构建镜像并运行容器​","type":1,"pageTitle":"Hello World 示例","url":"1.8/how-to-guides/hello-world-example#示例-1---构建镜像并运行容器","content":"创建文件夹​ mkdir hello-world cd hello-world  创建一个空白的 Dockerfile​ 在 Windows 上，创建一个名为 Dockerfile 的空白文件。 在 Linux 上，你可以使用以下命令创建一个空白的 Dockerfile: vi Dockerfile  使用以下命令填充 Dockerfile​ FROM alpine CMD [&quot;echo&quot;, &quot;Hello World!!&quot;]  构建并运行镜像以进行验证​ nerdctldocker nerdctl build --tag helloworld:v1.0 . nerdctl images | grep helloworld nerdctl run --rm helloworld:v1.0 # 移除镜像 nerdctl rmi helloworld:v1.0  "},{"title":"示例 2 - 构建镜像并将容器部署到 Kubernetes​","type":1,"pageTitle":"Hello World 示例","url":"1.8/how-to-guides/hello-world-example#示例-2---构建镜像并将容器部署到-kubernetes","content":"根据需要将 Kubernetes Settings 面板中的 Container Runtime 切换为 dockerd 或 containerd。 创建一个文件夹并添加一个示例 index.html 文件，如下所示​ mkdir nginx cd nginx echo &quot;&lt;h1&gt;Hello World from NGINX!!&lt;/h1&gt;&quot; &gt; index.html  创建一个空白的 Dockerfile​ 在 Windows 上，创建一个名为 Dockerfile 的空白文件。 在 Linux 上，你可以使用以下命令创建一个空白的 Dockerfile: vi Dockerfile  使用以下命令填充 Dockerfile​ FROM nginx:alpine COPY . /usr/share/nginx/html  使用本地代码构建镜像​ ⚠️ 注意：你需要将 --namespace k8s.io 标志传递给 nerdctl build 命令，以便 nerdctl 构建镜像并使其在 k8s.io 命名空间中可用。 nerdctldocker nerdctl --namespace k8s.io build --tag nginx-helloworld:latest . nerdctl --namespace k8s.io images | grep nginx-helloworld  部署到 Kubernetes​ 运行以下命令，从而使用在上一步中构建的镜像创建和运行 pod。 ⚠️ 注意：你需要传递 --image-pull-policy=Never 标志以使用带有 :latest 标签的本地镜像（:latest 标签将始终尝试从远程仓库中拉取镜像）。 kubectl run hello-world --image=nginx-helloworld:latest --image-pull-policy=Never --port=80 kubectl port-forward pods/hello-world 8080:80  在浏览器中访问 localhost:8080，你将看到 Hello World from NGINX!! 的信息。如果你想留在命令行上，请使用 curl localhost:8080。 删除 pod 和镜像​ nerdctldocker kubectl delete pod hello-world # 移除镜像 nerdctl --namespace k8s.io rmi nginx-helloworld:latest  "},{"title":"Rancher Desktop 上的 Rancher","type":0,"sectionRef":"#","url":"1.8/how-to-guides/rancher-on-rancher-desktop","content":"Rancher Desktop 上的 Rancher 虽然 Rancher 和 Rancher Desktop 的名字里都包含 Rancher，但它们的功能是有差别的。Rancher Desktop 不是桌面版 Rancher。Rancher 是管理 Kubernetes 集群的强大解决方案，而 Rancher Desktop 运行本地 Kubernetes 和容器管理平台，这两种解决方案相辅相成。例如，你可以将 Rancher 作为工作负载安装在 Rancher Desktop 中。 本指南概述了使用 container runtime 或 helm（本地环境）在 Rancher Desktop 上安装 Rancher Dashboard 的步骤： 注意：如果实用程序（例如：helm）或你的工作负载版本与会话中的 Kubernetes 版本不兼容，你可能会遇到问题。作为一个潜在的修复，你可以通过 Preferences &gt; Kubernetes 对话框切换到兼容的 Kubernetes 版本。支持矩阵页面上列出了 Rancher 支持的 Kubernetes 平台。 nerdctldockerhelm nerdctl run --privileged -d --restart=always -p 8080:80 -p 8443:443 rancher/rancher 安装需要几分钟才能完成。安装后，你可以访问 Rancher UI，如下所示： 通过 container runtime 安装：https://localhost:8443/通过 helm 安装：https://rancher.rd.localhost/ nerdctldocker 要访问 Rancher UI，你需要获取引导密码： 1：获取 Rancher UI 容器 ID/名称： nerdctl ps 2：获取引导密码： nerdctl logs [rancherContainerID] 2&gt;&amp;1 | grep &quot;Bootstrap Password:&quot; 3：引导密码示例： [INFO] Bootstrap Password: 7fwjjw4ldcmnq8ghns22q7nhl5lrznwwt9p9vjljfjc6tqbcvhxmwq 按照向导说明并单击 Continue 以进入 Rancher UI 主页面。 在 Rancher UI 中，你可以管理 local 集群、节点等。如需更多信息，请参阅 Rancher 文档。","keywords":""},{"title":"离线运行","type":0,"sectionRef":"#","url":"1.8/how-to-guides/running-air-gapped","content":"","keywords":""},{"title":"Windows 用户须知​","type":1,"pageTitle":"离线运行","url":"1.8/how-to-guides/running-air-gapped#windows-用户须知","content":"本文档的环境变量使用 Powershell 语法。如果你使用的是 Command shell，看到 $env:FOO 环境变量的引用时，请将其替换为 %FOO%。 "},{"title":"网络敏感区域​","type":1,"pageTitle":"离线运行","url":"1.8/how-to-guides/running-air-gapped#网络敏感区域","content":"Rancher Desktop 假设有两个的区域的网络可用，并会在离线的情况下进行恢复： 将 Kubernetes k3s 镜像拉入 k3s 缓存目录 使用 kuberlr 作为对 kubectl 的版本感知包装器，因此客户端与 Kubernetes Server 的差异不会超过一个次要版本。 "},{"title":"现有 Deployment​","type":1,"pageTitle":"离线运行","url":"1.8/how-to-guides/running-air-gapped#现有-deployment","content":"如果 Rancher Desktop 安装在最初就具有网络访问权限的主机上，在关闭网络连接后，Rancher Desktop 仍能在该主机上运行。但是，下拉菜单中可用的 Kubernetes 版本会限制为已下载并存储在缓存中的版本。 由于 kuberlr 包装器（Windows 用户需要为每个可执行实用程序文件添加 .exe 后缀），因此使用 kubectl 客户端会存在一个问题。 在这种情况下，虽然我们的系统在初始化时已经连接到互联网，但是后续使用时会让主机脱机使用。 假设 rancher-desktop 缓存中有三个版本的 k3s： 1.24.3 1.21.14 1.19.16 假设在这个系统上我们只有在使用 1.24.3 和 1.21.14 时运行了 kubectl。换言之，~/.kuberlr/PLATFORM-ARCH/ 目录（Windows 上为$env:HOMEDRIVE%\\$env:HOMEPATH/.kuberlr/windows-amd64）只包含两个文件： kubectl1.24.3 kubectl1.21.14 如果我们将系统脱机，并通过 UI 切换到 Kubernetes 1.19.16，则系统会在运行 kubectl 的时候失败。 问题在于 kubectl 是 kuberlr 的别名，它会尝试下载 kubectl 1.19.16 并将它安装到 .kuberlr 目录中，但却无法进行访问。 因此在这种情况下，最好的方法是选择缓存中每个可用的 Kubernetes 版本，并运行 kubectl --context rancher-desktop cluster-info 来确保安装了适当版本的 kubectl 客户端，以便在断开连接时能连接系统。 你可以手动安装版本化的 kubectl，具体内容会在下一节中介绍。 "},{"title":"准备离线系统​","type":1,"pageTitle":"离线运行","url":"1.8/how-to-guides/running-air-gapped#准备离线系统","content":"此处假设你有某种移动媒体，你可以将其填充到联网系统上，然后移至离线系统中。 要让 Rancher Desktop 离线运行，你需要填充两个目录： Cache 目录​ 要填充源磁盘（我们在此将其称为 %SOURCEDISK%，实际上它也可能是某种可移动设备，例如 USB 驱动器），你需要以下文件： k3s-versions.json：该文件由 Rancher Desktop 创建。它从 https://update.k3s.io/v1-release/channels 读取原始 JSON 文件并将其转换为不同类型的 JSON 文件。目前没有实用程序来进行这种转换。获取此文件的最简单方法是在连接的系统上运行 Rancher Desktop 并保存 CACHE/k3s-versions.json 文件（请参阅下方不同系统的 CACHE 位置）。Kubernetes K3s 镜像的 Tar 包。它们列在 https://github.com/k3s-io​​/k3s/releases。如果你使用的是 k3s v1.26.1 及更高版本，你需要为 AMD/Intel 主机下载 k3s-airgap-images-amd64.tar，为 M1 主机下载 k3s-airgap-images-arm64.tar，或下载相应的 *.tar.zst 压缩包。最后，你需要下载所选版本的 k3s 可执行文件。例如，以下命令将让你离线的情况下使用 K3s v1.24.3 build 1： cd .../CACHE mkdir v1.24.3+k3s1 cd v1.24.3+k3s1 wget https://github.com/k3s-io/k3s/releases/download/v1.24.3%2Bk3s1/k3s-airgap-images-amd64.tar wget https://github.com/k3s-io/k3s/releases/download/v1.24.3%2Bk3s1/sha256sum-amd64.txt wget https://github.com/k3s-io/k3s/releases/download/v1.24.3%2Bk3s1/k3s  WindowsmacOSLinux 在 Linux 上，缓存目录是 $HOME/.cache/rancher-desktop，你可以运行以下命令进行填充： CACHEDIR=$HOME/.cache/rancher-desktop mkdir -p $CACHEDIR/k3s cp $SOURCEDISK/k3s-versions.json $CACHEDIR/ cp -r $SOURCEDISK/v&lt;MAJOR&gt;.&lt;MINOR&gt;.&lt;PATCH&gt;+k3s&lt;BUILD&gt; $CACHEDIR/k3s/  kuberlr 目录​ 这个目录的位置更直接，在所有平台上，该目录都位于 HOME/.kuberlr/PLATFORM-ARCH，其中： HOME 是主目录。通常情况下，在 Windows 上为 $env:HOMEDRIVE%\\$env:HOMEPATH，在 macOS 和 Linux 上为 ~ 或 $HOME。PLATFORM 是 windows、linux 或 darwin。ARCH 在 M1 主机上是 aarch64，在其它主机上是 amd64。 要进行填充，请确定你要使用的 Kubernetes 版本，并联网下载适当的可执行文件。它们将位于： WindowsmacOSLinux https://dl.k8s.io/VERSION/bin/PLATFORM/CPU/kubectl 其中： VERSION 的格式是 vMAJOR.MINOR.PATCH（如 v1.22.1）PLATFORM 是 darwin、linux 或 windowsCPU 在 M1 主机上是 arm64，在其他主机上是 amd64 例如，要获取使用 Kubernetes v1.22 且用于 Windows 的 kubectl，此 Windows 命令 shell（不是 PowerShell）命令会将其放在 SOURCEDISK 上： wget -O %SOURCEDISK/kubectl1.22.1.exe https://dl.k8s.io/v1.22.1/bin/windows/amd64/kubectl.exe  版本说明​ Kubectl 客户端保证使用主要版本相同的 Server，且它们最多只相差一个次要版本。例如，如果你的组织使用的 Kubernetes 版本是 v1.21.x、v1.22.x 和 v1.23.x，对于任何 x 补丁版本，你只需在 .kuberlr 目录中安装 kubectl1.22.x 即可。但是，如果你复制一个 Kubernetes v1.24.x 到 CACHE 目录，你需要确保 .kuberlr 目录中也有一个兼容的 kubectl（v1.23.x、v1.24.x 或 v1.25.x 中的其中一个即可）。 "},{"title":"Skaffold 与 Rancher Desktop","type":0,"sectionRef":"#","url":"1.8/how-to-guides/skaffold-and-rancher-desktop","content":"Skaffold 与 Rancher Desktop Skaffold 是一个命令行工具，用于 Kubernetes 原生应用程序的持续开发。Skaffold 处理构建、推送和部署应用程序的工作流，并提供用于创建 CI/CD 流水线的构建块。它能让你专注于在本地迭代你的应用程序，Skaffold 则能持续部署到你的本地或远程 Kubernetes 集群。要了解有关 Skaffold 的更多信息，请参阅 Skaffold 项目文档。 为了演示使用 Rancher Desktop 设置 Skaffold 的步骤，Rancher Desktop 文档在此处提供了一个 nodejs 应用程序示例。 重要提示：Skaffold 仅适用于 dockerd (Moby)。因此，请确保在 Rancher Desktop UI 的 Kubernetes Settings 面板中选择了 dockerd 作为运行时。 访问 https://skaffold.dev/docs/install/ 安装 Skaffold。 克隆 Rancher Desktop 文档仓库并在终端中导航到 express-sample，如下所示： cd docs.rancherdesktop.io/assets/express-sample 运行 skaffold init。 根据 Skaffold 文档 的介绍，skaffold init 会遍历你的项目目录并查找 build 配置文件（例如 Dockerfile、build.gradle /pom.xml、package.json、requirements.txt 或 go.mod）。 在我们的示例中，我们将选择 Dockerfile 和 package.json。这将生成你可以修改的初始配置文件。出现提示时，选择 yes 将你的配置写入 skaffold.yaml。 在你的编辑器中，查看你的 app.js 和 manifests.yaml 文件。请注意，在 manifests.yaml 中，你将拥有一个 deployment 配置和一个 service 配置。在测试场景下，仅需要 1 个 replica 即可。 回到你的终端，你会注意到你有两个选项，分别是 skaffold run（允许你构建和部署）和 skaffold dev （允许你进入开发模式自动重新部署）。在此示例中，我们将使用 skaffold dev。 由于你需要对镜像仓库具有推送访问权限，因此你可以使用 docker 登录，也可以设置本地镜像仓库： Docker Hub本地镜像仓库 在运行 skaffold dev 之前，如果你有 Docker Hub 账号，请使用你的 docker 登录。然后，在文件 skaffold.yaml 和 manifests.yaml 中，将 matamagu/express-sample 替换为 YOUR_DOCKER_HUB_USERNAME/express-sample，这是因为 skaffold dev 会将构建的镜像推送到 DockerHub。 在进行开发时，Skaffold 将检测所有更改，并会自动再次执行构建和部署的过程。你将能够看到集群中的任何更改。 在浏览器中访问 localhost:3000，你将看到 express-sample 界面。","keywords":""},{"title":"设置 NGINX Ingress Controller","type":0,"sectionRef":"#","url":"1.8/how-to-guides/setup-NGINX-Ingress-Controller","content":"","keywords":""},{"title":"步骤​","type":1,"pageTitle":"设置 NGINX Ingress Controller","url":"1.8/how-to-guides/setup-NGINX-Ingress-Controller#步骤","content":"在 Kubernetes Settings 页面取消选中 Enable Traefik 来禁用 Traefik。你可能需要退出并重新启动 Rancher Desktop 才能使更改生效。 通过 helm 或 kubectl 部署 NGINX Ingress Controller： helmkubectl helm upgrade --install ingress-nginx ingress-nginx \\ --repo https://kubernetes.github.io/ingress-nginx \\ --namespace ingress-nginx --create-namespace  等待 ingress pod 运行： kubectl get pods --namespace=ingress-nginx  创建示例 deployment 和关联的 service： kubectl create deployment demo --image=nginx --port=80 kubectl expose deployment demo  创建 ingress 资源。以下命令使用了映射到 localhost 的主机： kubectl create ingress demo-localhost --class=nginx --rule=&quot;demo.localdev.me/*=demo:80&quot;  将本地端口转发到 Ingress Controller： kubectl port-forward --namespace=ingress-nginx service/ingress-nginx-controller 8080:80  现在，如果你访问 http://demo.localdev.me:8080/ ，你应该会看到 NGINX 的欢迎页面。 "},{"title":"使用 VS Code Docker 扩展来调试容器应用程序","type":0,"sectionRef":"#","url":"1.8/how-to-guides/vs-code-docker","content":"","keywords":""},{"title":"调试容器化应用程序的步骤​","type":1,"pageTitle":"使用 VS Code Docker 扩展来调试容器应用程序","url":"1.8/how-to-guides/vs-code-docker#调试容器化应用程序的步骤","content":"安装并启动 Rancher Desktop。从 Kubernetes Settings 菜单中，将 Container Runtime 选为 dockerd (moby)：  安装并启动 Visual Studio Code 或 Visual Studio Code Insiders。本教程使用 Visual Studio Code：  在扩展市场中安装 Docker 扩展。  你可以使用此 Github 仓库 (https://github.com/bwateratmsft/samples) 中提供的示例。克隆此仓库并在 VS Code 会话中打开 expressapp 文件夹。 打开命令面板（Ctrl+Shift+P、F1 或 Cmd+Shift+P）并运行 “Add Docker Files to Workspace”。由于这是一个 Express 应用程序，因此选择 Node.js 作为应用程序平台，选择 3000（或任何其他可用端口）作为 port。由于这是一个简单的示例，请在 Include optional Docker Compose files 选择 No。此步骤添加了调试应用程序所需的 Dockerfile 和 Launch Configuration。  在代码中插入断点：  在顶部的 Debug 窗口中，将活动调试配置切换为 Docker Node.js Launch。按 F5 以 Debug 模式启动应用程序容器。示例应用程序的登录页面将在你的浏览器中打开，而且代码会在断点处停止执行。你可以在这里调试应用程序，就像应用程序运行在你的主机上一样。   有时候，由于调试进程可能尚未启动，因此应用程序可能不会在第一次运行时在设置的断点处中断。在这种情况下，你可以刷新浏览器来再次触发执行，从而命中断点。你还可以通过在 task.json 文件中设置 inspectMode: 'break' 属性来避免此行为，从而防止应用程序在连接调试器之前运行。 在某些主机上，防火墙设置可能会阻止调试进程在主机和容器进程之间建立连接。在这种情况下，你可以添加防火墙规则，以允许运行容器的 VM 与运行 VS Code 会话的主机进行通信。在 Windows 上，你可以通过在特权 powershell 中运行以下命令来添加防火墙规则： New-NetFirewallRule -Action Allow -Description 'Allow communication from WSL containers' -Direction Inbound -Enabled True -InterfaceAlias 'vEthernet (WSL)' -Name 'WSL Inbound' -DisplayName 'WSL Inbound'  "},{"title":"传输容器镜像","type":0,"sectionRef":"#","url":"1.8/how-to-guides/transfer-container-images","content":"","keywords":""},{"title":"步骤​","type":1,"pageTitle":"传输容器镜像","url":"1.8/how-to-guides/transfer-container-images#步骤","content":"1. 将源环境的镜像保存为 tar 包。 nerdctldocker 保存单个镜像 nerdctl save -o local-image.tar image:tag 保存多个镜像 nerdctl save -o local-images.tar image1:tag1 image2:tag2 将所有镜像保存在命名空间中 下面两个命令使用 jq 进行 JSON 解析。长命令会执行以下步骤： nerdctl -n k8s.io image ls 子命令会获取 k8s.io 命名空间中所有镜像的列表，因此不包括其他命名空间的镜像（例如 default）。jq 子命令会过滤并格式化上一步获取的镜像列表。 命令的 select(.Repository!=\\&quot;&lt;none&gt;\\&quot;) 部分会跳过仓库值为 &lt;none&gt; 的镜像。根据镜像标签的值是否为 &lt;none&gt;，命令的 if (.Tag==&quot;&lt;none&gt;&quot;) then .Repository else (.Repository+&quot;:&quot;+.Tag) end') 部分会将镜像的名称格式化为 &lt;Repository&gt; 或 &lt;Repository&gt;:&lt;Tag&gt;。 最后，命令的 nerdctl -n k8s.io save -o all-local-images-in-namespace.tar 部分会将前两步过滤和格式化的镜像列表保存到 tar 文件中。 BashPowerShell nerdctl -n k8s.io save -o all-local-images-in-namespace.tar $(nerdctl -n k8s.io image ls --format '{{json .}}' | jq -r 'select(.Repository!=&quot;&lt;none&gt;&quot;) | if (.Tag==&quot;&lt;none&gt;&quot;) then .Repository else (.Repository+&quot;:&quot;+.Tag) end')  2. 使用目标环境中保存的 tar 包加载镜像。 nerdctldocker nerdctl load &lt; local-images.tar  "},{"title":"架构","type":0,"sectionRef":"#","url":"1.8/references/architecture","content":"架构 Ranche Desktop 是一个基于 Electron 的应用程序，它包装了其他工具，同时还提供了简单的用户体验。在 macOS 和 Linux 上，Rancher Desktop 利用虚拟机运行 containerd 或 dockerd 和 Kubernetes。适用于 Linux v2 的 Windows Subsystem 可用于 Windows 系统。你只需要下载并运行该应用程序即可。","keywords":""},{"title":"VS Code Remote Containers","type":0,"sectionRef":"#","url":"1.8/how-to-guides/vs-code-remote-containers","content":"","keywords":""},{"title":"使用示例开发容器的步骤​","type":1,"pageTitle":"VS Code Remote Containers","url":"1.8/how-to-guides/vs-code-remote-containers#使用示例开发容器的步骤","content":"安装并启动 Rancher Desktop。从 Kubernetes Settings 菜单中，将 Container Runtime 选为 dockerd (moby)：  安装并启动 Visual Studio Code 或 Visual Studio Code Insiders。本教程使用 Visual Studio Code：  安装 Remote Development 扩展包：  安装扩展后，你将在侧栏中看到扩展项，左下角有一个显示命令面板的绿色按钮，其中包含与 Remote Development 相关的各种选项/命令：  Microsoft 在此 GitHub 仓库 (https://github.com/microsoft/vscode-dev-containers.git) 中提供了许多示例开发容器。将此仓库克隆到你的本地主机： git clone https://github.com/microsoft/vscode-dev-containers.git  单击窗口左下角的 按钮，然后从命令面板中选择 Open Folder in Container...。浏览克隆仓库中的其中一个示例，例如 javascript-node：   选择示例后，你会在容器加载时看到进度通知 ，容器启动成功后，左下角会显示容器名称 。 容器启动后，在 VS Code IDE 中按 F5 启动示例应用程序。你将看到应用程序已启动并在 localhost:3000 上提供服务：  恭喜！你已经使用 Rancher Desktop 和 VS Code 成功加载并运行了一个示例开发容器。 "},{"title":"后续步骤​","type":1,"pageTitle":"VS Code Remote Containers","url":"1.8/how-to-guides/vs-code-remote-containers#后续步骤","content":"Microsoft 在此处提供了在各种场景中使用开发容器的大量文档。请参阅以下教程，尝试使用与你的需求类似的用例。 现在，体验使用 Rancher Desktop 进行容器化的快乐吧！ "},{"title":"捆绑的实用程序","type":0,"sectionRef":"#","url":"1.8/references/bundled-utilities","content":"捆绑的实用程序 Rancher Desktop 使用多个实用程序/子系统作为依赖项。例如，docker CLI 会与 dockerd 交互，helm 会管理 Chart，而 trivy 用于容器镜像扫描。本文介绍了特定 Rancher Desktop 版本包括的捆绑实用程序版本信息。 Rancher Desktop 版本\t依赖版本v1.8.0 amazon-ecr-credential-helper: 0.6.0 docker: 23.0.1 docker-buildx: 0.10.4 docker-compose: 2.16.0 docker-credential-helpers: 0.6.4 helm: 3.11.2 kuberlr: 0.4.2 nerdctl: 1.2.1 trivy: 0.38.3 v1.7.0 amazon-ecr-credential-helper: 0.6.0 docker: 20.10.21 docker-buildx: 0.9.1 docker-compose: 2.14.0 docker-credential-helpers: 0.6.4 helm: 3.10.2 kuberlr: 0.4.2 nerdctl: 1.0.0 trivy: 0.35.0 v1.6.2\t1.6.2 版本中没有更新的依赖项 v1.6.1\t1.6.1 版本中没有更新的依赖项 v1.6.0 amazon-ecr-credential-helper: 0.6.0 docker: 20.10.17 docker-buildx: 0.9.1 docker-compose: 2.11.1 docker-credential-helpers: 0.6.4 helm: 3.9.4 kuberlr: 0.4.2 nerdctl: 0.23.0 trivy: 0.32.0 ","keywords":""},{"title":"故障排除提示","type":0,"sectionRef":"#","url":"1.8/troubleshooting-tips","content":"故障排除提示 此页面提供了 Rancher Desktop 相关问题的故障排除提示。 问：为什么我在 Rancher Desktop 的 WSL 集成页面下看不到我的 WSL 发行版？​ 答：你可能使用的是 WSL 1 发行版。Rancher Desktop 仅支持 WSL 2 发行版。你可以通过运行 wsl --set-version &lt;distro-name&gt; 2 命令将 WSL 1 发行版转换为 WSL 2 发行版。你还可以运行 wsl --set-default-version 2 命令来将你之后可能安装的所有发行版设置为使用 WSL 2。 问：运行 kubectl config get-contexts 时，我没有看到 Rancher Desktop 的条目，它在哪里？​ 答：Rancher Desktop 将配置放置在默认位置 ~/.kube/config。你的 KUBECONFIG 环境变量可能被设置为在其他位置查找配置文件。 问：Rancher Desktop 卡在 Waiting for Kubernetes API，我该怎么办？​ 答：没有额外信息我们很难确定原因。导航到 Troubleshooting 选项卡并访问日志。然后，转到 Rancher Desktop GitHub 页面并提交附加了你的日志的 Issue。 问：安装 Rancher Desktop 并卸载 Docker Desktop 后，我无法再运行 docker compose，为什么？​ 答：这是 Rancher Desktop 早期版本（1.1.0 之前）的问题。Rancher Desktop 1.1.0 及以上版本附带了 docker-compose，并在 ~/.docker/cli-plugins 提供了 CLI 插件。我们强烈建议你升级到最新版本的 Rancher Desktop。 如果你仍然无法使用 docker-compose，请在 Github上报告这个 Bug。 问：我使用 Homebrew 来安装 Rancher Desktop，但是 brew install rancher-desktop 提示失败，为什么？​ 答：Homebrew cask 的命名约定规定了 -desktop 后缀要从 cask formula 名称中删除。因此，请改用 brew install rancher。 问：尝试在 WSL 上使用 Docker 时，如何修复 permission denied 错误？​ 答：你需要写权限才能访问 docker socket。解决这个问题的方法有很多，以下是常见的方法之一。使用 Ubuntu WSL 命令行： sudo groupadd docker sudo adduser $USER docker sudo chown root:docker /var/run/docker.sock sudo chmod g+w /var/run/docker.sock newgrp docker 问：如何解决 Linux 上的 kubectl: command not found 问题？​ A: 默认情况下，Rancher Desktop 会在 Linux 的 /home/&lt;user&gt;/.local/bin 下创建 kubectl、docker、helm 和 nerdctl 二进制文件的符号链接。要直接从控制台调用这些命令，你可以在控制台中执行以下命令，并执行注销和登录来将目录添加到你的 PATH 环境变量中： echo &quot;export PATH=\\$PATH:/home/$(whoami)/.local/bin&quot; &gt;&gt; ~/.bashrc 问：使用 nerdctl run 运行容器时，如何修复 FATA[0005] subnet 10.4.0.0/24 overlaps with other one on this address space 问题？​ 答：如果路由规则的 IP 地址来自 Iptables 上的冲突子网，你将看到此错误。冲突的路由可能来自主机网络（桥接模式）或 Kubernetes 网络。此问题的快速解决方法是通过命令 wsl --shutdown 关闭 WSL。 警告：关闭 WSL 将停止所有其他发行版以及 rancher-desktop 发行版。 问：在 Windows 上将现有 MSI 降级到较旧的 EXE 版本（1.6.x 或更早版本）时，如何修复 Installation Aborted 错误？​ 答：在 MSI 卸载过程中，如果应该删除的 Windows 注册表项 HKEY_LOCAL_MACHINE\\\\System\\\\CurrentControlSet\\\\Services\\\\EventLog\\\\Application\\\\RancherDesktopPrivilegedService 没有被删除，你将看到此错误。请手动删除注册表项并尝试安装 EXE 版本。你可以在特权 shell 中运行以下命令来删除注册表项： reg.exe delete HKLM\\System\\CurrentControlSet\\Services\\EventLog\\Application\\RancherDesktopPrivilegedService /reg:64 /f 问：为什么启动 Cluster Dashboard 时会出现空白屏幕？​ 答：Cluster Dashboard 可能无法正常运行，因为你主机上的另一个进程正在使用 Dashboard 进程（steve）所依赖的 9080 或 9443 端口。要解决此问题，请识别并终止使用这些端口的进程。你可以使用下面的命令来识别使用主机上特定端口的进程。请注意，在 macOS 和 Linux 上，Rancher Dashboard 进程名为 steve，而在 Windows 上，它是 steve.exe。如果 steve 是唯一使用端口 9080 或 9443 的进程，请不要终止它。 查找使用特定端口的进程的命令。 WindowsmacOSLinux netstat -ano | findstr :9443 ","keywords":""},{"title":"使用容器","type":0,"sectionRef":"#","url":"1.8/tutorials/working-with-containers","content":"","keywords":""},{"title":"运行容器​","type":1,"pageTitle":"使用容器","url":"1.8/tutorials/working-with-containers#运行容器","content":"要使用默认的 bridge CNI 网络 (10.4.0.0/24) 运行容器： nerdctldocker nerdctl run -it --rm alpine  要使用 BuildKit 构建镜像： nerdctldocker nerdctl build -t foo /some-dockerfile-directory nerdctl run -it --rm foo  要使用 BuiltKit 进行构建并将输出发送到本地目录： nerdctldocker nerdctl build -o type=local,dest=. /some-dockerfile-directory  "},{"title":"Docker Compose​","type":1,"pageTitle":"使用容器","url":"1.8/tutorials/working-with-containers#docker-compose","content":"Docker Compose 是一个用于定义和运行多容器 Docker 应用程序的工具。 nerdctldocker nerdctl-compose CLI 用于与 docker-compose 兼容： nerdctl compose up -d nerdctl compose down  "},{"title":"暴露端口​","type":1,"pageTitle":"使用容器","url":"1.8/tutorials/working-with-containers#暴露端口","content":"要为容器公开端口 8000： nerdctldocker nerdctl run -d -p 8000:80 nginx  然后，你可以在浏览器中访问 http://localhost:8000/ 来访问容器： 注意：默认情况下，暴露的端口可以在 macOS 和 Linux 上的所有网络接口上访问。然而，在 Windows 上，暴露的端口只能通过 localhost 网络接口访问（参见 issue #1180）。目前的一个解决方法是在 Windows 主机上配置 portproxy，从而将端口公开给其他网络接口。 netsh interface portproxy add v4tov4 listenport=8080 listenaddress=0.0.0.0 connectport=8080 connectaddress=localhost  "},{"title":"定位 Kubernetes 命名空间​","type":1,"pageTitle":"使用容器","url":"1.8/tutorials/working-with-containers#定位-kubernetes-命名空间","content":"你还可以通过 containerd 使用 --namespace 参数来定位 Kubernetes 命名空间。请注意 docker 不使用命名空间。 nerdctl nerdctl --namespace k8s.io build -t demo:latest /code/demos/rd/anvil-app nerdctl --namespace k8s.io ps  "},{"title":"使用镜像","type":0,"sectionRef":"#","url":"1.8/tutorials/working-with-images","content":"","keywords":""},{"title":"常规用法​","type":1,"pageTitle":"使用镜像","url":"1.8/tutorials/working-with-images#常规用法","content":"使用任何一种工具都需要 Rancher Desktop 与适当的容器运行时一起运行。对于 nerdctl，使用 containerd 运行时。对于 docker，使用 Moby 运行时。 要了解所有命令选项并显示帮助文档，运行： nerdctldocker nerdctl -h 与 Docker 不同，containerd 具有自己的命名空间。默认情况下，nerdctl 镜像存储在 default 命名空间中。如果你希望你的镜像可供 Kubernetes 使用，请使用 --namespace k8s.io 或 -n k8s.io CLI 参数。你还可以使用 --namespace &lt;NAMESPACE_NAME&gt; 选项来切换到 default 或其他命名空间。请注意，nerdctl 命名空间独立于 Kubernetes 和 kubectl 命名空间。 "},{"title":"列出镜像​","type":1,"pageTitle":"使用镜像","url":"1.8/tutorials/working-with-images#列出镜像","content":"要查看当前可用的镜像，请运行以下命令： nerdctldocker nerdctl images  "},{"title":"构建镜像​","type":1,"pageTitle":"使用镜像","url":"1.8/tutorials/working-with-images#构建镜像","content":"nerdctldocker 构建镜像与现有工具的操作相似。你可以在具有 Dockerfile（Dockerfile 使用了一个 scratch 镜像）的路径上运行 nerdctl： nerdctl build . [+] Building 0.1s (4/4) FINISHED =&gt; [internal] load build definition from Dockerfile =&gt; =&gt; transferring dockerfile: 31B =&gt; [internal] load .dockerignore =&gt; =&gt; transferring context: 2B =&gt; [internal] load build context =&gt; =&gt; transferring context: 33B =&gt; CACHED [1/1] ADD anvil-app / nerdctl 具有在构建时进行标记的选项以及一些其他选项： nerdctl build -t TAG . 要构建用于 Kubernetes 的镜像，请指定 k8s.io 命名空间，如下所示： nerdctl build -n k8s.io .  "},{"title":"构建本地镜像​","type":1,"pageTitle":"使用镜像","url":"1.8/tutorials/working-with-images#构建本地镜像","content":"为了演示构建本地镜像和运行应用程序的步骤，Rancher Desktop 的 docs 仓库提供了一个示例 nodejs 应用程序。首先，克隆仓库并 cd 到终端中的 assets/express-sample 中。 运行以下命令来使用 Dockerfile 构建镜像： nerdctldocker nerdctl --namespace k8s.io build -t expressapp:v1.0 .  运行以下命令来运行容器： kubectl run --image expressapp:v1.0 expressapp kubectl port-forward pods/expressapp 3000:3000  注意：添加 latest 标签时，请务必同时指定以下内容： imagePullPolicy: Never  "},{"title":"标记镜像​","type":1,"pageTitle":"使用镜像","url":"1.8/tutorials/working-with-images#标记镜像","content":"如果要标记已构建的现有镜像，你可以运行以下命令： nerdctldocker nerdctl tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]  "},{"title":"删除镜像​","type":1,"pageTitle":"使用镜像","url":"1.8/tutorials/working-with-images#删除镜像","content":"要删除镜像，请运行以下命令： nerdctldocker nerdctl rmi IMAGE  "},{"title":"命令参考：rdctl","type":0,"sectionRef":"#","url":"1.8/references/rdctl-command-reference","content":"","keywords":""},{"title":"rdctl 或 rdctl help​","type":1,"pageTitle":"命令参考：rdctl","url":"1.8/references/rdctl-command-reference#rdctl-或-rdctl-help","content":"运行 rdctl 或 rdctl help 查看可用命令的列表： &gt; rdctl help The eventual goal of this CLI is to enable any UI-based operation to be done from the command-line as well. Usage: rdctl [command] Available Commands: api Runs API endpoints directly api /vX Enables you to see the endpoints for a particular version; e.g., v0 completion Generates the autocompletion script for the specified shell help Help about any command list-settings Lists the current settings set Updates selected fields in the Rancher Desktop UI and restart the backend shell Run an interactive shell or a command in a Rancher Desktop-managed VM shutdown Shuts down the running Rancher Desktop application start Start up Rancher Desktop or update its settings version Shows the CLI version Flags: --config-path string config file (default C:\\Users\\GunasekharMatamalam\\AppData\\Roaming\\rancher-desktop\\rd-engine.json) -h, --help help for rdctl --host string default is localhost; most useful for WSL --password string overrides the password setting in the config file --port string overrides the port setting in the config file --user string overrides the user setting in the config file Use &quot;rdctl [command] --help&quot; for more information about a command.  "},{"title":"rdctl api​","type":1,"pageTitle":"命令参考：rdctl","url":"1.8/references/rdctl-command-reference#rdctl-api","content":"运行 rdctl api 全局列出所有端点： $ ../../../resources/darwin/bin/rdctl api / | jq -r . [ &quot;GET /&quot;, &quot;GET /v0&quot;, &quot;GET /v0/settings&quot;, &quot;PUT /v0/settings&quot;, &quot;PUT /v0/shutdown&quot; ]  "},{"title":"rdctl api /vX​","type":1,"pageTitle":"命令参考：rdctl","url":"1.8/references/rdctl-command-reference#rdctl-api-vx","content":"运行 rdctl api /v0 列出指定版本的所有端点： $ rdctl api /v0 | jq -r . [ &quot;GET /v0&quot;, &quot;GET /v0/settings&quot;, &quot;PUT /v0/settings&quot;, &quot;PUT /v0/shutdown&quot; ]  "},{"title":"rdctl api /v0/settings​","type":1,"pageTitle":"命令参考：rdctl","url":"1.8/references/rdctl-command-reference#rdctl-api-v0settings","content":"rdctl api [endpoints] 是对直接使用 API 的用户最有用的命令，因此它们不适合像 rdctl set 一样日常使用。例如： 以下命令 rdctl api /v0/settings --method PUT --body '{&quot;kubernetes&quot;: {&quot;enabled&quot;: false}}'  与以下命令是一样的： rdctl set --kubernetes-enabled=false  只是它没那么简洁和用户友好。 "},{"title":"rdctl list-settings​","type":1,"pageTitle":"命令参考：rdctl","url":"1.8/references/rdctl-command-reference#rdctl-list-settings","content":"CLIAPI 运行 rdctl list-settings 以查看当前的活动配置： &gt; rdctl list-settings { &quot;version&quot;: 4, &quot;kubernetes&quot;: { &quot;version&quot;: &quot;1.22.7&quot;, &quot;memoryInGB&quot;: 2, &quot;numberCPUs&quot;: 2, &quot;port&quot;: 6443, &quot;containerEngine&quot;: &quot;moby&quot;, &quot;checkForExistingKimBuilder&quot;: false, &quot;enabled&quot;: true, &quot;WSLIntegrations&quot;: {}, &quot;options&quot;: { &quot;traefik&quot;: true } }, &quot;portForwarding&quot;: { &quot;includeKubernetesServices&quot;: false }, &quot;images&quot;: { &quot;showAll&quot;: true, &quot;namespace&quot;: &quot;k8s.io&quot; }, &quot;telemetry&quot;: true, &quot;updater&quot;: true, &quot;debug&quot;: false }  "},{"title":"rdctl set​","type":1,"pageTitle":"命令参考：rdctl","url":"1.8/references/rdctl-command-reference#rdctl-set","content":"CLIAPI 运行 rdctl set [flags] 来设置属性。在大多数情况下，Kubernetes 会在运行 set 命令时重置。你可以通过在单个命令中使用链接来设置多个属性。下面是一些参考示例： &gt; rdctl set --kubernetes-enabled=false &gt; rdctl set --container-engine docker --kubernetes-version 1.21.2  "},{"title":"rdctl shutdown​","type":1,"pageTitle":"命令参考：rdctl","url":"1.8/references/rdctl-command-reference#rdctl-shutdown","content":"CLIAPI 运行 rdctl shutdown 来正常关闭 Rancher Desktop： &gt; rdctl shutdown Shutting down.  "},{"title":"rdctl start​","type":1,"pageTitle":"命令参考：rdctl","url":"1.8/references/rdctl-command-reference#rdctl-start","content":"CLIAPI 运行 rdctl start 来确保 Rancher Desktop 按照要求运行和配置： &gt; rdctl start --container-runtime dockerd -- kubernetes-version 1.19.3  "},{"title":"rdctl version​","type":1,"pageTitle":"命令参考：rdctl","url":"1.8/references/rdctl-command-reference#rdctl-version","content":"运行 rdctl version 来查看当前 rdctl CLI 的版本： &gt; rdctl version rdctl client version: 1.0.0, targeting server version: v0  "},{"title":"诊断","type":0,"sectionRef":"#","url":"1.8/ui/diagnostics","content":"诊断 Diagnostics 功能通过在后台运行多项检查来检测环境中的常见问题（例如不满足最低要求、配置错误等），帮助你自行排除和修复 Rancher Desktop 应用程序的问题。 注意：Rancher Desktop 不会将诊断数据发送到任何远程服务器进行处理或存储。 WindowsmacOSLinux 每次启动应用程序时都会运行诊断检查。如果发现任何问题，则失败检查的数量会显示在左侧导航栏中的 Diagnostics 菜单文本的旁边。Diagnostics 选项卡会显示诊断测试的结果，突出显示需要注意的区域，并指导你解决问题。 如果你进行了非标准设置，并且知道这些检查不适用于你的情况，你可以在此选项卡上 mute/unmute 个别检查。你还可以随时重新运行诊断程序，从而验证你对环境所做的更改是否已经解决了问题。","keywords":""},{"title":"通用","type":0,"sectionRef":"#","url":"1.8/ui/general","content":"通用 General 选项卡提供了社区 channel 的信息，用户可以通过这些 channel 联系 Rancher Desktop 团队和社区，并提出问题、报告错误或讨论 Rancher Desktop。 WindowsmacOSLinux","keywords":""},{"title":"镜像","type":0,"sectionRef":"#","url":"1.8/ui/images","content":"","keywords":""},{"title":"Scanning Images​","type":1,"pageTitle":"镜像","url":"1.8/ui/images#scanning-images","content":"此功能使用 Trivy 来扫描你的镜像，从而查找漏洞和配置问题。 要扫描镜像： 从镜像列表中，找到要扫描的镜像。单击 ⋮ &gt; Scan。将显示按严重程度排序的漏洞摘要。单击 &gt; 查看​​每个漏洞的详细信息，其中包括漏洞详情的链接。 "},{"title":"Adding Images​","type":1,"pageTitle":"镜像","url":"1.8/ui/images#adding-images","content":"Pulling Images​ 此选项可以让你将镜像从镜像仓库拉取到你的虚拟机中。 要拉取镜像： 单击右上角的 + 按钮。单击 Pull 选项卡。输入要拉取的镜像的名称。 注意：默认情况下，镜像是从 Docker Hub 中提取的（格式：repo/image[:tag]）。要从其他镜像仓库中拉取，请包含主机名 registry.example.com/repo/image[:tag]。 单击 Pull。 Building Images​ 使用此选项构建镜像并将其添加到你的虚拟机。 要构建镜像： 单击右上角的 + 按钮。单击 Build 选项卡。输入构建的镜像的名称，例如 repo/image、repo/image:tag、registry.example.com/repo/image 或 registry.example.com/repo/image:tag。单击 Build。在文件浏览器中，选择要用来构建镜像的 Dockerfile。 "},{"title":"端口转发","type":0,"sectionRef":"#","url":"1.8/ui/port-forwarding","content":"端口转发 WindowsmacOSLinux 如需转发端口： 找到 Service 并单击 Forward，指定要使用的端口或使用随机分配的端口。点击 ✓ 按钮来确认你的选择。可选：单击 Cancel 来移除分配的端口。","keywords":""},{"title":"容器引擎","type":0,"sectionRef":"#","url":"1.8/ui/preferences/container-engine","content":"","keywords":""},{"title":"General​","type":1,"pageTitle":"容器引擎","url":"1.8/ui/preferences/container-engine#general","content":"为 Rancher Desktop 设置容器运行时。用户可以选择 containerd 为容器提供命名空间，也可以使用 nerdctl 或 dockerd (moby) 来启用 D​​ocker API 和 Docker CLI。一次只能运行一个容器运行时。 WindowsmacOSLinux Container Engine​ 切换到不同容器运行时的时候：使用当前容器运行时构建或拉取的工作负载和镜像在切换的容器运行时不可用。 "},{"title":"Allowed Images​","type":1,"pageTitle":"容器引擎","url":"1.8/ui/preferences/container-engine#allowed-images","content":"Allowed Images 选项卡用于控制可以在 Rancher Desktop 中访问的镜像仓库工件。例如，你可能只想从组织的私有镜像仓库，或仅从组织镜像仓库中特定部门的命名空间中拉取容器镜像。你可以指定镜像名称模式，从而仅允许访问特定镜像仓库和/或仓库的镜像。 WindowsmacOSLinux Allowed image patterns​ 选中 Enable 复选框，这样，Rancher Desktop 在拉取或推送镜像时将应用指定的模式，这意味着只允许名称至少与指定模式之一匹配的镜像。 你可以使用 + 和 - 按钮来添加/删除镜像名称模式。 如何指定 Allowed Image Patterns​ 你可以使用 [registry/][:port/][organization/]repository[:tag] 格式来指定 Allowed Image Pattern（允许的镜像模式）。 如果未指定 Allowed Image Patterns， registry 默认为 Docker Hub (docker.io)。port 默认为 433。Docker Hub 的 organization 默认为 library，不适用于其他镜像仓库。tag 默认为任何内容，不仅仅是 latest。 注意：按 tag 过滤实际上不起作用；相应的摘要 (repository@digest) 也必须添加到允许列表中才行，因此不实用。如果你有需要根据标签进行过滤的用例，请提交 Github issue。 示例​ 模式\t意义busybox\t允许 docker.io 镜像仓库的 library 组织中的 busybox 仓库。 suse/\t允许 docker.io 镜像仓库的 suse 组织中的任何镜像。 注意：仓库末尾的斜杠表示后面跟着单独的一段，例如 suse/nginx，而不是 suse/cap/uaa。 suse//\t允许 docker.io 镜像仓库的 suse 组织中的任何镜像。 注意：仓库末尾的双斜杠表示后面跟着一个或多个段，例如 suse/cap/uaa。 registry.internal:5000\t允许来自 registry.internal:5000 镜像仓库的任何镜像。 registry.suse.com/nginx\t允许来自 registry.suse.com 镜像仓库的镜像 nginx。 注意：DockerHub 之外的镜像仓库没有顶层组织的概念，因此没有默认的 library 组织。 "},{"title":"应用程序","type":0,"sectionRef":"#","url":"1.8/ui/preferences/application","content":"应用程序 WindowsmacOSLinux General​ Administrative Access​ 允许 Rancher Desktop 在启动某些操作时获得管理访问权限（sudo 权限）。这能用于增强功能，包括桥接网络和默认 docker socket 支持。更改会在 Rancher Desktop 下次启动时应用。 Automatic Updates​ 当一个新版本发布时，用户会得到一个通知和升级目标的发行版说明。无论是否启用了自动更新，用户都会收到通知。如果启用此选项，更新会被下载，然后在下次启动 Rancher Desktop 时安装更新。 Statistics​ 该选项允许 Rancher Desktop 收集关于你与 Rancher Desktop 应用程序交互的信息，但不会收集你运行的工作负载等信息。 Behavior​ Startup​ Rancher Desktop 可以作为用户登录的一部分自动启动。同时也将考虑页面中的其他行为设置。 Background​ Rancher Desktop 在后台启动时不会显示应用程序窗口，也不会在任务切换程序或任务栏中显示条目。应用程序窗口可以通过通知图标的右键菜单打开。 已经在后台运行的 Rancher Desktop 再次启动时将显示应用程序窗口，而且应用程序将添加到任务切换程序和任务栏中。通知图标也不可用时，这方法可用于再次访问后台应用程序。 即使主应用程序窗口关闭（应用程序因此从任务切换程序和任务栏中删除），Rancher Desktop 通常仍然在后台运行，但也可以配置为在主窗口关闭时终止程序。 Notification Icon​ Rancher Desktop 通过通知图标来显示应用程序的状态。图标的右键菜单提供了更多状态信息，并提供了应用程序其他功能的快速访问入口。此选项将禁用通知图标的创建。 Environment​ 配置 PATH​ Rancher Desktop 附带命令行实用程序，用于与其各种功能交互。这些实用程序包括 docker、nerdctl、kubectl 和 helm 等。这些实用程序位于 ~/.rd/bin，因此你可以通过运行 ls ~/.rd/bin 来查看你的安装中包含了哪些实用程序。 要使用这些实用程序，~/.rd/bin 必须位于 shell 的 PATH 变量中。 有两种执行此操作的选项： Automatic：PATH 管理将通过修改你的 shell .rc 文件来将 ~/.rd/bin 添加到 PATH 中。Manual：PATH 管理不会改变任何东西 - 在这种模式下，你必须手动将 ~/.rd/bin 添加到 PATH 中。","keywords":""},{"title":"Kubernetes","type":0,"sectionRef":"#","url":"1.8/ui/preferences/kubernetes","content":"Kubernetes WindowsmacOSLinux Enable Kubernetes​ 此选项允许你启用或禁用 Kubernetes。禁用 Kubernetes 后，你可以只运行 containerd 或 dockerd 来减少资源消耗。默认情况下，Kubernetes 是启用的。 要启用/禁用 Kubernetes，只需选中/取消选中 Enable Kubernetes 复选框。启用/禁用 Kubernetes 时，该应用程序将重新启动。禁用 Kubernetes 不会删除现有资源，重新启用 Kubernetes 时，你可以再次使用这些资源。 Kubernetes Version​ 该选项显示了 Rancher Desktop 实例可以使用的 Kubernetes 版本列表。 升级时： 会进行检查，看目标 Kubernetes 版本是否可以在本地使用。如果没有，它会下载对应文件。保留工作负载。保留镜像。 降级时： 移除工作负载。保留镜像。 要切换版本： 点击 Kubernetes version 下拉菜单。选择要转换的版本。 Kubernetes Port​ 设置 Kubernetes 暴露的端口。如果有多个 K3s 实例正在运行，使用此设置可以避免端口冲突。 Enable Traefik​ 此选项允许你启用或禁用 Traefik。禁用 Traefik 后，你可以释放端口 80 和 443，以便将其用于备用 ingress 配置。默认情况下，Traefik 是启用的。 禁用 Traefik 不会删除现有资源。","keywords":""},{"title":"虚拟机（macOS 和 Linux）","type":0,"sectionRef":"#","url":"1.8/ui/preferences/virtual-machine","content":"虚拟机（macOS 和 Linux） macOSLinux Memory​ 分配给 Rancher Desktop 的内存。可选范围取决于你的系统。红色区域表示分配可能会影响系统服务。 CPU​ 分配给 Rancher Desktop 的 CPU 数量。可选范围取决于你的系统。红色区域表示分配可能会影响系统服务。","keywords":""},{"title":"故障排除","type":0,"sectionRef":"#","url":"1.8/ui/troubleshooting","content":"","keywords":""},{"title":"Show Logs​","type":1,"pageTitle":"故障排除","url":"1.8/ui/troubleshooting#show-logs","content":"使用此选项打开包含所有 Rancher Desktop 日志文件的文件夹。 Enable Debug Mode​ 启用 debug 级别日志记录。 "},{"title":"Reset Kubernetes​","type":1,"pageTitle":"故障排除","url":"1.8/ui/troubleshooting#reset-kubernetes","content":"重置 Kubernetes 并删除所有工作负载和配置。在重置之前，用户会看到确认信息以及删除容器镜像的选项。 要重置 Kubernetes： 单击 Reset Kubernetes，然后，你会看到一个确认窗口。可选：选择是否同时删除容器镜像。单击 Reset。Kubernetes 会停止并重新启动。 "},{"title":"Factory Reset​","type":1,"pageTitle":"故障排除","url":"1.8/ui/troubleshooting#factory-reset","content":"删除集群和所有其他 Rancher Desktop 设置。必须再次执行初始设置流程。 要恢复出厂设置： 单击 Reset。然后，你会看到一个确认窗口。可选：选择是否保留缓存的 Kubernetes 镜像。单击 Factory Reset。Kubernetes 会停止，Rancher Desktop 会关闭。可选：再次启动 Rancher Desktop。 "},{"title":"WSL (Windows)","type":0,"sectionRef":"#","url":"1.8/ui/preferences/wsl","content":"WSL (Windows) 该选项使 Rancher Desktop Kubernetes 配置能够被任何 WSL 配置的 Linux 发行版所访问。一旦启用，你可以使用 WSL 发行版中的 kubectl 等工具与 Rancher Desktop Kubernetes 集群进行通信。 WSL 让你在所有 Linux 发行版中全局配置内存和 CPU 分配。请参阅 WSL 文档中的说明。","keywords":""},{"title":"v1.6.0","type":0,"sectionRef":"#","url":"1.9-tech-preview/bundled-utilities-version-info/v1.6.0","content":"v1.6.0 amazon-ecr-credential-helper: 0.6.0 docker: 20.10.17 docker-buildx: 0.9.1 docker-compose: 2.11.1 docker-credential-helpers: 0.6.4 helm: 3.9.4 kuberlr: 0.4.2 nerdctl: 0.23.0 trivy: 0.32.0 ","keywords":""},{"title":"v1.7.0","type":0,"sectionRef":"#","url":"1.9-tech-preview/bundled-utilities-version-info/v1.7.0","content":"v1.7.0 amazon-ecr-credential-helper: 0.6.0 docker: 20.10.21 docker-buildx: 0.9.1 docker-compose: 2.14.0 docker-credential-helpers: 0.6.4 helm: 3.10.2 kuberlr: 0.4.2 nerdctl: 1.0.0 trivy: 0.35.0 ","keywords":""},{"title":"概述","type":0,"sectionRef":"#","url":"1.9-tech-preview/","content":"","keywords":""},{"title":"容器管理​","type":1,"pageTitle":"概述","url":"1.9-tech-preview/#容器管理","content":"Rancher Desktop 提供了构建、推送和拉取容器镜像以及运行容器的功能，这些功能可以通过 Docker CLI（当你选择 Moby/dockerd 作为引擎时）或 nerdctl（当你选择 containerd 作为引擎时）实现，而 nerdctl 是 containerd 项目提供的 &quot;兼容 containerd 的 Docker CLI&quot;。 "},{"title":"Kubernetes​","type":1,"pageTitle":"概述","url":"1.9-tech-preview/#kubernetes","content":"Kubernetes 内置在 Rancher Desktop 中，由 K3s 提供。K3s 是一个经过认证的轻量级发行版。通过 Rancher Desktop，你能够 选择你的 Kubernetes 版本，并且一键重置 Kubernetes 或 Kubernetes 以及整个容器运行时。 "},{"title":"Rancher 与 Rancher Desktop​","type":1,"pageTitle":"概述","url":"1.9-tech-preview/#rancher-与-rancher-desktop","content":"虽然 Rancher 和 Rancher Desktop 的名字里都包含 Rancher，但它们的功能是有差别的。Rancher Desktop 不是桌面版 Rancher。Rancher 是管理 Kubernetes 集群的强大解决方案，Rancher Desktop 提供本地 Kubernetes 和容器管理平台，这两种解决方案相辅相成。 如果要在本地系统上运行 Rancher，你可以将 Rancher 安装到 Rancher Desktop 中。 "},{"title":"v1.9.0-tech-preview","type":0,"sectionRef":"#","url":"1.9-tech-preview/bundled-utilities-version-info/v1.9.0-tech-preview","content":"v1.9.0-tech-preview amazon-ecr-credential-helper: 0.6.0 docker: 23.0.3 docker-buildx: 0.10.4 docker-compose: 2.17.2 docker-credential-helpers: 0.6.4 helm: 3.11.3 kuberlr: 0.4.2 nerdctl: 1.3.0 trivy: 0.39.1 ","keywords":""},{"title":"v1.8.0","type":0,"sectionRef":"#","url":"1.9-tech-preview/bundled-utilities-version-info/v1.8.0","content":"v1.8.0 amazon-ecr-credential-helper: 0.6.0 docker: 23.0.1 docker-buildx: 0.10.4 docker-compose: 2.16.0 docker-credential-helpers: 0.6.4 helm: 3.11.2 kuberlr: 0.4.2 nerdctl: 1.2.1 trivy: 0.38.3 ","keywords":""},{"title":"常见问题","type":0,"sectionRef":"#","url":"1.9-tech-preview/faq","content":"常见问题 本文包含了用户常见的 Rancher Desktop 问题和解答。 问：Rancher Desktop 是 Rancher 的桌面版吗？​ 答：不是。Rancher Desktop 不是桌面版 Rancher。 虽然 Rancher 和 Rancher Desktop 的名字里都包含 Rancher，但它们的功能是有差别的。这两种解决方案相辅相成。 Rancher 是一个完整的软件堆栈，用于跨任何基础设施管理多个 Kubernetes 集群。 Rancher Desktop 在桌面上提供容器管理和 Kubernetes 实例，用于支持本地开发用例。 问：Rancher Desktop 中有 Kubernetes Cluster Explorer 吗？​ 答：是的，Rancher Dashboard 作为功能预览包含在 1.2.1 版本中。你可以通过单击系统托盘菜单中的 Dashboard 选项来调用仪表板。 要了解有关 Rancher Desktop 的更多信息，请单击此处。 要了解有关 Rancher 的更多信息，请单击此处。 问：我可以同时安装 Docker Desktop 与 Rancher Desktop 吗？​ 答：可以，但它们不能同时运行，因为 Rancher Desktop 和 Docker Desktop 使用相同的 Docker socket（/var/run/docker.sock）。在启动一个之前，一定要先停止另一个。 问：如何彻底卸载 Rancher Desktop？​ 答：首先，执行恢复出厂设置，然后卸载该应用程序。卸载过程因操作系统而异。如需更多信息，请参阅此处。 问：Windows 上的 DNS VPN 有哪些支持（如果有）？​ 答：Windows 的替代 DNS 解析器已实现，用来解决 Windows 上的某些 VPN 问题。它支持通过 VPN 连接进行 DNS 查找。它必须通过编辑内部配置文件手动启用。 问：“WSL 集成”选项卡有什么作用？​ 答：它能使 Kubernetes 配置可以在显示的 WSL 发行版中访问，以便你使用 kubectl 之类的命令与 Kubernetes 进行通信。 问：我在哪里可以找到详细的日志？​ 答：点击 Troubleshooting 标签，然后点击 Show Logs。 问：如何为 Traefik Ingress Controller 启用仪表板？​ 答：出于安全原因，Traefik 仪表板默认不公开。但是，你可以通过多种方式公开仪表板。你可以使用下面显示的两种方法之一。 使用 port-forward 来启用仪表板访问​ kubectl port-forward -n kube-system $(kubectl -n kube-system get pods --selector &quot;app.kubernetes.io/name=traefik&quot; --output=name) 9000:9000 在浏览器中访问 http://127.0.0.1:9000/dashboard/ 以查看 Traefik 仪表板。 使用 HelmChartConfig 来启用仪表板访问​ 将以下说明复制到文件中，例如 expose-traefik.yaml： apiVersion: helm.cattle.io/v1 kind: HelmChartConfig metadata: name: traefik namespace: kube-system spec: valuesContent: |- dashboard: enabled: true ports: traefik: expose: true # Avoid this in production deployments logs: access: enabled: true 运行命令： kubectl apply -f expose-traefik.yaml 在浏览器中访问 http://127.0.0.1:9000/dashboard/ 以查看 Traefik 仪表板。 问：如何禁用 Traefik，这样会删除 Traefik 资源吗？​ 答：是的，你可以禁用 Traefik 以释放端口 80 和 443 用于备用 ingress 配置。禁用 Traefik 不会 删除现有资源。Kubernetes Settings 下会默认选择 Enable Traefik 功能，取消选中此框即可禁用它。 如果要删除 Traefik 资源，请在 UI 的 Kubernetes Settings 面板上单击 Reset Kubernetes。 问：是否支持内部容器端口转发？​ 答：是的，从 v1.1.0 起，所有三个平台（Windows、Linux 和 macOS）都支持此功能。 问：文件共享的工作原理与 Docker Desktop 类似吗？是否必须进行任何其他配置才能将卷挂载到 VM？​ 答：目前默认共享以下目录：macOS 上为 /Users/$USER，Linux 上为 /home/$USER，二者均共享 /tmp/rancher-desktop。对于 Windows，所有文件都通过 WSL2 自动共享。 通常无法开箱即用地从主机访问标准的 Docker 卷。 要访问 Linux/macOS 上的其他目录，你必须进行额外的配置。 如果要改变挂载的行为，你也需要进行额外的配置。 问：容器是否能通过 host.docker.internal 回到主机服务？​ 答：是的。在 Windows 上，你可能需要创建防火墙规则来允许主机和容器之间的通信。你可以在特权 powershell 中运行以下命令来创建防火墙规则： New-NetFirewallRule -DisplayName &quot;WSL&quot; -Direction Inbound -InterfaceAlias &quot;vEthernet (WSL)&quot; -Action Allow 问：我不需要 Rancher Desktop 部署的 Kubernetes 集群；如何禁用它以节省资源？​ 答：打开 Rancher Desktop 设置，点击齿轮打开 Preferences，选择 Kuberentes 选项卡，然后取消勾选 Kubernetes Settings 下的 Enable Kubernetes 功能以禁用它。 这将允许你在不为 Kubernetes 分配资源的情况下仅运行 containerd 或 dockerd。 问：Kubernetes Image Manager (kim) 发生了什么？​ 答：从 1.0 版本开始，Kim 不再被支持，而且已被 nerdctl 和 Docker CLI 取代。 问：为什么运行 brew install rancher 时出现 It seems there is already a Binary at '/usr/local/bin/&lt;BINARY&gt;' 的错误？​ 答：如果支持 Rancher Desktop 的工具（Helm、kubectl、nerdctl、docker）已经由 Homebrew 管理，那么由于 Homebrew cask 公式的定义方式，安装会失败。你可以使用 Mac 应用程序进行安装来避免这个问题。 问：我通过 Arch User Repository 安装了 nerdctl，但它不能与 Rancher Desktop 一起使用，为什么？​ 答：对于 Rancher Desktop，nerdctl 必须在 VM 内部而不是在主机上运行。与 Rancher Desktop 一起打包的主机版本只是一个 shell wrapper，用于在 VM 内执行命令。 问：Support Utilities 页面（Rancher Desktop &lt;1.3.0）上的工具未安装，我看到 Insufficient permission to modify /usr/local/bin 错误，我该如何解决？​ 答：当你没有 /usr/local/bin 的权限时就会发生这种情况。改善权限处理的长期解决方案正在开发中。同时，一个临时的解决方法是通过运行 sudo chown $USER /usr/local/bin 来更改 /usr/local/bin 的权限。当你能够写入目录时，Rancher Desktop 就能够创建符号链接。 从 1.3.0 及更高版本开始，我们不再在 /usr/local/bin 中创建符号链接，而是在 ~/.rd/bin 中创建符号链接，并将该目录放在 PATH 中，这样可以避免处理 /usr/local/bin 的写权限和文件冲突。我们强烈建议你升级到最新版本的 Rancher Desktop。 问：Cygwin 与 Rancher Desktop 兼容吗？​ 答：没有，但我们有增加兼容性的计划。 问：如何将 Rancher Desktop 添加到 Windows 的启动程序列表中？​ 答：在 Windows 上，你可以通过不同的方式将程序添加到启动程序列表中。例如，你可以执行以下步骤： 按 Windows+R 打开运行对话框。输入 shell:startup，然后按 Enter 打开 Startup 文件夹。从桌面复制“Rancher Desktop”快捷方式并粘贴到 Startup 文件夹中。重新启动主机。 问：Rancher Desktop 实际将数据卷放在哪里？​ 答： Windows： 打开运行菜单（按 Windows + R）并打开下面的路径（具体取决于活动的容器运行时）： dockerd(moby): \\\\wsl$\\rancher-desktop-data\\var\\lib\\docker\\volumes containerd: \\\\wsl$\\rancher-desktop-data\\var\\lib\\nerdctl\\dbb19c5e\\volumes\\&lt;namespace&gt; macOS 和 Linux： 根据活动的容器运行时，在 (lima) VM 中导航到下面的路径。你可以使用 rdctl shell 访问 VM 中的这些路径。 dockerd(moby): /var/lib/docker/volumes containerd: /var/lib/nerdctl/dbb19c5e/volumes/&lt;namespace&gt; 问：如何将 Rancher Desktop 降级到旧版本​ 答：我们强烈建议你使用包含最新功能和错误修复的当前发行版。但是，如果你想降级到较早的版本，请按照以下步骤操作。 执行 Troubleshooting &gt; Factory Reset。请确保没有在 Factory Reset 对话框中选中 Keep cached Kubernetes images。按照适用于你操作系统的卸载说明卸载当前版本。安装你所需的旧版本。","keywords":""},{"title":"部署配置文件","type":0,"sectionRef":"#","url":"1.9-tech-preview/getting-started/deployment","content":"","keywords":""},{"title":"启动首选值​","type":1,"pageTitle":"部署配置文件","url":"1.9-tech-preview/getting-started/deployment#启动首选值","content":"Rancher Desktop 设置如下： 加载 “admin” 部署配置文件（“defaults” 和 “locked”）如果都不存在，则加载 “user” 部署配置文件（同样是 “defaults” 和 “locked”）从 settings.json 文件加载保存的首选项如果没有保存的设置，请改用之前加载的 “defaults” 配置文件将用于启动应用程序的命令行参数值复制到设置中如果设置仍然完全为空，则显示首次运行对话框使用内置应用程序默认值填充任何缺失的值将 “locked” 配置文件中的值复制到当前设置上 用户无法通过 GUI 或 CLI 修改已被配置文件锁定的设置。 如果配置文件存在但无法正确解析，Rancher Desktop 将拒绝加载应用程序。 Rancher Desktop 不会修改或删除部署配置文件。它们不会受到恢复出厂设置或卸载的影响。 配置文件数据的结构与应用程序设置匹配： rdctl list-settings { ... &quot;containerEngine&quot;: { &quot;allowedImages&quot;: { &quot;enabled&quot;: false, &quot;patterns&quot;: [] }, &quot;name&quot;: &quot;containerd&quot; }, ... }  下面针对各系统的文档说明了如何创建部署配置文件，该配置文件将默认容器引擎更改为 moby，禁用 Kubernetes，并将镜像列表锁定为仅允许 busybox 和 nginx。 "},{"title":"配置文件格式和位置​","type":1,"pageTitle":"部署配置文件","url":"1.9-tech-preview/getting-started/deployment#配置文件格式和位置","content":"不同系统使用的部署配置文件存储格式和位置不同。 WindowsmacOSLinux 在 Linux 上，部署配置文件以 JSON 格式存储。 配置文件的位置是： /etc/rancher-desktop/defaults.json /etc/rancher-desktop/locked.json ~/.config/rancher-desktop.defaults.json ~/.config/rancher-desktop.locked.json 将所有当前设置转换为部署配置文件​ 由于部署配置文件以 JSON 格式存储，因此创建配置文件最简单的方法是将当前应用程序设置保存到配置文件位置，然后使用文本编辑器微调配置文件。 rdctl list-settings &gt; ~/.config/rancher-desktop.defaults.json 默认使用 “moby” 容器引擎并禁用 Kubernetes​ ~/.config/rancher-desktop.defaults.json { &quot;containerEngine&quot;: { &quot;name&quot;: &quot;moby&quot; }, &quot;kubernetes&quot;: { &quot;enabled&quot;: false } } 将镜像列表锁定为仅允许 “busybox” 和 “nginx”​ ~/.config/rancher-desktop.locked.json { &quot;containerEngine&quot;: { &quot;allowedImages&quot;: { &quot;enabled&quot;: true, &quot;patterns&quot;: [&quot;busybox&quot;,&quot;nginx&quot;] } } }  "},{"title":"已知问题和限制​","type":1,"pageTitle":"部署配置文件","url":"1.9-tech-preview/getting-started/deployment#已知问题和限制","content":"containerEngine.allowedImages 是当前唯一可以锁定的设置。在 macOS 上，格式不正确的配置文件会被忽略，而不是阻止应用程序加载。无法通过部署配置文件设置 diagnostics.showMuted（Windows 上的 WSL.integrations）。在 macOS 和 Linux 上，如果 “defaults” 配置文件未为 application.pathManagementStrategy 配置值，则仍会显示一个简短的首次运行对话框。 "},{"title":"安装","type":0,"sectionRef":"#","url":"1.9-tech-preview/getting-started/installation","content":"","keywords":""},{"title":"macOS​","type":1,"pageTitle":"安装","url":"1.9-tech-preview/getting-started/installation#macos","content":""},{"title":"要求​","type":1,"pageTitle":"安装","url":"1.9-tech-preview/getting-started/installation#要求","content":"Rancher Desktop 在 macOS 上运行需要以下条件： macOS Catalina 10.15 或更高版本。带有 VT-x 的 Apple 芯片 (M1) 或 Intel CPU。连接到互联网。 还建议具备以下条件： 8 GB 内存4 个 CPU 你要运行的工作负载可能还需要一些额外的资源。 "},{"title":"在 macOS 上安装 Rancher Desktop​","type":1,"pageTitle":"安装","url":"1.9-tech-preview/getting-started/installation#在-macos-上安装-rancher-desktop","content":"转到 GitHub 上的 Releases 页面。找到要下载的 Rancher Desktop 版本。展开 Assets 部分并下载 Rancher.Desktop-X.Y.Z.dmg，其中 X.Y.Z 是 Rancher Desktop 的版本。导航到下载安装程序的目录，并运行安装程序。这个目录通常是下载文件夹。双击 DMG 文件。在打开的访达窗口中，将 Rancher Desktop 图标拖到应用程序文件夹中。导航到应用程序文件夹，然后双击 Rancher Desktop 来启动它。 安装 Rancher Desktop 后，用户可以访问以下支持的工具： Helmkubectlnerdctldocker (moby) "},{"title":"在 macOS 上卸载 Rancher Desktop​","type":1,"pageTitle":"安装","url":"1.9-tech-preview/getting-started/installation#在-macos-上卸载-rancher-desktop","content":"打开访达 &gt; 应用程序。找到 Rancher Desktop。选中它，然后选择文件 &gt; 移到废纸篓。要删除应用程序，选择访达 &gt; 清倒废纸篓。 "},{"title":"Windows​","type":1,"pageTitle":"安装","url":"1.9-tech-preview/getting-started/installation#windows","content":""},{"title":"要求​","type":1,"pageTitle":"安装","url":"1.9-tech-preview/getting-started/installation#要求-1","content":"Rancher Desktop 在 Windows 上运行需要以下条件： Windows 10 build 1909 或更高版本。支持家庭版。在具有虚拟化功能的主机上运行。连接到互联网。 Rancher Desktop 在 Windows 上需要 Windows Subsystem for Linux，它将作为 Rancher Desktop 设置的一部分自动安装。你不需要手动下载发行版。 还建议具备以下条件： 8 GB 内存4 个 CPU 你要运行的工作负载可能还需要一些额外的资源。 注意：你可以在 Windows 主机上以非管理员用户身份使用 Rancher Desktop。但是，以下组件的安装过程需要管理员的干预： WSL2：你需要管理员权限才能安装 WSL2，它是 Rancher Desktop 的重要组件。Rancher Desktop Privileged Service：你需要管理员权限才能安装 Rancher Desktop Privileged Service，这是在主机的所有接口上公开运行在容器内的应用程序/服务所必需的。你也可以跳过 Rancher Desktop Privileged Service 的安装，这样的话，你将无法在 127.0.0.1 之外的任何接口上公开应用程序/服务。 "},{"title":"在 Windows 上安装 Rancher Desktop​","type":1,"pageTitle":"安装","url":"1.9-tech-preview/getting-started/installation#在-windows-上安装-rancher-desktop","content":"转到 GitHub 上的 Releases 页面。找到要下载的 Rancher Desktop 版本。展开 Assets 部分并下载 Windows 安装程序。它的名称是 Rancher.Desktop.Setup.X.Y.Z.msi，其中 X.Y.Z 是 Rancher Desktop 的版本。导航到下载安装程序的目录，并运行安装程序。这个目录通常是下载文件夹。查看许可协议并单击 I Agree 来继续安装。如果出现提示，请选择为计算机的所有用户安装，或仅为当前用户安装。建议为所有用户安装，以便安装 Rancher Desktop Privileged Service，如上所述。按照提示确认安装。安装完成后，单击 Finish 来关闭安装向导。 "},{"title":"在 Windows 上卸载 Rancher Desktop​","type":1,"pageTitle":"安装","url":"1.9-tech-preview/getting-started/installation#在-windows-上卸载-rancher-desktop","content":"在任务栏中，单击开始菜单。转到设置 &gt; 应用程序 &gt; 应用程序和功能。找到并选择 Rancher Desktop。点击卸载，出现确认信息时再次点击。按照 Rancher Desktop 卸载程序上的提示继续。完成后点击完成。 "},{"title":"Linux​","type":1,"pageTitle":"安装","url":"1.9-tech-preview/getting-started/installation#linux","content":""},{"title":"要求​","type":1,"pageTitle":"安装","url":"1.9-tech-preview/getting-started/installation#要求-2","content":"Rancher Desktop 在 Linux 上运行需要以下条件： 一个可以安装 .deb 或 .rpm 包或 AppImages 的发行版。连接到互联网。带有 AMD-V 或 VT-x 的 x86_64 处理器。/dev/kvm 上的读写权限。详情见下文。 还建议具备以下条件： 8 GB 内存4 个 CPU 你要运行的工作负载可能还需要一些额外的资源。 "},{"title":"确保你可以访问 /dev/kvm​","type":1,"pageTitle":"安装","url":"1.9-tech-preview/getting-started/installation#确保你可以访问-devkvm","content":"Rancher Desktop 需要 /dev/kvm 的权限，而在某些发行版（例如 Ubuntu 18.04）上，用户没有足够的权限。 要检查你是否具有所需的权限，请执行以下操作： [ -r /dev/kvm ] &amp;&amp; [ -w /dev/kvm ] || echo 'insufficient privileges'  如果输出是 insufficientprivilege，你需要将你的用户添加到 kvm 组。你可以执行以下操作： sudo usermod -a -G kvm &quot;$USER&quot;  然后重新启动使更改生效。 "},{"title":"pass 设置​","type":1,"pageTitle":"安装","url":"1.9-tech-preview/getting-started/installation#pass-设置","content":"默认情况下，Rancher Desktop 使用 pass 来安全地存储通过 docker login 和 nerdctl login 传递的凭证。在第一次在主机上使用时，pass 需要你进行少量的设置。如果你不打算使用 docker login 或 nerdctl login，你不需要设置 pass。但请记住，如果你以后需要使用它们，你必须设置它们，否则会出现错误。 安装 Rancher Desktop 后，你应该创建一个 GPG 密钥。pass 会使用它来保护密文。要创建 GPG 密钥： gpg --generate-key  输出应该与 8D818FB37A9279E341F01506ED96AD27A40C9C73 类似。 这是你的密钥 ID。然后，你可以通过将此密钥 ID 传递给它来初始化 pass： pass init 8D818FB37A9279E341F01506ED96AD27A40C9C73  关于 pass 的更多信息，请参阅此处。 "},{"title":"Traefik 端口绑定访问​","type":1,"pageTitle":"安装","url":"1.9-tech-preview/getting-started/installation#traefik-端口绑定访问","content":"Rancher Desktop 使用 Traefik 作为默认 Ingress Controller。由于 Traefik Ingress 上的端口访问受限，用户在部署 Rancher Desktop 后可能会遇到 permission denied 错误。大多数 Linux 发行版（例如 Ubuntu 20.04）不允许非 root 用户监听 1024 以下的 TCP 和 UDP 端口。为了让 Traefik 监听本地主机上的特权端口，请运行以下命令： sudo sysctl -w net.ipv4.ip_unprivileged_port_start=80  命令运行后，80 及以上的所有端口都将变为非特权端口，Traefik 将能够成功访问这些端口。 "},{"title":"通过 .deb 包安装​","type":1,"pageTitle":"安装","url":"1.9-tech-preview/getting-started/installation#通过-deb-包安装","content":"添加 Rancher Desktop 仓库并使用以下命令安装 Rancher Desktop： curl -s https://download.opensuse.org/repositories/isv:/Rancher:/stable/deb/Release.key | gpg --dearmor | sudo dd status=none of=/usr/share/keyrings/isv-rancher-stable-archive-keyring.gpg echo 'deb [signed-by=/usr/share/keyrings/isv-rancher-stable-archive-keyring.gpg] https://download.opensuse.org/repositories/isv:/Rancher:/stable/deb/ ./' | sudo dd status=none of=/etc/apt/sources.list.d/isv-rancher-stable.list sudo apt update sudo apt install rancher-desktop  "},{"title":"卸载 .deb 包​","type":1,"pageTitle":"安装","url":"1.9-tech-preview/getting-started/installation#卸载-deb-包","content":"你可以使用以下命令删除包、仓库和密钥： sudo apt remove --autoremove rancher-desktop sudo rm /etc/apt/sources.list.d/isv-rancher-stable.list sudo rm /usr/share/keyrings/isv-rancher-stable-archive-keyring.gpg sudo apt update  "},{"title":"通过 .rpm 包安装​","type":1,"pageTitle":"安装","url":"1.9-tech-preview/getting-started/installation#通过-rpm-包安装","content":"注意：Rancher Desktop 在 Linux 上使用 QEMU，而 RHEL、Fedora 和相关发行版打包 QEMU 的方式与其他发行版不同。要在这些发行版上使用 Rancher Desktop，请使用 AppImage。 在 openSUSE 上添加仓库并安装： sudo zypper addrepo https://download.opensuse.org/repositories/isv:/Rancher:/stable/rpm/isv:Rancher:stable.repo sudo zypper install rancher-desktop  "},{"title":"卸载 .rpm 包​","type":1,"pageTitle":"安装","url":"1.9-tech-preview/getting-started/installation#卸载-rpm-包","content":"确保 Rancher Desktop 已退出（如果没有，它应该出现在 Dock 中），然后执行： sudo zypper remove --clean-deps rancher-desktop sudo zypper removerepo isv_Rancher_stable  "},{"title":"通过 AppImage 安装​","type":1,"pageTitle":"安装","url":"1.9-tech-preview/getting-started/installation#通过-appimage-安装","content":"首先，确保安装了 pass 和 gpg。例如，在 Fedora 上： dnf install pass gnupg2  你可以在此处下载 AppImage。要运行它，只需要添加可执行权限，然后执行即可。为了更好地与你的桌面集成，你可以使用 AppImageLauncher。 "},{"title":"卸载 AppImage​","type":1,"pageTitle":"安装","url":"1.9-tech-preview/getting-started/installation#卸载-appimage","content":"只需删除 AppImage。 "},{"title":"使用 k3d 创建多节点集群","type":0,"sectionRef":"#","url":"1.9-tech-preview/how-to-guides/create-multi-node-cluster","content":"","keywords":""},{"title":"启动多节点集群的步骤​","type":1,"pageTitle":"使用 k3d 创建多节点集群","url":"1.9-tech-preview/how-to-guides/create-multi-node-cluster#启动多节点集群的步骤","content":"确保在 Kubernetes Settings 页面中选择了 dockerd(moby) 作为容器运行时。 安装 k3d。 wgetcurl wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash  运行 k3d cluster create 命令来启动多节点集群。例如： k3d cluster create two-node-cluster --agents 2 k3d cluster create three-node-cluster --agents 3  k3d 将新创建的集群设置为 active。你可以通过 kubectl config use-context 命令来切换集群。例如： kubectl config use-context k3d-two-node-cluster  要了解有关 k3s 和 k3d 的更多信息，请参阅这些项目的文档（k3s 文档 和 k3d 文档）。 ⚠️ 请注意，k3d 创建的集群不是通过 Rancher Desktop GUI 管理的。 "},{"title":"Hello World 示例","type":0,"sectionRef":"#","url":"1.9-tech-preview/how-to-guides/hello-world-example","content":"","keywords":""},{"title":"示例 1 - 构建镜像并运行容器​","type":1,"pageTitle":"Hello World 示例","url":"1.9-tech-preview/how-to-guides/hello-world-example#示例-1---构建镜像并运行容器","content":"创建文件夹​ mkdir hello-world cd hello-world  创建一个空白的 Dockerfile​ 在 Windows 上，创建一个名为 Dockerfile 的空白文件。 在 Linux 上，你可以使用以下命令创建一个空白的 Dockerfile: vi Dockerfile  使用以下命令填充 Dockerfile​ FROM alpine CMD [&quot;echo&quot;, &quot;Hello World!!&quot;]  构建并运行镜像以进行验证​ nerdctldocker nerdctl build --tag helloworld:v1.0 . nerdctl images | grep helloworld nerdctl run --rm helloworld:v1.0 # 移除镜像 nerdctl rmi helloworld:v1.0  "},{"title":"示例 2 - 构建镜像并将容器部署到 Kubernetes​","type":1,"pageTitle":"Hello World 示例","url":"1.9-tech-preview/how-to-guides/hello-world-example#示例-2---构建镜像并将容器部署到-kubernetes","content":"根据需要将 Kubernetes Settings 面板中的 Container Runtime 切换为 dockerd 或 containerd。 创建一个文件夹并添加一个示例 index.html 文件，如下所示​ mkdir nginx cd nginx echo &quot;&lt;h1&gt;Hello World from NGINX!!&lt;/h1&gt;&quot; &gt; index.html  创建一个空白的 Dockerfile​ 在 Windows 上，创建一个名为 Dockerfile 的空白文件。 在 Linux 上，你可以使用以下命令创建一个空白的 Dockerfile: vi Dockerfile  使用以下命令填充 Dockerfile​ FROM nginx:alpine COPY . /usr/share/nginx/html  使用本地代码构建镜像​ ⚠️ 注意：你需要将 --namespace k8s.io 标志传递给 nerdctl build 命令，以便 nerdctl 构建镜像并使其在 k8s.io 命名空间中可用。 nerdctldocker nerdctl --namespace k8s.io build --tag nginx-helloworld:latest . nerdctl --namespace k8s.io images | grep nginx-helloworld  部署到 Kubernetes​ 运行以下命令，从而使用在上一步中构建的镜像创建和运行 pod。 ⚠️ 注意：你需要传递 --image-pull-policy=Never 标志以使用带有 :latest 标签的本地镜像（:latest 标签将始终尝试从远程仓库中拉取镜像）。 kubectl run hello-world --image=nginx-helloworld:latest --image-pull-policy=Never --port=80 kubectl port-forward pods/hello-world 8080:80  在浏览器中访问 localhost:8080，你将看到 Hello World from NGINX!! 的信息。如果你想留在命令行上，请使用 curl localhost:8080。 删除 pod 和镜像​ nerdctldocker kubectl delete pod hello-world # 移除镜像 nerdctl --namespace k8s.io rmi nginx-helloworld:latest  "},{"title":"增加打开文件限制","type":0,"sectionRef":"#","url":"1.9-tech-preview/how-to-guides/increasing-open-file-limit","content":"","keywords":""},{"title":"macOS & Linux 步骤​","type":1,"pageTitle":"增加打开文件限制","url":"1.9-tech-preview/how-to-guides/increasing-open-file-limit#macos--linux-步骤","content":"首先，使用 lima override.yaml 编写配置脚本。 在以下路径创建 override.yaml 文件。 macOSLinux ~/Library/Application Support/rancher-desktop/lima/_config/override.yaml  然后，使用下面的脚本为 override.yaml 文件中的容器增加 ulimit。 provision: - mode: system script: | #!/bin/sh cat &lt;&lt;'EOF' &gt; /etc/security/limits.d/rancher-desktop.conf * soft nofile 82920 * hard nofile 82920 EOF  如果你使用 Elastic 平台，请使用下面的脚本设置 vm.max_map_count 参数。 provision: - mode: system script: | #!/bin/sh cat &lt;&lt;'EOF' &gt; /etc/security/limits.d/rancher-desktop.conf * soft nofile 82920 * hard nofile 82920 sysctl -w vm.max_map_count=262144 EOF  最后，停止并重启 Rancher Desktop 来让新的限制生效。 "},{"title":"Windows 步骤​","type":1,"pageTitle":"增加打开文件限制","url":"1.9-tech-preview/how-to-guides/increasing-open-file-limit#windows-步骤","content":"首先，确保 Rancher Desktop 至少运行过一次来初始化配置。 然后，使用以下代码在 %AppData%\\rancher-desktop\\provisioning 中创建一个配置脚本，比如 map_count.start，这样能通过增加 max_map_count 参数的值来更新打开文件的限制。 #!/bin/sh sysctl -w vm.max_map_count=262144  最后，停止并重启 Rancher Desktop 来让变更生效。 "},{"title":"配置脚本","type":0,"sectionRef":"#","url":"1.9-tech-preview/how-to-guides/provisioning-scripts","content":"","keywords":""},{"title":"macOS & Linux​","type":1,"pageTitle":"配置脚本","url":"1.9-tech-preview/how-to-guides/provisioning-scripts#macos--linux","content":"在 macOS 和 Linux 上，你可以使用 lima override.yaml 来编写配置脚本。 在以下路径创建 override.yaml 文件。 macOSLinux ~/Library/Application Support/rancher-desktop/lima/_config/override.yaml  在上一步中创建的 override.yaml 文件中编写配置脚本。例如，你可以使用以下脚本来增加容器的 ulimit： provision: - mode: system script: | #!/bin/sh cat &lt;&lt;'EOF' &gt; /etc/security/limits.d/rancher-desktop.conf * soft nofile 82920 * hard nofile 82920 EOF  你还可以使用 override.yaml 来覆盖/修改 lima 配置设置。下面的示例创建了额外的挂载： mounts: - location: /some/path writable: true  "},{"title":"Windows​","type":1,"pageTitle":"配置脚本","url":"1.9-tech-preview/how-to-guides/provisioning-scripts#windows","content":"注意：在 Windows 上，你只能为 1.1.0 或更高版本的 Rancher Desktop 使用这些配置脚本。 你需要至少运行 Rancher Desktop 一次以允许它创建配置。 打开 %AppData%\\\\rancher-desktop\\\\provisioning 目录。完整路径的示例：C:\\\\Users\\\\Joe\\\\AppData\\\\Roaming\\\\rancher-desktop\\\\provisioning。 请注意，任何文件扩展名为 .start 的文件（例如 k3s-overrides.start）都可以在 Rancher Desktop 启动 Kubernetes 后端（如果启用） 时执行。此类文件将在 Rancher Desktop WSL 上下文中运行。 .start 文件的示例流程： Rancher Desktop 内部设置运行配置脚本在 UI 中启用 dockerd 或 containerdKubernetes (K3s) 例如，使用 %AppData%\\\\rancher-desktop\\\\provisioning\\\\insecure-registry.start 将允许 nerdctl 默认使用不安全的镜像仓库： #!/bin/sh mkdir -p /etc/nerdctl cat &gt; /etc/nerdctl/nerdctl.toml &lt;&lt;EOF insecure_registry = true EOF  请注意，文件扩展名为 .stop 的文件（例如 wipe-data.stop）可以在 Rancher Desktop 关闭 Kubernetes 后端（如果启用）后 执行。此类文件将在相同的 Rancher Desktop WSL 上下文中运行。 .stop 文件的示例流程： 停止 k3s、dockerd 或 containerd运行取消配置的脚本 重要提示：脚本需要以 Unix 行结尾保存，未完成行尾转换，且具有 DOS 行结尾的文件可能会产生意想不到的结果。你可以使用配置脚本更改的内容是有限制的。例如，你不能使用配置脚本更改 WSL2 上的硬 ulimit。请谨慎使用配置脚本，如果你对配置脚本有任何具体问题，请随时在 Slack/Github 上与 Rancher Desktop 团队联系。 "},{"title":"Installing and Uninstalling Rancher Desktop Extensions","type":0,"sectionRef":"#","url":"1.9-tech-preview/how-to-guides/installing-uninstalling-extensions","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Installing and Uninstalling Rancher Desktop Extensions","url":"1.9-tech-preview/how-to-guides/installing-uninstalling-extensions#prerequisites","content":"Rancher Desktop Extensions are available as part of release v1.9.0-tech-preview or later. "},{"title":"Installing Extensions​","type":1,"pageTitle":"Installing and Uninstalling Rancher Desktop Extensions","url":"1.9-tech-preview/how-to-guides/installing-uninstalling-extensions#installing-extensions","content":"There are two ways in which you can install extensions, a method using the UI and another using the rdctl extension install command. WindowsmacOSLinux Using the UI​ Click Extensions from the main UI to navigate to the Catalog tab. Here you can search through extensions available for use. When you find an extension you want to use, click on the extension to open the Detail view, then click on the Install button on the right hand side as seen in the image below. Using the Command Line​ We have also extended the rdctl command line in the v1.9.0-tech-preview release to install extensions. Please use the command below to install extensions: 备注 The use of the &lt;tag&gt; parameter is optional. rdctl extension install &lt;image-id&gt;:&lt;tag&gt;  "},{"title":"Uninstalling Extensions​","type":1,"pageTitle":"Installing and Uninstalling Rancher Desktop Extensions","url":"1.9-tech-preview/how-to-guides/installing-uninstalling-extensions#uninstalling-extensions","content":"Additionally, there are two ways in which you can uninstall extensions, a method using the UI and another using the rdctl extension uninstall command. WindowsmacOSLinux Using the UI​ Click Extensions from the main UI to navigate to the Catalog tab, then click on the Installed tab. Once under the Installed tab, you can uninstall extensions by clicking on the Uninstall button on the right hand side as pictured below. Using the Command Line​ We have also extended the rdctl command line in the v1.9.0-tech-preview release to uninstall extensions. Please use the command below to uninstall extensions: 备注 The use of the &lt;tag&gt; parameter is optional. rdctl extension uninstall &lt;image-id&gt;:&lt;tag&gt;  "},{"title":"Rancher Desktop 上的 Rancher","type":0,"sectionRef":"#","url":"1.9-tech-preview/how-to-guides/rancher-on-rancher-desktop","content":"Rancher Desktop 上的 Rancher 虽然 Rancher 和 Rancher Desktop 的名字里都包含 Rancher，但它们的功能是有差别的。Rancher Desktop 不是桌面版 Rancher。Rancher 是管理 Kubernetes 集群的强大解决方案，而 Rancher Desktop 运行本地 Kubernetes 和容器管理平台，这两种解决方案相辅相成。例如，你可以将 Rancher 作为工作负载安装在 Rancher Desktop 中。 本指南概述了使用 container runtime 或 helm（本地环境）在 Rancher Desktop 上安装 Rancher Dashboard 的步骤： 注意：如果实用程序（例如：helm）或你的工作负载版本与会话中的 Kubernetes 版本不兼容，你可能会遇到问题。作为一个潜在的修复，你可以通过 Preferences &gt; Kubernetes 对话框切换到兼容的 Kubernetes 版本。支持矩阵页面上列出了 Rancher 支持的 Kubernetes 平台。 nerdctldockerhelm nerdctl run --privileged -d --restart=always -p 8080:80 -p 8443:443 rancher/rancher 安装需要几分钟才能完成。安装后，你可以访问 Rancher UI，如下所示： 通过 container runtime 安装：https://localhost:8443/通过 helm 安装：https://rancher.rd.localhost/ nerdctldocker 要访问 Rancher UI，你需要获取引导密码： 1：获取 Rancher UI 容器 ID/名称： nerdctl ps 2：获取引导密码： nerdctl logs [rancherContainerID] 2&gt;&amp;1 | grep &quot;Bootstrap Password:&quot; 3：引导密码示例： [INFO] Bootstrap Password: 7fwjjw4ldcmnq8ghns22q7nhl5lrznwwt9p9vjljfjc6tqbcvhxmwq 按照向导说明并单击 Continue 以进入 Rancher UI 主页面。 在 Rancher UI 中，你可以管理 local 集群、节点等。如需更多信息，请参阅 Rancher 文档。","keywords":""},{"title":"离线运行","type":0,"sectionRef":"#","url":"1.9-tech-preview/how-to-guides/running-air-gapped","content":"","keywords":""},{"title":"Windows 用户须知​","type":1,"pageTitle":"离线运行","url":"1.9-tech-preview/how-to-guides/running-air-gapped#windows-用户须知","content":"本文档的环境变量使用 Powershell 语法。如果你使用的是 Command shell，看到 $env:FOO 环境变量的引用时，请将其替换为 %FOO%。 "},{"title":"网络敏感区域​","type":1,"pageTitle":"离线运行","url":"1.9-tech-preview/how-to-guides/running-air-gapped#网络敏感区域","content":"Rancher Desktop 假设有两个的区域的网络可用，并会在离线的情况下进行恢复： 将 Kubernetes k3s 镜像拉入 k3s 缓存目录 使用 kuberlr 作为对 kubectl 的版本感知包装器，因此客户端与 Kubernetes Server 的差异不会超过一个次要版本。 "},{"title":"现有 Deployment​","type":1,"pageTitle":"离线运行","url":"1.9-tech-preview/how-to-guides/running-air-gapped#现有-deployment","content":"如果 Rancher Desktop 安装在最初就具有网络访问权限的主机上，在关闭网络连接后，Rancher Desktop 仍能在该主机上运行。但是，下拉菜单中可用的 Kubernetes 版本会限制为已下载并存储在缓存中的版本。 由于 kuberlr 包装器（Windows 用户需要为每个可执行实用程序文件添加 .exe 后缀），因此使用 kubectl 客户端会存在一个问题。 在这种情况下，虽然我们的系统在初始化时已经连接到互联网，但是后续使用时会让主机脱机使用。 假设 rancher-desktop 缓存中有三个版本的 k3s： 1.24.3 1.21.14 1.19.16 假设在这个系统上我们只有在使用 1.24.3 和 1.21.14 时运行了 kubectl。换言之，~/.kuberlr/PLATFORM-ARCH/ 目录（Windows 上为$env:HOMEDRIVE%\\$env:HOMEPATH/.kuberlr/windows-amd64）只包含两个文件： kubectl1.24.3 kubectl1.21.14 如果我们将系统脱机，并通过 UI 切换到 Kubernetes 1.19.16，则系统会在运行 kubectl 的时候失败。 问题在于 kubectl 是 kuberlr 的别名，它会尝试下载 kubectl 1.19.16 并将它安装到 .kuberlr 目录中，但却无法进行访问。 因此在这种情况下，最好的方法是选择缓存中每个可用的 Kubernetes 版本，并运行 kubectl --context rancher-desktop cluster-info 来确保安装了适当版本的 kubectl 客户端，以便在断开连接时能连接系统。 你可以手动安装版本化的 kubectl，具体内容会在下一节中介绍。 "},{"title":"准备离线系统​","type":1,"pageTitle":"离线运行","url":"1.9-tech-preview/how-to-guides/running-air-gapped#准备离线系统","content":"此处假设你有某种移动媒体，你可以将其填充到联网系统上，然后移至离线系统中。 要让 Rancher Desktop 离线运行，你需要填充两个目录： Cache 目录​ 要填充源磁盘（我们在此将其称为 %SOURCEDISK%，实际上它也可能是某种可移动设备，例如 USB 驱动器），你需要以下文件： k3s-versions.json：该文件由 Rancher Desktop 创建。它从 https://update.k3s.io/v1-release/channels 读取原始 JSON 文件并将其转换为不同类型的 JSON 文件。目前没有实用程序来进行这种转换。获取此文件的最简单方法是在连接的系统上运行 Rancher Desktop 并保存 CACHE/k3s-versions.json 文件（请参阅下方不同系统的 CACHE 位置）。Kubernetes K3s 镜像的 Tar 包。它们列在 https://github.com/k3s-io​​/k3s/releases。如果你使用的是 k3s v1.26.1 及更高版本，你需要为 AMD/Intel 主机下载 k3s-airgap-images-amd64.tar，为 M1 主机下载 k3s-airgap-images-arm64.tar，或下载相应的 *.tar.zst 压缩包。最后，你需要下载所选版本的 k3s 可执行文件。例如，以下命令将让你离线的情况下使用 K3s v1.24.3 build 1： cd .../CACHE mkdir v1.24.3+k3s1 cd v1.24.3+k3s1 wget https://github.com/k3s-io/k3s/releases/download/v1.24.3%2Bk3s1/k3s-airgap-images-amd64.tar wget https://github.com/k3s-io/k3s/releases/download/v1.24.3%2Bk3s1/sha256sum-amd64.txt wget https://github.com/k3s-io/k3s/releases/download/v1.24.3%2Bk3s1/k3s  WindowsmacOSLinux 在 Linux 上，缓存目录是 $HOME/.cache/rancher-desktop，你可以运行以下命令进行填充： CACHEDIR=$HOME/.cache/rancher-desktop mkdir -p $CACHEDIR/k3s cp $SOURCEDISK/k3s-versions.json $CACHEDIR/ cp -r $SOURCEDISK/v&lt;MAJOR&gt;.&lt;MINOR&gt;.&lt;PATCH&gt;+k3s&lt;BUILD&gt; $CACHEDIR/k3s/  kuberlr 目录​ 这个目录的位置更直接，在所有平台上，该目录都位于 HOME/.kuberlr/PLATFORM-ARCH，其中： HOME 是主目录。通常情况下，在 Windows 上为 $env:HOMEDRIVE%\\$env:HOMEPATH，在 macOS 和 Linux 上为 ~ 或 $HOME。PLATFORM 是 windows、linux 或 darwin。ARCH 在 M1 主机上是 aarch64，在其它主机上是 amd64。 要进行填充，请确定你要使用的 Kubernetes 版本，并联网下载适当的可执行文件。它们将位于： WindowsmacOSLinux https://dl.k8s.io/VERSION/bin/PLATFORM/CPU/kubectl 其中： VERSION 的格式是 vMAJOR.MINOR.PATCH（如 v1.22.1）PLATFORM 是 darwin、linux 或 windowsCPU 在 M1 主机上是 arm64，在其他主机上是 amd64 例如，要获取使用 Kubernetes v1.22 且用于 Windows 的 kubectl，此 Windows 命令 shell（不是 PowerShell）命令会将其放在 SOURCEDISK 上： wget -O %SOURCEDISK/kubectl1.22.1.exe https://dl.k8s.io/v1.22.1/bin/windows/amd64/kubectl.exe  版本说明​ Kubectl 客户端保证使用主要版本相同的 Server，且它们最多只相差一个次要版本。例如，如果你的组织使用的 Kubernetes 版本是 v1.21.x、v1.22.x 和 v1.23.x，对于任何 x 补丁版本，你只需在 .kuberlr 目录中安装 kubectl1.22.x 即可。但是，如果你复制一个 Kubernetes v1.24.x 到 CACHE 目录，你需要确保 .kuberlr 目录中也有一个兼容的 kubectl（v1.23.x、v1.24.x 或 v1.25.x 中的其中一个即可）。 "},{"title":"设置 NGINX Ingress Controller","type":0,"sectionRef":"#","url":"1.9-tech-preview/how-to-guides/setup-NGINX-Ingress-Controller","content":"","keywords":""},{"title":"步骤​","type":1,"pageTitle":"设置 NGINX Ingress Controller","url":"1.9-tech-preview/how-to-guides/setup-NGINX-Ingress-Controller#步骤","content":"在 Kubernetes Settings 页面取消选中 Enable Traefik 来禁用 Traefik。你可能需要退出并重新启动 Rancher Desktop 才能使更改生效。 通过 helm 或 kubectl 部署 NGINX Ingress Controller： helmkubectl helm upgrade --install ingress-nginx ingress-nginx \\ --repo https://kubernetes.github.io/ingress-nginx \\ --namespace ingress-nginx --create-namespace  等待 ingress pod 运行： kubectl get pods --namespace=ingress-nginx  创建示例 deployment 和关联的 service： kubectl create deployment demo --image=nginx --port=80 kubectl expose deployment demo  创建 ingress 资源。以下命令使用了映射到 localhost 的主机： kubectl create ingress demo-localhost --class=nginx --rule=&quot;demo.localdev.me/*=demo:80&quot;  将本地端口转发到 Ingress Controller： kubectl port-forward --namespace=ingress-nginx service/ingress-nginx-controller 8080:80  现在，如果你访问 http://demo.localdev.me:8080/ ，你应该会看到 NGINX 的欢迎页面。 "},{"title":"Skaffold 与 Rancher Desktop","type":0,"sectionRef":"#","url":"1.9-tech-preview/how-to-guides/skaffold-and-rancher-desktop","content":"Skaffold 与 Rancher Desktop Skaffold 是一个命令行工具，用于 Kubernetes 原生应用程序的持续开发。Skaffold 处理构建、推送和部署应用程序的工作流，并提供用于创建 CI/CD 流水线的构建块。它能让你专注于在本地迭代你的应用程序，Skaffold 则能持续部署到你的本地或远程 Kubernetes 集群。要了解有关 Skaffold 的更多信息，请参阅 Skaffold 项目文档。 为了演示使用 Rancher Desktop 设置 Skaffold 的步骤，Rancher Desktop 文档在此处提供了一个 nodejs 应用程序示例。 重要提示：Skaffold 仅适用于 dockerd (Moby)。因此，请确保在 Rancher Desktop UI 的 Kubernetes Settings 面板中选择了 dockerd 作为运行时。 访问 https://skaffold.dev/docs/install/ 安装 Skaffold。 克隆 Rancher Desktop 文档仓库并在终端中导航到 express-sample，如下所示： cd docs.rancherdesktop.io/assets/express-sample 运行 skaffold init。 根据 Skaffold 文档 的介绍，skaffold init 会遍历你的项目目录并查找 build 配置文件（例如 Dockerfile、build.gradle /pom.xml、package.json、requirements.txt 或 go.mod）。 在我们的示例中，我们将选择 Dockerfile 和 package.json。这将生成你可以修改的初始配置文件。出现提示时，选择 yes 将你的配置写入 skaffold.yaml。 在你的编辑器中，查看你的 app.js 和 manifests.yaml 文件。请注意，在 manifests.yaml 中，你将拥有一个 deployment 配置和一个 service 配置。在测试场景下，仅需要 1 个 replica 即可。 回到你的终端，你会注意到你有两个选项，分别是 skaffold run（允许你构建和部署）和 skaffold dev （允许你进入开发模式自动重新部署）。在此示例中，我们将使用 skaffold dev。 由于你需要对镜像仓库具有推送访问权限，因此你可以使用 docker 登录，也可以设置本地镜像仓库： Docker Hub本地镜像仓库 在运行 skaffold dev 之前，如果你有 Docker Hub 账号，请使用你的 docker 登录。然后，在文件 skaffold.yaml 和 manifests.yaml 中，将 matamagu/express-sample 替换为 YOUR_DOCKER_HUB_USERNAME/express-sample，这是因为 skaffold dev 会将构建的镜像推送到 DockerHub。 在进行开发时，Skaffold 将检测所有更改，并会自动再次执行构建和部署的过程。你将能够看到集群中的任何更改。 在浏览器中访问 localhost:3000，你将看到 express-sample 界面。","keywords":""},{"title":"传输容器镜像","type":0,"sectionRef":"#","url":"1.9-tech-preview/how-to-guides/transfer-container-images","content":"","keywords":""},{"title":"步骤​","type":1,"pageTitle":"传输容器镜像","url":"1.9-tech-preview/how-to-guides/transfer-container-images#步骤","content":"1. 将源环境的镜像保存为 tar 包。 nerdctldocker 保存单个镜像 nerdctl save -o local-image.tar image:tag 保存多个镜像 nerdctl save -o local-images.tar image1:tag1 image2:tag2 将所有镜像保存在命名空间中 下面两个命令使用 jq 进行 JSON 解析。长命令会执行以下步骤： nerdctl -n k8s.io image ls 子命令会获取 k8s.io 命名空间中所有镜像的列表，因此不包括其他命名空间的镜像（例如 default）。jq 子命令会过滤并格式化上一步获取的镜像列表。 命令的 select(.Repository!=\\&quot;&lt;none&gt;\\&quot;) 部分会跳过仓库值为 &lt;none&gt; 的镜像。根据镜像标签的值是否为 &lt;none&gt;，命令的 if (.Tag==&quot;&lt;none&gt;&quot;) then .Repository else (.Repository+&quot;:&quot;+.Tag) end') 部分会将镜像的名称格式化为 &lt;Repository&gt; 或 &lt;Repository&gt;:&lt;Tag&gt;。 最后，命令的 nerdctl -n k8s.io save -o all-local-images-in-namespace.tar 部分会将前两步过滤和格式化的镜像列表保存到 tar 文件中。 BashPowerShell nerdctl -n k8s.io save -o all-local-images-in-namespace.tar $(nerdctl -n k8s.io image ls --format '{{json .}}' | jq -r 'select(.Repository!=&quot;&lt;none&gt;&quot;) | if (.Tag==&quot;&lt;none&gt;&quot;) then .Repository else (.Repository+&quot;:&quot;+.Tag) end')  2. 使用目标环境中保存的 tar 包加载镜像。 nerdctldocker nerdctl load &lt; local-images.tar  "},{"title":"使用 VS Code Docker 扩展来调试容器应用程序","type":0,"sectionRef":"#","url":"1.9-tech-preview/how-to-guides/vs-code-docker","content":"","keywords":""},{"title":"调试容器化应用程序的步骤​","type":1,"pageTitle":"使用 VS Code Docker 扩展来调试容器应用程序","url":"1.9-tech-preview/how-to-guides/vs-code-docker#调试容器化应用程序的步骤","content":"安装并启动 Rancher Desktop。从 Kubernetes Settings 菜单中，将 Container Runtime 选为 dockerd (moby)：  安装并启动 Visual Studio Code 或 Visual Studio Code Insiders。本教程使用 Visual Studio Code：  在扩展市场中安装 Docker 扩展。  你可以使用此 Github 仓库 (https://github.com/bwateratmsft/samples) 中提供的示例。克隆此仓库并在 VS Code 会话中打开 expressapp 文件夹。 打开命令面板（Ctrl+Shift+P、F1 或 Cmd+Shift+P）并运行 “Add Docker Files to Workspace”。由于这是一个 Express 应用程序，因此选择 Node.js 作为应用程序平台，选择 3000（或任何其他可用端口）作为 port。由于这是一个简单的示例，请在 Include optional Docker Compose files 选择 No。此步骤添加了调试应用程序所需的 Dockerfile 和 Launch Configuration。  在代码中插入断点：  在顶部的 Debug 窗口中，将活动调试配置切换为 Docker Node.js Launch。按 F5 以 Debug 模式启动应用程序容器。示例应用程序的登录页面将在你的浏览器中打开，而且代码会在断点处停止执行。你可以在这里调试应用程序，就像应用程序运行在你的主机上一样。   有时候，由于调试进程可能尚未启动，因此应用程序可能不会在第一次运行时在设置的断点处中断。在这种情况下，你可以刷新浏览器来再次触发执行，从而命中断点。你还可以通过在 task.json 文件中设置 inspectMode: 'break' 属性来避免此行为，从而防止应用程序在连接调试器之前运行。 在某些主机上，防火墙设置可能会阻止调试进程在主机和容器进程之间建立连接。在这种情况下，你可以添加防火墙规则，以允许运行容器的 VM 与运行 VS Code 会话的主机进行通信。在 Windows 上，你可以通过在特权 powershell 中运行以下命令来添加防火墙规则： New-NetFirewallRule -Action Allow -Description 'Allow communication from WSL containers' -Direction Inbound -Enabled True -InterfaceAlias 'vEthernet (WSL)' -Name 'WSL Inbound' -DisplayName 'WSL Inbound'  "},{"title":"VS Code Remote Containers","type":0,"sectionRef":"#","url":"1.9-tech-preview/how-to-guides/vs-code-remote-containers","content":"","keywords":""},{"title":"使用示例开发容器的步骤​","type":1,"pageTitle":"VS Code Remote Containers","url":"1.9-tech-preview/how-to-guides/vs-code-remote-containers#使用示例开发容器的步骤","content":"安装并启动 Rancher Desktop。从 Kubernetes Settings 菜单中，将 Container Runtime 选为 dockerd (moby)：  安装并启动 Visual Studio Code 或 Visual Studio Code Insiders。本教程使用 Visual Studio Code：  安装 Remote Development 扩展包：  安装扩展后，你将在侧栏中看到扩展项，左下角有一个显示命令面板的绿色按钮，其中包含与 Remote Development 相关的各种选项/命令：  Microsoft 在此 GitHub 仓库 (https://github.com/microsoft/vscode-dev-containers.git) 中提供了许多示例开发容器。将此仓库克隆到你的本地主机： git clone https://github.com/microsoft/vscode-dev-containers.git  单击窗口左下角的 按钮，然后从命令面板中选择 Open Folder in Container...。浏览克隆仓库中的其中一个示例，例如 javascript-node：   选择示例后，你会在容器加载时看到进度通知 ，容器启动成功后，左下角会显示容器名称 。 容器启动后，在 VS Code IDE 中按 F5 启动示例应用程序。你将看到应用程序已启动并在 localhost:3000 上提供服务：  恭喜！你已经使用 Rancher Desktop 和 VS Code 成功加载并运行了一个示例开发容器。 "},{"title":"后续步骤​","type":1,"pageTitle":"VS Code Remote Containers","url":"1.9-tech-preview/how-to-guides/vs-code-remote-containers#后续步骤","content":"Microsoft 在此处提供了在各种场景中使用开发容器的大量文档。请参阅以下教程，尝试使用与你的需求类似的用例。 现在，体验使用 Rancher Desktop 进行容器化的快乐吧！ "},{"title":"架构","type":0,"sectionRef":"#","url":"1.9-tech-preview/references/architecture","content":"架构 Ranche Desktop 是一个基于 Electron 的应用程序，它包装了其他工具，同时还提供了简单的用户体验。在 macOS 和 Linux 上，Rancher Desktop 利用虚拟机运行 containerd 或 dockerd 和 Kubernetes。适用于 Linux v2 的 Windows Subsystem 可用于 Windows 系统。你只需要下载并运行该应用程序即可。","keywords":""},{"title":"捆绑的实用程序","type":0,"sectionRef":"#","url":"1.9-tech-preview/references/bundled-utilities","content":"捆绑的实用程序 Rancher Desktop 使用多个实用程序/子系统作为依赖项。例如，docker CLI 会与 dockerd 交互，helm 会管理 Chart，而 trivy 用于容器镜像扫描。本文介绍了特定 Rancher Desktop 版本包括的捆绑实用程序版本信息。 Rancher Desktop 版本\t依赖版本v1.8.1\t1.8.1 版本中没有更新的依赖项 v1.8.0 amazon-ecr-credential-helper: 0.6.0 docker: 23.0.1 docker-buildx: 0.10.4 docker-compose: 2.16.0 docker-credential-helpers: 0.6.4 helm: 3.11.2 kuberlr: 0.4.2 nerdctl: 1.2.1 trivy: 0.38.3 v1.7.0 amazon-ecr-credential-helper: 0.6.0 docker: 20.10.21 docker-buildx: 0.9.1 docker-compose: 2.14.0 docker-credential-helpers: 0.6.4 helm: 3.10.2 kuberlr: 0.4.2 nerdctl: 1.0.0 trivy: 0.35.0 v1.6.2\t1.6.2 版本中没有更新的依赖项 v1.6.1\t1.6.1 版本中没有更新的依赖项 v1.6.0 amazon-ecr-credential-helper: 0.6.0 docker: 20.10.17 docker-buildx: 0.9.1 docker-compose: 2.11.1 docker-credential-helpers: 0.6.4 helm: 3.9.4 kuberlr: 0.4.2 nerdctl: 0.23.0 trivy: 0.32.0 ","keywords":""},{"title":"故障排除提示","type":0,"sectionRef":"#","url":"1.9-tech-preview/troubleshooting-tips","content":"故障排除提示 此页面提供了 Rancher Desktop 相关问题的故障排除提示。 问：为什么我在 Rancher Desktop 的 WSL 集成页面下看不到我的 WSL 发行版？​ 答：你可能使用的是 WSL 1 发行版。Rancher Desktop 仅支持 WSL 2 发行版。你可以通过运行 wsl --set-version &lt;distro-name&gt; 2 命令将 WSL 1 发行版转换为 WSL 2 发行版。你还可以运行 wsl --set-default-version 2 命令来将你之后可能安装的所有发行版设置为使用 WSL 2。 问：运行 kubectl config get-contexts 时，我没有看到 Rancher Desktop 的条目，它在哪里？​ 答：Rancher Desktop 将配置放置在默认位置 ~/.kube/config。你的 KUBECONFIG 环境变量可能被设置为在其他位置查找配置文件。 问：Rancher Desktop 卡在 Waiting for Kubernetes API，我该怎么办？​ 答：没有额外信息我们很难确定原因。导航到 Troubleshooting 选项卡并访问日志。然后，转到 Rancher Desktop GitHub 页面并提交附加了你的日志的 Issue。 问：安装 Rancher Desktop 并卸载 Docker Desktop 后，我无法再运行 docker compose，为什么？​ 答：这是 Rancher Desktop 早期版本（1.1.0 之前）的问题。Rancher Desktop 1.1.0 及以上版本附带了 docker-compose，并在 ~/.docker/cli-plugins 提供了 CLI 插件。我们强烈建议你升级到最新版本的 Rancher Desktop。 如果你仍然无法使用 docker-compose，请在 Github上报告这个 Bug。 问：我使用 Homebrew 来安装 Rancher Desktop，但是 brew install rancher-desktop 提示失败，为什么？​ 答：Homebrew cask 的命名约定规定了 -desktop 后缀要从 cask formula 名称中删除。因此，请改用 brew install rancher。 问：尝试在 WSL 上使用 Docker 时，如何修复 permission denied 错误？​ 答：你需要写权限才能访问 docker socket。解决这个问题的方法有很多，以下是常见的方法之一。使用 Ubuntu WSL 命令行： sudo groupadd docker sudo adduser $USER docker sudo chown root:docker /var/run/docker.sock sudo chmod g+w /var/run/docker.sock newgrp docker 问：如何解决 Linux 上的 kubectl: command not found 问题？​ A: 默认情况下，Rancher Desktop 会在 Linux 的 /home/&lt;user&gt;/.local/bin 下创建 kubectl、docker、helm 和 nerdctl 二进制文件的符号链接。要直接从控制台调用这些命令，你可以在控制台中执行以下命令，并执行注销和登录来将目录添加到你的 PATH 环境变量中： echo &quot;export PATH=\\$PATH:/home/$(whoami)/.local/bin&quot; &gt;&gt; ~/.bashrc 问：使用 nerdctl run 运行容器时，如何修复 FATA[0005] subnet 10.4.0.0/24 overlaps with other one on this address space 问题？​ 答：如果路由规则的 IP 地址来自 Iptables 上的冲突子网，你将看到此错误。冲突的路由可能来自主机网络（桥接模式）或 Kubernetes 网络。此问题的快速解决方法是通过命令 wsl --shutdown 关闭 WSL。 警告：关闭 WSL 将停止所有其他发行版以及 rancher-desktop 发行版。 问：在 Windows 上将现有 MSI 降级到较旧的 EXE 版本（1.6.x 或更早版本）时，如何修复 Installation Aborted 错误？​ 答：在 MSI 卸载过程中，如果应该删除的 Windows 注册表项 HKEY_LOCAL_MACHINE\\\\System\\\\CurrentControlSet\\\\Services\\\\EventLog\\\\Application\\\\RancherDesktopPrivilegedService 没有被删除，你将看到此错误。请手动删除注册表项并尝试安装 EXE 版本。你可以在特权 shell 中运行以下命令来删除注册表项： reg.exe delete HKLM\\System\\CurrentControlSet\\Services\\EventLog\\Application\\RancherDesktopPrivilegedService /reg:64 /f 问：为什么启动 Cluster Dashboard 时会出现空白屏幕？​ 答：Cluster Dashboard 可能无法正常运行，因为你主机上的另一个进程正在使用 Dashboard 进程（steve）所依赖的 9080 或 9443 端口。要解决此问题，请识别并终止使用这些端口的进程。你可以使用下面的命令来识别使用主机上特定端口的进程。请注意，在 macOS 和 Linux 上，Rancher Dashboard 进程名为 steve，而在 Windows 上，它是 steve.exe。如果 steve 是唯一使用端口 9080 或 9443 的进程，请不要终止它。 查找使用特定端口的进程的命令。 WindowsmacOSLinux netstat -ano | findstr :9443 ","keywords":""},{"title":"命令参考：rdctl","type":0,"sectionRef":"#","url":"1.9-tech-preview/references/rdctl-command-reference","content":"","keywords":""},{"title":"rdctl 或 rdctl help​","type":1,"pageTitle":"命令参考：rdctl","url":"1.9-tech-preview/references/rdctl-command-reference#rdctl-或-rdctl-help","content":"运行 rdctl 或 rdctl help 查看可用命令的列表： 示例输出 &gt; rdctl help The eventual goal of this CLI is to enable any UI-based operation to be done from the command-line as well. Usage: rdctl [command] Available Commands: api Run API endpoints directly completion Generate the autocompletion script for the specified shell factory-reset Clear all the Rancher Desktop state and shut it down. help Help about any command list-settings Lists the current settings. set Update selected fields in the Rancher Desktop UI and restart the backend. shell Run an interactive shell or a command in a Rancher Desktop-managed VM shutdown Shuts down the running Rancher Desktop application start Start up Rancher Desktop, or update its settings. version Shows the CLI version. Flags: --config-path string config file (default /Users/jan/Library/Application Support/rancher-desktop/rd-engine.json) -h, --help help for rdctl --host string default is localhost; most useful for WSL --password string overrides the password setting in the config file --port string overrides the port setting in the config file --user string overrides the user setting in the config file Use &quot;rdctl [command] --help&quot; for more information about a command.  "},{"title":"rdctl api​","type":1,"pageTitle":"命令参考：rdctl","url":"1.9-tech-preview/references/rdctl-command-reference#rdctl-api","content":"运行 rdctl api / 全局列出所有端点： 示例输出 $ rdctl api / | jq -r .[] GET / GET /v0 GET /v1 GET /v1/about GET /v1/diagnostic_categories GET /v1/diagnostic_checks POST /v1/diagnostic_checks GET /v1/diagnostic_ids PUT /v1/factory_reset PUT /v1/propose_settings GET /v1/settings PUT /v1/settings PUT /v1/shutdown GET /v1/transient_settings PUT /v1/transient_settings  "},{"title":"rdctl api /vX​","type":1,"pageTitle":"命令参考：rdctl","url":"1.9-tech-preview/references/rdctl-command-reference#rdctl-api-vx","content":"运行 rdctl api /v1 列出版本 1 中的所有端点： 示例输出 $ rdctl api /v1 | jq -r .[] GET /v1 GET /v1/about GET /v1/diagnostic_categories GET /v1/diagnostic_checks POST /v1/diagnostic_checks GET /v1/diagnostic_ids PUT /v1/factory_reset PUT /v1/propose_settings GET /v1/settings PUT /v1/settings PUT /v1/shutdown GET /v1/transient_settings PUT /v1/transient_settings  "},{"title":"rdctl api /v0/settings​","type":1,"pageTitle":"命令参考：rdctl","url":"1.9-tech-preview/references/rdctl-command-reference#rdctl-api-v0settings","content":"rdctl api [endpoints] 是对直接使用 API 的用户最有用的命令，因此它们不适合像 rdctl set 一样日常使用。例如： 以下命令 rdctl api /v0/settings --method PUT --body '{&quot;kubernetes&quot;: {&quot;enabled&quot;: false}}'  与以下命令是一样的： rdctl set --kubernetes-enabled=false  只是它没那么简洁和用户友好。 "},{"title":"rdctl list-settings​","type":1,"pageTitle":"命令参考：rdctl","url":"1.9-tech-preview/references/rdctl-command-reference#rdctl-list-settings","content":"CLIAPI 运行 rdctl list-settings 以查看当前的活动配置： 示例输出 &gt; rdctl list-settings { &quot;version&quot;: 6, &quot;application&quot;: { &quot;adminAccess&quot;: false, &quot;pathManagementStrategy&quot;: &quot;rcfiles&quot;, &quot;updater&quot;: { &quot;enabled&quot;: false }, &quot;debug&quot;: false, &quot;telemetry&quot;: { &quot;enabled&quot;: true }, &quot;autoStart&quot;: false, &quot;startInBackground&quot;: false, &quot;hideNotificationIcon&quot;: false, &quot;window&quot;: { &quot;quitOnClose&quot;: false } }, &quot;virtualMachine&quot;: { &quot;memoryInGB&quot;: 6, &quot;numberCPUs&quot;: 2, &quot;hostResolver&quot;: true }, &quot;WSL&quot;: { &quot;integrations&quot;: {} }, &quot;containerEngine&quot;: { &quot;allowedImages&quot;: { &quot;enabled&quot;: false, &quot;patterns&quot;: [ &quot;docker.io&quot; ] }, &quot;name&quot;: &quot;moby&quot; }, &quot;kubernetes&quot;: { &quot;version&quot;: &quot;&quot;, &quot;port&quot;: 6443, &quot;enabled&quot;: false, &quot;options&quot;: { &quot;traefik&quot;: true, &quot;flannel&quot;: true }, &quot;ingress&quot;: { &quot;localhostOnly&quot;: false } }, &quot;portForwarding&quot;: { &quot;includeKubernetesServices&quot;: false }, &quot;images&quot;: { &quot;showAll&quot;: true, &quot;namespace&quot;: &quot;k8s.io&quot; }, &quot;diagnostics&quot;: { &quot;showMuted&quot;: false, &quot;mutedChecks&quot;: {} }, &quot;experimental&quot;: { &quot;virtualMachine&quot;: { &quot;type&quot;: &quot;qemu&quot;, &quot;useRosetta&quot;: false, &quot;socketVMNet&quot;: false, &quot;mount&quot;: { &quot;type&quot;: &quot;reverse-sshfs&quot;, &quot;9p&quot;: { &quot;securityModel&quot;: &quot;none&quot;, &quot;protocolVersion&quot;: &quot;9p2000.L&quot;, &quot;msizeInKB&quot;: 128, &quot;cacheMode&quot;: &quot;mmap&quot; } }, &quot;networkingTunnel&quot;: false } }, &quot;extensions&quot;: { &quot;docker/logs-explorer-extension:0.2.2&quot;: true } }  "},{"title":"rdctl set​","type":1,"pageTitle":"命令参考：rdctl","url":"1.9-tech-preview/references/rdctl-command-reference#rdctl-set","content":"CLIAPI 运行 rdctl set [flags] 来设置属性。在大多数情况下，Kubernetes 会在运行 set 命令时重置。你可以通过在单个命令中使用链接来设置多个属性。下面是一些参考示例： 示例输出 &gt; rdctl set --kubernetes-enabled=false &gt; rdctl set --container-engine docker --kubernetes-version 1.21.2  "},{"title":"rdctl shutdown​","type":1,"pageTitle":"命令参考：rdctl","url":"1.9-tech-preview/references/rdctl-command-reference#rdctl-shutdown","content":"CLIAPI 运行 rdctl shutdown 来正常关闭 Rancher Desktop： 示例输出 &gt; rdctl shutdown Shutting down.  "},{"title":"rdctl start​","type":1,"pageTitle":"命令参考：rdctl","url":"1.9-tech-preview/references/rdctl-command-reference#rdctl-start","content":"CLIAPI 运行 rdctl start 来确保 Rancher Desktop 按照要求运行和配置： 示例输出 &gt; rdctl start --container-runtime dockerd -- kubernetes-version 1.19.3  "},{"title":"rdctl version​","type":1,"pageTitle":"命令参考：rdctl","url":"1.9-tech-preview/references/rdctl-command-reference#rdctl-version","content":"运行 rdctl version 来查看当前 rdctl CLI 的版本： 示例输出 &gt; rdctl version rdctl client version: 1.1.0, targeting server version: v1  "},{"title":"使用容器","type":0,"sectionRef":"#","url":"1.9-tech-preview/tutorials/working-with-containers","content":"","keywords":""},{"title":"运行容器​","type":1,"pageTitle":"使用容器","url":"1.9-tech-preview/tutorials/working-with-containers#运行容器","content":"要使用默认的 bridge CNI 网络 (10.4.0.0/24) 运行容器： nerdctldocker nerdctl run -it --rm alpine  要使用 BuildKit 构建镜像： nerdctldocker nerdctl build -t foo /some-dockerfile-directory nerdctl run -it --rm foo  要使用 BuiltKit 进行构建并将输出发送到本地目录： nerdctldocker nerdctl build -o type=local,dest=. /some-dockerfile-directory  "},{"title":"Docker Compose​","type":1,"pageTitle":"使用容器","url":"1.9-tech-preview/tutorials/working-with-containers#docker-compose","content":"Docker Compose 是一个用于定义和运行多容器 Docker 应用程序的工具。 nerdctldocker nerdctl-compose CLI 用于与 docker-compose 兼容： nerdctl compose up -d nerdctl compose down  "},{"title":"暴露端口​","type":1,"pageTitle":"使用容器","url":"1.9-tech-preview/tutorials/working-with-containers#暴露端口","content":"要为容器公开端口 8000： nerdctldocker nerdctl run -d -p 8000:80 nginx  然后，你可以在浏览器中访问 http://localhost:8000/ 来访问容器： 注意：默认情况下，暴露的端口可以在 macOS 和 Linux 上的所有网络接口上访问。然而，在 Windows 上，暴露的端口只能通过 localhost 网络接口访问（参见 issue #1180）。目前的一个解决方法是在 Windows 主机上配置 portproxy，从而将端口公开给其他网络接口。 netsh interface portproxy add v4tov4 listenport=8080 listenaddress=0.0.0.0 connectport=8080 connectaddress=localhost  "},{"title":"定位 Kubernetes 命名空间​","type":1,"pageTitle":"使用容器","url":"1.9-tech-preview/tutorials/working-with-containers#定位-kubernetes-命名空间","content":"你还可以通过 containerd 使用 --namespace 参数来定位 Kubernetes 命名空间。请注意 docker 不使用命名空间。 nerdctl nerdctl --namespace k8s.io build -t demo:latest /code/demos/rd/anvil-app nerdctl --namespace k8s.io ps  "},{"title":"诊断","type":0,"sectionRef":"#","url":"1.9-tech-preview/ui/diagnostics","content":"诊断 Diagnostics 功能通过在后台运行多项检查来检测环境中的常见问题（例如不满足最低要求、配置错误等），帮助你自行排除和修复 Rancher Desktop 应用程序的问题。 注意：Rancher Desktop 不会将诊断数据发送到任何远程服务器进行处理或存储。 WindowsmacOSLinux 每次启动应用程序时都会运行诊断检查。如果发现任何问题，则失败检查的数量会显示在左侧导航栏中的 Diagnostics 菜单文本的旁边。Diagnostics 选项卡会显示诊断测试的结果，突出显示需要注意的区域，并指导你解决问题。 如果你进行了非标准设置，并且知道这些检查不适用于你的情况，你可以在此选项卡上 mute/unmute 个别检查。你还可以随时重新运行诊断程序，从而验证你对环境所做的更改是否已经解决了问题。","keywords":""},{"title":"Extensions","type":0,"sectionRef":"#","url":"1.9-tech-preview/ui/extensions","content":"Extensions WindowsmacOSLinux The Catalog tab acts as a marketplace for available Rancher Desktop Extensions. Users can view and click on extensions for further description and the ability to install extensions directly through the UI. Search​ Users can make use of the Search functionality to query through available extensions. WindowsmacOSLinux The Installed tab is a view for all installed extensions on your Rancher Desktop application. Name​ A list of names of installed extensions. Users can directly uninstall extensions by clicking the Uninstall button for the respective extension on the right hand side. WindowsmacOSLinux The Details tab can be reached when clicking on an available extension on the Catalog tab. Users can see a description of the extension, as well as the most recent update, platform compatibility, and latest version. Install/Uninstall​ This button can be used to install or uninstall extensions depending on your use case.","keywords":""},{"title":"通用","type":0,"sectionRef":"#","url":"1.9-tech-preview/ui/general","content":"通用 General 选项卡提供了社区 channel 的信息，用户可以通过这些 channel 联系 Rancher Desktop 团队和社区，并提出问题、报告错误或讨论 Rancher Desktop。 WindowsmacOSLinux","keywords":""},{"title":"使用镜像","type":0,"sectionRef":"#","url":"1.9-tech-preview/tutorials/working-with-images","content":"","keywords":""},{"title":"常规用法​","type":1,"pageTitle":"使用镜像","url":"1.9-tech-preview/tutorials/working-with-images#常规用法","content":"使用任何一种工具都需要 Rancher Desktop 与适当的容器运行时一起运行。对于 nerdctl，使用 containerd 运行时。对于 docker，使用 Moby 运行时。 要了解所有命令选项并显示帮助文档，运行： nerdctldocker nerdctl -h 与 Docker 不同，containerd 具有自己的命名空间。默认情况下，nerdctl 镜像存储在 default 命名空间中。如果你希望你的镜像可供 Kubernetes 使用，请使用 --namespace k8s.io 或 -n k8s.io CLI 参数。你还可以使用 --namespace &lt;NAMESPACE_NAME&gt; 选项来切换到 default 或其他命名空间。请注意，nerdctl 命名空间独立于 Kubernetes 和 kubectl 命名空间。 "},{"title":"列出镜像​","type":1,"pageTitle":"使用镜像","url":"1.9-tech-preview/tutorials/working-with-images#列出镜像","content":"要查看当前可用的镜像，请运行以下命令： nerdctldocker nerdctl images  "},{"title":"构建镜像​","type":1,"pageTitle":"使用镜像","url":"1.9-tech-preview/tutorials/working-with-images#构建镜像","content":"nerdctldocker 构建镜像与现有工具的操作相似。你可以在具有 Dockerfile（Dockerfile 使用了一个 scratch 镜像）的路径上运行 nerdctl： nerdctl build . [+] Building 0.1s (4/4) FINISHED =&gt; [internal] load build definition from Dockerfile =&gt; =&gt; transferring dockerfile: 31B =&gt; [internal] load .dockerignore =&gt; =&gt; transferring context: 2B =&gt; [internal] load build context =&gt; =&gt; transferring context: 33B =&gt; CACHED [1/1] ADD anvil-app / nerdctl 具有在构建时进行标记的选项以及一些其他选项： nerdctl build -t TAG . 要构建用于 Kubernetes 的镜像，请指定 k8s.io 命名空间，如下所示： nerdctl build -n k8s.io .  "},{"title":"构建本地镜像​","type":1,"pageTitle":"使用镜像","url":"1.9-tech-preview/tutorials/working-with-images#构建本地镜像","content":"为了演示构建本地镜像和运行应用程序的步骤，Rancher Desktop 的 docs 仓库提供了一个示例 nodejs 应用程序。首先，克隆仓库并 cd 到终端中的 assets/express-sample 中。 运行以下命令来使用 Dockerfile 构建镜像： nerdctldocker nerdctl --namespace k8s.io build -t expressapp:v1.0 .  运行以下命令来运行容器： kubectl run --image expressapp:v1.0 expressapp kubectl port-forward pods/expressapp 3000:3000  注意：添加 latest 标签时，请务必同时指定以下内容： imagePullPolicy: Never  "},{"title":"标记镜像​","type":1,"pageTitle":"使用镜像","url":"1.9-tech-preview/tutorials/working-with-images#标记镜像","content":"如果要标记已构建的现有镜像，你可以运行以下命令： nerdctldocker nerdctl tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]  "},{"title":"删除镜像​","type":1,"pageTitle":"使用镜像","url":"1.9-tech-preview/tutorials/working-with-images#删除镜像","content":"要删除镜像，请运行以下命令： nerdctldocker nerdctl rmi IMAGE  "},{"title":"镜像","type":0,"sectionRef":"#","url":"1.9-tech-preview/ui/images","content":"","keywords":""},{"title":"Scanning Images​","type":1,"pageTitle":"镜像","url":"1.9-tech-preview/ui/images#scanning-images","content":"此功能使用 Trivy 来扫描你的镜像，从而查找漏洞和配置问题。 要扫描镜像： 从镜像列表中，找到要扫描的镜像。单击 ⋮ &gt; Scan。将显示按严重程度排序的漏洞摘要。单击 &gt; 查看​​每个漏洞的详细信息，其中包括漏洞详情的链接。 "},{"title":"Adding Images​","type":1,"pageTitle":"镜像","url":"1.9-tech-preview/ui/images#adding-images","content":"Pulling Images​ 此选项可以让你将镜像从镜像仓库拉取到你的虚拟机中。 要拉取镜像： 单击右上角的 + 按钮。单击 Pull 选项卡。输入要拉取的镜像的名称。 注意：默认情况下，镜像是从 Docker Hub 中提取的（格式：repo/image[:tag]）。要从其他镜像仓库中拉取，请包含主机名 registry.example.com/repo/image[:tag]。 单击 Pull。 Building Images​ 使用此选项构建镜像并将其添加到你的虚拟机。 要构建镜像： 单击右上角的 + 按钮。单击 Build 选项卡。输入构建的镜像的名称，例如 repo/image、repo/image:tag、registry.example.com/repo/image 或 registry.example.com/repo/image:tag。单击 Build。在文件浏览器中，选择要用来构建镜像的 Dockerfile。 "},{"title":"端口转发","type":0,"sectionRef":"#","url":"1.9-tech-preview/ui/port-forwarding","content":"端口转发 WindowsmacOSLinux 如需转发端口： 找到 Service 并单击 Forward，指定要使用的端口或使用随机分配的端口。点击 ✓ 按钮来确认你的选择。可选：单击 Cancel 来移除分配的端口。","keywords":""},{"title":"容器引擎","type":0,"sectionRef":"#","url":"1.9-tech-preview/ui/preferences/container-engine","content":"","keywords":""},{"title":"General​","type":1,"pageTitle":"容器引擎","url":"1.9-tech-preview/ui/preferences/container-engine#general","content":"为 Rancher Desktop 设置容器运行时。用户可以选择 containerd 为容器提供命名空间，也可以使用 nerdctl 或 dockerd (moby) 来启用 D​​ocker API 和 Docker CLI。一次只能运行一个容器运行时。 WindowsmacOSLinux 容器引擎​ 切换到不同容器运行时的时候：使用当前容器运行时构建或拉取的工作负载和镜像在切换的容器运行时不可用。 "},{"title":"Allowed Images​","type":1,"pageTitle":"容器引擎","url":"1.9-tech-preview/ui/preferences/container-engine#allowed-images","content":"Allowed Images 选项卡用于控制可以在 Rancher Desktop 中访问的镜像仓库工件。例如，你可能只想从组织的私有镜像仓库，或仅从组织镜像仓库中特定部门的命名空间中拉取容器镜像。你可以指定镜像名称模式，从而仅允许访问特定镜像仓库和/或仓库的镜像。 WindowsmacOSLinux Allowed image patterns​ 选中 Enable 复选框，这样，Rancher Desktop 在拉取或推送镜像时将应用指定的模式，这意味着只允许名称至少与指定模式之一匹配的镜像。 你可以使用 + 和 - 按钮来添加/删除镜像名称模式。 如何指定 Allowed Image Patterns​ 你可以使用 [registry/][:port/][organization/]repository[:tag] 格式来指定 Allowed Image Pattern（允许的镜像模式）。 如果未指定 Allowed Image Patterns， registry 默认为 Docker Hub (docker.io)。port 默认为 433。Docker Hub 的 organization 默认为 library，不适用于其他镜像仓库。tag 默认为任何内容，不仅仅是 latest。 注意：按 tag 过滤实际上不起作用；相应的摘要 (repository@digest) 也必须添加到允许列表中才行，因此不实用。如果你有需要根据标签进行过滤的用例，请提交 Github issue。 示例​ 模式\t意义busybox\t允许 docker.io 镜像仓库的 library 组织中的 busybox 仓库。 suse/\t允许 docker.io 镜像仓库的 suse 组织中的任何镜像。 注意：仓库末尾的斜杠表示后面跟着单独的一段，例如 suse/nginx，而不是 suse/cap/uaa。 suse//\t允许 docker.io 镜像仓库的 suse 组织中的任何镜像。 注意：仓库末尾的双斜杠表示后面跟着一个或多个段，例如 suse/cap/uaa。 registry.internal:5000\t允许来自 registry.internal:5000 镜像仓库的任何镜像。 registry.suse.com/nginx\t允许来自 registry.suse.com 镜像仓库的镜像 nginx。 注意：DockerHub 之外的镜像仓库没有顶层组织的概念，因此没有默认的 library 组织。 "},{"title":"应用程序","type":0,"sectionRef":"#","url":"1.9-tech-preview/ui/preferences/application","content":"应用程序 WindowsmacOSLinux General​ Administrative Access​ 允许 Rancher Desktop 在启动某些操作时获得管理访问权限（sudo 权限）。这能用于增强功能，包括桥接网络和默认 docker socket 支持。更改会在 Rancher Desktop 下次启动时应用。 Automatic Updates​ 当一个新版本发布时，用户会得到一个通知和升级目标的发行版说明。无论是否启用了自动更新，用户都会收到通知。如果启用此选项，更新会被下载，然后在下次启动 Rancher Desktop 时安装更新。 Statistics​ 该选项允许 Rancher Desktop 收集关于你与 Rancher Desktop 应用程序交互的信息，但不会收集你运行的工作负载等信息。 Behavior​ Startup​ Rancher Desktop 可以作为用户登录的一部分自动启动。同时也将考虑页面中的其他行为设置。 Background​ Rancher Desktop 在后台启动时不会显示应用程序窗口，也不会在任务切换程序或任务栏中显示条目。应用程序窗口可以通过通知图标的右键菜单打开。 已经在后台运行的 Rancher Desktop 再次启动时将显示应用程序窗口，而且应用程序将添加到任务切换程序和任务栏中。通知图标也不可用时，这方法可用于再次访问后台应用程序。 即使主应用程序窗口关闭（应用程序因此从任务切换程序和任务栏中删除），Rancher Desktop 通常仍然在后台运行，但也可以配置为在主窗口关闭时终止程序。 Notification Icon​ Rancher Desktop 通过通知图标来显示应用程序的状态。图标的右键菜单提供了更多状态信息，并提供了应用程序其他功能的快速访问入口。此选项将禁用通知图标的创建。 Environment​ 配置 PATH​ Rancher Desktop 附带命令行实用程序，用于与其各种功能交互。这些实用程序包括 docker、nerdctl、kubectl 和 helm 等。这些实用程序位于 ~/.rd/bin，因此你可以通过运行 ls ~/.rd/bin 来查看你的安装中包含了哪些实用程序。 要使用这些实用程序，~/.rd/bin 必须位于 shell 的 PATH 变量中。 有两种执行此操作的选项： Automatic：PATH 管理将通过修改你的 shell .rc 文件来将 ~/.rd/bin 添加到 PATH 中。Manual：PATH 管理不会改变任何东西 - 在这种模式下，你必须手动将 ~/.rd/bin 添加到 PATH 中。","keywords":""},{"title":"虚拟机（macOS 和 Linux）","type":0,"sectionRef":"#","url":"1.9-tech-preview/ui/preferences/virtual-machine","content":"虚拟机（macOS 和 Linux） macOSLinux Memory​ 分配给 Rancher Desktop 的内存。可选范围取决于你的系统。红色区域表示分配可能会影响系统服务。 CPU​ 分配给 Rancher Desktop 的 CPU 数量。可选范围取决于你的系统。红色区域表示分配可能会影响系统服务。","keywords":""},{"title":"Kubernetes","type":0,"sectionRef":"#","url":"1.9-tech-preview/ui/preferences/kubernetes","content":"Kubernetes WindowsmacOSLinux Enable Kubernetes​ 此选项允许你启用或禁用 Kubernetes。禁用 Kubernetes 后，你可以只运行 containerd 或 dockerd 来减少资源消耗。默认情况下，Kubernetes 是启用的。 要启用/禁用 Kubernetes，只需选中/取消选中 Enable Kubernetes 复选框。启用/禁用 Kubernetes 时，该应用程序将重新启动。禁用 Kubernetes 不会删除现有资源，重新启用 Kubernetes 时，你可以再次使用这些资源。 Kubernetes Version​ 该选项显示了 Rancher Desktop 实例可以使用的 Kubernetes 版本列表。 升级时： 会进行检查，看目标 Kubernetes 版本是否可以在本地使用。如果没有，它会下载对应文件。保留工作负载。保留镜像。 降级时： 移除工作负载。保留镜像。 要切换版本： 点击 Kubernetes version 下拉菜单。选择要转换的版本。 Kubernetes Port​ 设置 Kubernetes 暴露的端口。如果有多个 K3s 实例正在运行，使用此设置可以避免端口冲突。 Enable Traefik​ 此选项允许你启用或禁用 Traefik。禁用 Traefik 后，你可以释放端口 80 和 443，以便将其用于备用 ingress 配置。默认情况下，Traefik 是启用的。 禁用 Traefik 不会删除现有资源。","keywords":""},{"title":"WSL (Windows)","type":0,"sectionRef":"#","url":"1.9-tech-preview/ui/preferences/wsl","content":"WSL (Windows) 该选项使 Rancher Desktop Kubernetes 配置能够被任何 WSL 配置的 Linux 发行版所访问。一旦启用，你可以使用 WSL 发行版中的 kubectl 等工具与 Rancher Desktop Kubernetes 集群进行通信。 WSL 让你在所有 Linux 发行版中全局配置内存和 CPU 分配。请参阅 WSL 文档中的说明。","keywords":""},{"title":"故障排除","type":0,"sectionRef":"#","url":"1.9-tech-preview/ui/troubleshooting","content":"","keywords":""},{"title":"Show Logs​","type":1,"pageTitle":"故障排除","url":"1.9-tech-preview/ui/troubleshooting#show-logs","content":"使用此选项打开包含所有 Rancher Desktop 日志文件的文件夹。 Enable Debug Mode​ 启用 debug 级别日志记录。 "},{"title":"Reset Kubernetes​","type":1,"pageTitle":"故障排除","url":"1.9-tech-preview/ui/troubleshooting#reset-kubernetes","content":"重置 Kubernetes 并删除所有工作负载和配置。在重置之前，用户会看到确认信息以及删除容器镜像的选项。 要重置 Kubernetes： 单击 Reset Kubernetes，然后，你会看到一个确认窗口。可选：选择是否同时删除容器镜像。单击 Reset。Kubernetes 会停止并重新启动。 "},{"title":"Factory Reset​","type":1,"pageTitle":"故障排除","url":"1.9-tech-preview/ui/troubleshooting#factory-reset","content":"删除集群和所有其他 Rancher Desktop 设置。必须再次执行初始设置流程。 要恢复出厂设置： 单击 Reset。然后，你会看到一个确认窗口。可选：选择是否保留缓存的 Kubernetes 镜像。单击 Factory Reset。Kubernetes 会停止，Rancher Desktop 会关闭。可选：再次启动 Rancher Desktop。 "},{"title":"概述","type":0,"sectionRef":"#","url":"next/","content":"","keywords":""},{"title":"容器管理​","type":1,"pageTitle":"概述","url":"next/#容器管理","content":"Rancher Desktop 提供了构建、推送和拉取容器镜像以及运行容器的功能，这些功能可以通过 Docker CLI（当你选择 Moby/dockerd 作为引擎时）或 nerdctl（当你选择 containerd 作为引擎时）实现，而 nerdctl 是 containerd 项目提供的 &quot;兼容 containerd 的 Docker CLI&quot;。 "},{"title":"Kubernetes​","type":1,"pageTitle":"概述","url":"next/#kubernetes","content":"Kubernetes 内置在 Rancher Desktop 中，由 K3s 提供。K3s 是一个经过认证的轻量级发行版。通过 Rancher Desktop，你能够 选择你的 Kubernetes 版本，并且一键重置 Kubernetes 或 Kubernetes 以及整个容器运行时。 "},{"title":"Rancher 与 Rancher Desktop​","type":1,"pageTitle":"概述","url":"next/#rancher-与-rancher-desktop","content":"虽然 Rancher 和 Rancher Desktop 的名字里都包含 Rancher，但它们的功能是有差别的。Rancher Desktop 不是桌面版 Rancher。Rancher 是管理 Kubernetes 集群的强大解决方案，Rancher Desktop 提供本地 Kubernetes 和容器管理平台，这两种解决方案相辅相成。 如果要在本地系统上运行 Rancher，你可以将 Rancher 安装到 Rancher Desktop 中。 "},{"title":"v1.6.0","type":0,"sectionRef":"#","url":"next/bundled-utilities-version-info/v1.6.0","content":"v1.6.0 amazon-ecr-credential-helper: 0.6.0 docker: 20.10.17 docker-buildx: 0.9.1 docker-compose: 2.11.1 docker-credential-helpers: 0.6.4 helm: 3.9.4 kuberlr: 0.4.2 nerdctl: 0.23.0 trivy: 0.32.0 ","keywords":""},{"title":"v1.7.0","type":0,"sectionRef":"#","url":"next/bundled-utilities-version-info/v1.7.0","content":"v1.7.0 amazon-ecr-credential-helper: 0.6.0 docker: 20.10.21 docker-buildx: 0.9.1 docker-compose: 2.14.0 docker-credential-helpers: 0.6.4 helm: 3.10.2 kuberlr: 0.4.2 nerdctl: 1.0.0 trivy: 0.35.0 ","keywords":""},{"title":"v1.9.0-tech-preview","type":0,"sectionRef":"#","url":"next/bundled-utilities-version-info/v1.9.0-tech-preview","content":"v1.9.0-tech-preview amazon-ecr-credential-helper: 0.6.0 docker: 23.0.3 docker-buildx: 0.10.4 docker-compose: 2.17.2 docker-credential-helpers: 0.6.4 helm: 3.11.3 kuberlr: 0.4.2 nerdctl: 1.3.0 trivy: 0.39.1 ","keywords":""},{"title":"v1.8.0","type":0,"sectionRef":"#","url":"next/bundled-utilities-version-info/v1.8.0","content":"v1.8.0 amazon-ecr-credential-helper: 0.6.0 docker: 23.0.1 docker-buildx: 0.10.4 docker-compose: 2.16.0 docker-credential-helpers: 0.6.4 helm: 3.11.2 kuberlr: 0.4.2 nerdctl: 1.2.1 trivy: 0.38.3 ","keywords":""},{"title":"常见问题","type":0,"sectionRef":"#","url":"next/faq","content":"常见问题 本文包含了用户常见的 Rancher Desktop 问题和解答。 问：Rancher Desktop 是 Rancher 的桌面版吗？​ 答：不是。Rancher Desktop 不是桌面版 Rancher。 虽然 Rancher 和 Rancher Desktop 的名字里都包含 Rancher，但它们的功能是有差别的。这两种解决方案相辅相成。 Rancher 是一个完整的软件堆栈，用于跨任何基础设施管理多个 Kubernetes 集群。 Rancher Desktop 在桌面上提供容器管理和 Kubernetes 实例，用于支持本地开发用例。 问：Rancher Desktop 中有 Kubernetes Cluster Explorer 吗？​ 答：是的，Rancher Dashboard 作为功能预览包含在 1.2.1 版本中。你可以通过单击系统托盘菜单中的 Dashboard 选项来调用仪表板。 要了解有关 Rancher Desktop 的更多信息，请单击此处。 要了解有关 Rancher 的更多信息，请单击此处。 问：我可以同时安装 Docker Desktop 与 Rancher Desktop 吗？​ 答：可以，但它们不能同时运行，因为 Rancher Desktop 和 Docker Desktop 使用相同的 Docker socket（/var/run/docker.sock）。在启动一个之前，一定要先停止另一个。 问：如何彻底卸载 Rancher Desktop？​ 答：首先，执行恢复出厂设置，然后卸载该应用程序。卸载过程因操作系统而异。如需更多信息，请参阅此处。 问：Windows 上的 DNS VPN 有哪些支持（如果有）？​ 答：Windows 的替代 DNS 解析器已实现，用来解决 Windows 上的某些 VPN 问题。它支持通过 VPN 连接进行 DNS 查找。它必须通过编辑内部配置文件手动启用。 问：“WSL 集成”选项卡有什么作用？​ 答：它能使 Kubernetes 配置可以在显示的 WSL 发行版中访问，以便你使用 kubectl 之类的命令与 Kubernetes 进行通信。 问：我在哪里可以找到详细的日志？​ 答：点击 Troubleshooting 标签，然后点击 Show Logs。 问：如何为 Traefik Ingress Controller 启用仪表板？​ 答：出于安全原因，Traefik 仪表板默认不公开。但是，你可以通过多种方式公开仪表板。你可以使用下面显示的两种方法之一。 使用 port-forward 来启用仪表板访问​ kubectl port-forward -n kube-system $(kubectl -n kube-system get pods --selector &quot;app.kubernetes.io/name=traefik&quot; --output=name) 9000:9000 在浏览器中访问 http://127.0.0.1:9000/dashboard/ 以查看 Traefik 仪表板。 使用 HelmChartConfig 来启用仪表板访问​ 将以下说明复制到文件中，例如 expose-traefik.yaml： apiVersion: helm.cattle.io/v1 kind: HelmChartConfig metadata: name: traefik namespace: kube-system spec: valuesContent: |- dashboard: enabled: true ports: traefik: expose: true # Avoid this in production deployments logs: access: enabled: true 运行命令： kubectl apply -f expose-traefik.yaml 在浏览器中访问 http://127.0.0.1:9000/dashboard/ 以查看 Traefik 仪表板。 问：如何禁用 Traefik，这样会删除 Traefik 资源吗？​ 答：是的，你可以禁用 Traefik 以释放端口 80 和 443 用于备用 ingress 配置。禁用 Traefik 不会 删除现有资源。Kubernetes Settings 下会默认选择 Enable Traefik 功能，取消选中此框即可禁用它。 如果要删除 Traefik 资源，请在 UI 的 Kubernetes Settings 面板上单击 Reset Kubernetes。 问：是否支持内部容器端口转发？​ 答：是的，从 v1.1.0 起，所有三个平台（Windows、Linux 和 macOS）都支持此功能。 问：文件共享的工作原理与 Docker Desktop 类似吗？是否必须进行任何其他配置才能将卷挂载到 VM？​ 答：目前默认共享以下目录：macOS 上为 /Users/$USER，Linux 上为 /home/$USER，二者均共享 /tmp/rancher-desktop。对于 Windows，所有文件都通过 WSL2 自动共享。 通常无法开箱即用地从主机访问标准的 Docker 卷。 要访问 Linux/macOS 上的其他目录，你必须进行额外的配置。 如果要改变挂载的行为，你也需要进行额外的配置。 问：容器是否能通过 host.docker.internal 回到主机服务？​ 答：是的。在 Windows 上，你可能需要创建防火墙规则来允许主机和容器之间的通信。你可以在特权 powershell 中运行以下命令来创建防火墙规则： New-NetFirewallRule -DisplayName &quot;WSL&quot; -Direction Inbound -InterfaceAlias &quot;vEthernet (WSL)&quot; -Action Allow 问：我不需要 Rancher Desktop 部署的 Kubernetes 集群；如何禁用它以节省资源？​ 答：打开 Rancher Desktop 设置，点击齿轮打开 Preferences，选择 Kuberentes 选项卡，然后取消勾选 Kubernetes Settings 下的 Enable Kubernetes 功能以禁用它。 这将允许你在不为 Kubernetes 分配资源的情况下仅运行 containerd 或 dockerd。 问：Kubernetes Image Manager (kim) 发生了什么？​ 答：从 1.0 版本开始，Kim 不再被支持，而且已被 nerdctl 和 Docker CLI 取代。 问：为什么运行 brew install rancher 时出现 It seems there is already a Binary at '/usr/local/bin/&lt;BINARY&gt;' 的错误？​ 答：如果支持 Rancher Desktop 的工具（Helm、kubectl、nerdctl、docker）已经由 Homebrew 管理，那么由于 Homebrew cask 公式的定义方式，安装会失败。你可以使用 Mac 应用程序进行安装来避免这个问题。 问：我通过 Arch User Repository 安装了 nerdctl，但它不能与 Rancher Desktop 一起使用，为什么？​ 答：对于 Rancher Desktop，nerdctl 必须在 VM 内部而不是在主机上运行。与 Rancher Desktop 一起打包的主机版本只是一个 shell wrapper，用于在 VM 内执行命令。 问：Support Utilities 页面（Rancher Desktop &lt;1.3.0）上的工具未安装，我看到 Insufficient permission to modify /usr/local/bin 错误，我该如何解决？​ 答：当你没有 /usr/local/bin 的权限时就会发生这种情况。改善权限处理的长期解决方案正在开发中。同时，一个临时的解决方法是通过运行 sudo chown $USER /usr/local/bin 来更改 /usr/local/bin 的权限。当你能够写入目录时，Rancher Desktop 就能够创建符号链接。 从 1.3.0 及更高版本开始，我们不再在 /usr/local/bin 中创建符号链接，而是在 ~/.rd/bin 中创建符号链接，并将该目录放在 PATH 中，这样可以避免处理 /usr/local/bin 的写权限和文件冲突。我们强烈建议你升级到最新版本的 Rancher Desktop。 问：Cygwin 与 Rancher Desktop 兼容吗？​ 答：没有，但我们有增加兼容性的计划。 问：如何将 Rancher Desktop 添加到 Windows 的启动程序列表中？​ 答：在 Windows 上，你可以通过不同的方式将程序添加到启动程序列表中。例如，你可以执行以下步骤： 按 Windows+R 打开运行对话框。输入 shell:startup，然后按 Enter 打开 Startup 文件夹。从桌面复制“Rancher Desktop”快捷方式并粘贴到 Startup 文件夹中。重新启动主机。 问：Rancher Desktop 实际将数据卷放在哪里？​ 答： Windows： 打开运行菜单（按 Windows + R）并打开下面的路径（具体取决于活动的容器运行时）： dockerd(moby): \\\\wsl$\\rancher-desktop-data\\var\\lib\\docker\\volumes containerd: \\\\wsl$\\rancher-desktop-data\\var\\lib\\nerdctl\\dbb19c5e\\volumes\\&lt;namespace&gt; macOS 和 Linux： 根据活动的容器运行时，在 (lima) VM 中导航到下面的路径。你可以使用 rdctl shell 访问 VM 中的这些路径。 dockerd(moby): /var/lib/docker/volumes containerd: /var/lib/nerdctl/dbb19c5e/volumes/&lt;namespace&gt; 问：如何将 Rancher Desktop 降级到旧版本​ 答：我们强烈建议你使用包含最新功能和错误修复的当前发行版。但是，如果你想降级到较早的版本，请按照以下步骤操作。 执行 Troubleshooting &gt; Factory Reset。请确保没有在 Factory Reset 对话框中选中 Keep cached Kubernetes images。按照适用于你操作系统的卸载说明卸载当前版本。安装你所需的旧版本。","keywords":""},{"title":"部署配置文件","type":0,"sectionRef":"#","url":"next/getting-started/deployment","content":"","keywords":""},{"title":"启动首选值​","type":1,"pageTitle":"部署配置文件","url":"next/getting-started/deployment#启动首选值","content":"Rancher Desktop 设置如下： 加载 “admin” 部署配置文件（“defaults” 和 “locked”）如果都不存在，则加载 “user” 部署配置文件（同样是 “defaults” 和 “locked”）从 settings.json 文件加载保存的首选项如果没有保存的设置，请改用之前加载的 “defaults” 配置文件将用于启动应用程序的命令行参数值复制到设置中如果设置仍然完全为空，则显示首次运行对话框使用内置应用程序默认值填充任何缺失的值将 “locked” 配置文件中的值复制到当前设置上 用户无法通过 GUI 或 CLI 修改已被配置文件锁定的设置。 如果配置文件存在但无法正确解析，Rancher Desktop 将拒绝加载应用程序。 Rancher Desktop 不会修改或删除部署配置文件。它们不会受到恢复出厂设置或卸载的影响。 配置文件数据的结构与应用程序设置匹配： rdctl list-settings { ... &quot;containerEngine&quot;: { &quot;allowedImages&quot;: { &quot;enabled&quot;: false, &quot;patterns&quot;: [] }, &quot;name&quot;: &quot;containerd&quot; }, ... }  下面针对各系统的文档说明了如何创建部署配置文件，该配置文件将默认容器引擎更改为 moby，禁用 Kubernetes，并将镜像列表锁定为仅允许 busybox 和 nginx。 "},{"title":"配置文件格式和位置​","type":1,"pageTitle":"部署配置文件","url":"next/getting-started/deployment#配置文件格式和位置","content":"不同系统使用的部署配置文件存储格式和位置不同。 WindowsmacOSLinux 在 Linux 上，部署配置文件以 JSON 格式存储。 配置文件的位置是： /etc/rancher-desktop/defaults.json /etc/rancher-desktop/locked.json ~/.config/rancher-desktop.defaults.json ~/.config/rancher-desktop.locked.json 将所有当前设置转换为部署配置文件​ 由于部署配置文件以 JSON 格式存储，因此创建配置文件最简单的方法是将当前应用程序设置保存到配置文件位置，然后使用文本编辑器微调配置文件。 rdctl list-settings &gt; ~/.config/rancher-desktop.defaults.json 默认使用 “moby” 容器引擎并禁用 Kubernetes​ ~/.config/rancher-desktop.defaults.json { &quot;containerEngine&quot;: { &quot;name&quot;: &quot;moby&quot; }, &quot;kubernetes&quot;: { &quot;enabled&quot;: false } } 将镜像列表锁定为仅允许 “busybox” 和 “nginx”​ ~/.config/rancher-desktop.locked.json { &quot;containerEngine&quot;: { &quot;allowedImages&quot;: { &quot;enabled&quot;: true, &quot;patterns&quot;: [&quot;busybox&quot;,&quot;nginx&quot;] } } }  "},{"title":"已知问题和限制​","type":1,"pageTitle":"部署配置文件","url":"next/getting-started/deployment#已知问题和限制","content":"containerEngine.allowedImages 是当前唯一可以锁定的设置。在 macOS 上，格式不正确的配置文件会被忽略，而不是阻止应用程序加载。无法通过部署配置文件设置 diagnostics.showMuted（Windows 上的 WSL.integrations）。在 macOS 和 Linux 上，如果 “defaults” 配置文件未为 application.pathManagementStrategy 配置值，则仍会显示一个简短的首次运行对话框。 "},{"title":"安装","type":0,"sectionRef":"#","url":"next/getting-started/installation","content":"","keywords":""},{"title":"macOS​","type":1,"pageTitle":"安装","url":"next/getting-started/installation#macos","content":""},{"title":"要求​","type":1,"pageTitle":"安装","url":"next/getting-started/installation#要求","content":"Rancher Desktop 在 macOS 上运行需要以下条件： macOS Catalina 10.15 或更高版本。带有 VT-x 的 Apple 芯片 (M1) 或 Intel CPU。连接到互联网。 还建议具备以下条件： 8 GB 内存4 个 CPU 你要运行的工作负载可能还需要一些额外的资源。 "},{"title":"在 macOS 上安装 Rancher Desktop​","type":1,"pageTitle":"安装","url":"next/getting-started/installation#在-macos-上安装-rancher-desktop","content":"转到 GitHub 上的 Releases 页面。找到要下载的 Rancher Desktop 版本。展开 Assets 部分并下载 Rancher.Desktop-X.Y.Z.dmg，其中 X.Y.Z 是 Rancher Desktop 的版本。导航到下载安装程序的目录，并运行安装程序。这个目录通常是下载文件夹。双击 DMG 文件。在打开的访达窗口中，将 Rancher Desktop 图标拖到应用程序文件夹中。导航到应用程序文件夹，然后双击 Rancher Desktop 来启动它。 安装 Rancher Desktop 后，用户可以访问以下支持的工具： Helmkubectlnerdctldocker (moby) "},{"title":"在 macOS 上卸载 Rancher Desktop​","type":1,"pageTitle":"安装","url":"next/getting-started/installation#在-macos-上卸载-rancher-desktop","content":"打开访达 &gt; 应用程序。找到 Rancher Desktop。选中它，然后选择文件 &gt; 移到废纸篓。要删除应用程序，选择访达 &gt; 清倒废纸篓。 "},{"title":"Windows​","type":1,"pageTitle":"安装","url":"next/getting-started/installation#windows","content":""},{"title":"要求​","type":1,"pageTitle":"安装","url":"next/getting-started/installation#要求-1","content":"Rancher Desktop 在 Windows 上运行需要以下条件： Windows 10 build 1909 或更高版本。支持家庭版。在具有虚拟化功能的主机上运行。连接到互联网。 Rancher Desktop 在 Windows 上需要 Windows Subsystem for Linux，它将作为 Rancher Desktop 设置的一部分自动安装。你不需要手动下载发行版。 还建议具备以下条件： 8 GB 内存4 个 CPU 你要运行的工作负载可能还需要一些额外的资源。 注意：你可以在 Windows 主机上以非管理员用户身份使用 Rancher Desktop。但是，以下组件的安装过程需要管理员的干预： WSL2：你需要管理员权限才能安装 WSL2，它是 Rancher Desktop 的重要组件。Rancher Desktop Privileged Service：你需要管理员权限才能安装 Rancher Desktop Privileged Service，这是在主机的所有接口上公开运行在容器内的应用程序/服务所必需的。你也可以跳过 Rancher Desktop Privileged Service 的安装，这样的话，你将无法在 127.0.0.1 之外的任何接口上公开应用程序/服务。 "},{"title":"在 Windows 上安装 Rancher Desktop​","type":1,"pageTitle":"安装","url":"next/getting-started/installation#在-windows-上安装-rancher-desktop","content":"转到 GitHub 上的 Releases 页面。找到要下载的 Rancher Desktop 版本。展开 Assets 部分并下载 Windows 安装程序。它的名称是 Rancher.Desktop.Setup.X.Y.Z.msi，其中 X.Y.Z 是 Rancher Desktop 的版本。导航到下载安装程序的目录，并运行安装程序。这个目录通常是下载文件夹。查看许可协议并单击 I Agree 来继续安装。如果出现提示，请选择为计算机的所有用户安装，或仅为当前用户安装。建议为所有用户安装，以便安装 Rancher Desktop Privileged Service，如上所述。按照提示确认安装。安装完成后，单击 Finish 来关闭安装向导。 "},{"title":"在 Windows 上卸载 Rancher Desktop​","type":1,"pageTitle":"安装","url":"next/getting-started/installation#在-windows-上卸载-rancher-desktop","content":"在任务栏中，单击开始菜单。转到设置 &gt; 应用程序 &gt; 应用程序和功能。找到并选择 Rancher Desktop。点击卸载，出现确认信息时再次点击。按照 Rancher Desktop 卸载程序上的提示继续。完成后点击完成。 "},{"title":"Linux​","type":1,"pageTitle":"安装","url":"next/getting-started/installation#linux","content":""},{"title":"要求​","type":1,"pageTitle":"安装","url":"next/getting-started/installation#要求-2","content":"Rancher Desktop 在 Linux 上运行需要以下条件： 一个可以安装 .deb 或 .rpm 包或 AppImages 的发行版。连接到互联网。带有 AMD-V 或 VT-x 的 x86_64 处理器。/dev/kvm 上的读写权限。详情见下文。 还建议具备以下条件： 8 GB 内存4 个 CPU 你要运行的工作负载可能还需要一些额外的资源。 "},{"title":"确保你可以访问 /dev/kvm​","type":1,"pageTitle":"安装","url":"next/getting-started/installation#确保你可以访问-devkvm","content":"Rancher Desktop 需要 /dev/kvm 的权限，而在某些发行版（例如 Ubuntu 18.04）上，用户没有足够的权限。 要检查你是否具有所需的权限，请执行以下操作： [ -r /dev/kvm ] &amp;&amp; [ -w /dev/kvm ] || echo 'insufficient privileges'  如果输出是 insufficientprivilege，你需要将你的用户添加到 kvm 组。你可以执行以下操作： sudo usermod -a -G kvm &quot;$USER&quot;  然后重新启动使更改生效。 "},{"title":"pass 设置​","type":1,"pageTitle":"安装","url":"next/getting-started/installation#pass-设置","content":"默认情况下，Rancher Desktop 使用 pass 来安全地存储通过 docker login 和 nerdctl login 传递的凭证。在第一次在主机上使用时，pass 需要你进行少量的设置。如果你不打算使用 docker login 或 nerdctl login，你不需要设置 pass。但请记住，如果你以后需要使用它们，你必须设置它们，否则会出现错误。 安装 Rancher Desktop 后，你应该创建一个 GPG 密钥。pass 会使用它来保护密文。要创建 GPG 密钥： gpg --generate-key  输出应该与 8D818FB37A9279E341F01506ED96AD27A40C9C73 类似。 这是你的密钥 ID。然后，你可以通过将此密钥 ID 传递给它来初始化 pass： pass init 8D818FB37A9279E341F01506ED96AD27A40C9C73  关于 pass 的更多信息，请参阅此处。 "},{"title":"Traefik 端口绑定访问​","type":1,"pageTitle":"安装","url":"next/getting-started/installation#traefik-端口绑定访问","content":"Rancher Desktop 使用 Traefik 作为默认 Ingress Controller。由于 Traefik Ingress 上的端口访问受限，用户在部署 Rancher Desktop 后可能会遇到 permission denied 错误。大多数 Linux 发行版（例如 Ubuntu 20.04）不允许非 root 用户监听 1024 以下的 TCP 和 UDP 端口。为了让 Traefik 监听本地主机上的特权端口，请运行以下命令： sudo sysctl -w net.ipv4.ip_unprivileged_port_start=80  命令运行后，80 及以上的所有端口都将变为非特权端口，Traefik 将能够成功访问这些端口。 "},{"title":"通过 .deb 包安装​","type":1,"pageTitle":"安装","url":"next/getting-started/installation#通过-deb-包安装","content":"添加 Rancher Desktop 仓库并使用以下命令安装 Rancher Desktop： curl -s https://download.opensuse.org/repositories/isv:/Rancher:/stable/deb/Release.key | gpg --dearmor | sudo dd status=none of=/usr/share/keyrings/isv-rancher-stable-archive-keyring.gpg echo 'deb [signed-by=/usr/share/keyrings/isv-rancher-stable-archive-keyring.gpg] https://download.opensuse.org/repositories/isv:/Rancher:/stable/deb/ ./' | sudo dd status=none of=/etc/apt/sources.list.d/isv-rancher-stable.list sudo apt update sudo apt install rancher-desktop  "},{"title":"卸载 .deb 包​","type":1,"pageTitle":"安装","url":"next/getting-started/installation#卸载-deb-包","content":"你可以使用以下命令删除包、仓库和密钥： sudo apt remove --autoremove rancher-desktop sudo rm /etc/apt/sources.list.d/isv-rancher-stable.list sudo rm /usr/share/keyrings/isv-rancher-stable-archive-keyring.gpg sudo apt update  "},{"title":"通过 .rpm 包安装​","type":1,"pageTitle":"安装","url":"next/getting-started/installation#通过-rpm-包安装","content":"注意：Rancher Desktop 在 Linux 上使用 QEMU，而 RHEL、Fedora 和相关发行版打包 QEMU 的方式与其他发行版不同。要在这些发行版上使用 Rancher Desktop，请使用 AppImage。 在 openSUSE 上添加仓库并安装： sudo zypper addrepo https://download.opensuse.org/repositories/isv:/Rancher:/stable/rpm/isv:Rancher:stable.repo sudo zypper install rancher-desktop  "},{"title":"卸载 .rpm 包​","type":1,"pageTitle":"安装","url":"next/getting-started/installation#卸载-rpm-包","content":"确保 Rancher Desktop 已退出（如果没有，它应该出现在 Dock 中），然后执行： sudo zypper remove --clean-deps rancher-desktop sudo zypper removerepo isv_Rancher_stable  "},{"title":"通过 AppImage 安装​","type":1,"pageTitle":"安装","url":"next/getting-started/installation#通过-appimage-安装","content":"首先，确保安装了 pass 和 gpg。例如，在 Fedora 上： dnf install pass gnupg2  你可以在此处下载 AppImage。要运行它，只需要添加可执行权限，然后执行即可。为了更好地与你的桌面集成，你可以使用 AppImageLauncher。 "},{"title":"卸载 AppImage​","type":1,"pageTitle":"安装","url":"next/getting-started/installation#卸载-appimage","content":"只需删除 AppImage。 "},{"title":"使用 k3d 创建多节点集群","type":0,"sectionRef":"#","url":"next/how-to-guides/create-multi-node-cluster","content":"","keywords":""},{"title":"启动多节点集群的步骤​","type":1,"pageTitle":"使用 k3d 创建多节点集群","url":"next/how-to-guides/create-multi-node-cluster#启动多节点集群的步骤","content":"确保在 Kubernetes Settings 页面中选择了 dockerd(moby) 作为容器运行时。 安装 k3d。 wgetcurl wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash  运行 k3d cluster create 命令来启动多节点集群。例如： k3d cluster create two-node-cluster --agents 2 k3d cluster create three-node-cluster --agents 3  k3d 将新创建的集群设置为 active。你可以通过 kubectl config use-context 命令来切换集群。例如： kubectl config use-context k3d-two-node-cluster  要了解有关 k3s 和 k3d 的更多信息，请参阅这些项目的文档（k3s 文档 和 k3d 文档）。 ⚠️ 请注意，k3d 创建的集群不是通过 Rancher Desktop GUI 管理的。 "},{"title":"增加打开文件限制","type":0,"sectionRef":"#","url":"next/how-to-guides/increasing-open-file-limit","content":"","keywords":""},{"title":"macOS & Linux 步骤​","type":1,"pageTitle":"增加打开文件限制","url":"next/how-to-guides/increasing-open-file-limit#macos--linux-步骤","content":"首先，使用 lima override.yaml 编写配置脚本。 在以下路径创建 override.yaml 文件。 macOSLinux ~/Library/Application Support/rancher-desktop/lima/_config/override.yaml  然后，使用下面的脚本为 override.yaml 文件中的容器增加 ulimit。 provision: - mode: system script: | #!/bin/sh cat &lt;&lt;'EOF' &gt; /etc/security/limits.d/rancher-desktop.conf * soft nofile 82920 * hard nofile 82920 EOF  如果你使用 Elastic 平台，请使用下面的脚本设置 vm.max_map_count 参数。 provision: - mode: system script: | #!/bin/sh cat &lt;&lt;'EOF' &gt; /etc/security/limits.d/rancher-desktop.conf * soft nofile 82920 * hard nofile 82920 sysctl -w vm.max_map_count=262144 EOF  最后，停止并重启 Rancher Desktop 来让新的限制生效。 "},{"title":"Windows 步骤​","type":1,"pageTitle":"增加打开文件限制","url":"next/how-to-guides/increasing-open-file-limit#windows-步骤","content":"首先，确保 Rancher Desktop 至少运行过一次来初始化配置。 然后，使用以下代码在 %AppData%\\rancher-desktop\\provisioning 中创建一个配置脚本，比如 map_count.start，这样能通过增加 max_map_count 参数的值来更新打开文件的限制。 #!/bin/sh sysctl -w vm.max_map_count=262144  最后，停止并重启 Rancher Desktop 来让变更生效。 "},{"title":"Hello World 示例","type":0,"sectionRef":"#","url":"next/how-to-guides/hello-world-example","content":"","keywords":""},{"title":"示例 1 - 构建镜像并运行容器​","type":1,"pageTitle":"Hello World 示例","url":"next/how-to-guides/hello-world-example#示例-1---构建镜像并运行容器","content":"创建文件夹​ mkdir hello-world cd hello-world  创建一个空白的 Dockerfile​ 在 Windows 上，创建一个名为 Dockerfile 的空白文件。 在 Linux 上，你可以使用以下命令创建一个空白的 Dockerfile: vi Dockerfile  使用以下命令填充 Dockerfile​ FROM alpine CMD [&quot;echo&quot;, &quot;Hello World!!&quot;]  构建并运行镜像以进行验证​ nerdctldocker nerdctl build --tag helloworld:v1.0 . nerdctl images | grep helloworld nerdctl run --rm helloworld:v1.0 # 移除镜像 nerdctl rmi helloworld:v1.0  "},{"title":"示例 2 - 构建镜像并将容器部署到 Kubernetes​","type":1,"pageTitle":"Hello World 示例","url":"next/how-to-guides/hello-world-example#示例-2---构建镜像并将容器部署到-kubernetes","content":"根据需要将 Kubernetes Settings 面板中的 Container Runtime 切换为 dockerd 或 containerd。 创建一个文件夹并添加一个示例 index.html 文件，如下所示​ mkdir nginx cd nginx echo &quot;&lt;h1&gt;Hello World from NGINX!!&lt;/h1&gt;&quot; &gt; index.html  创建一个空白的 Dockerfile​ 在 Windows 上，创建一个名为 Dockerfile 的空白文件。 在 Linux 上，你可以使用以下命令创建一个空白的 Dockerfile: vi Dockerfile  使用以下命令填充 Dockerfile​ FROM nginx:alpine COPY . /usr/share/nginx/html  使用本地代码构建镜像​ ⚠️ 注意：你需要将 --namespace k8s.io 标志传递给 nerdctl build 命令，以便 nerdctl 构建镜像并使其在 k8s.io 命名空间中可用。 nerdctldocker nerdctl --namespace k8s.io build --tag nginx-helloworld:latest . nerdctl --namespace k8s.io images | grep nginx-helloworld  部署到 Kubernetes​ 运行以下命令，从而使用在上一步中构建的镜像创建和运行 pod。 ⚠️ 注意：你需要传递 --image-pull-policy=Never 标志以使用带有 :latest 标签的本地镜像（:latest 标签将始终尝试从远程仓库中拉取镜像）。 kubectl run hello-world --image=nginx-helloworld:latest --image-pull-policy=Never --port=80 kubectl port-forward pods/hello-world 8080:80  在浏览器中访问 localhost:8080，你将看到 Hello World from NGINX!! 的信息。如果你想留在命令行上，请使用 curl localhost:8080。 删除 pod 和镜像​ nerdctldocker kubectl delete pod hello-world # 移除镜像 nerdctl --namespace k8s.io rmi nginx-helloworld:latest  "},{"title":"配置脚本","type":0,"sectionRef":"#","url":"next/how-to-guides/provisioning-scripts","content":"","keywords":""},{"title":"macOS & Linux​","type":1,"pageTitle":"配置脚本","url":"next/how-to-guides/provisioning-scripts#macos--linux","content":"在 macOS 和 Linux 上，你可以使用 lima override.yaml 来编写配置脚本。 在以下路径创建 override.yaml 文件。 macOSLinux ~/Library/Application Support/rancher-desktop/lima/_config/override.yaml  在上一步中创建的 override.yaml 文件中编写配置脚本。例如，你可以使用以下脚本来增加容器的 ulimit： provision: - mode: system script: | #!/bin/sh cat &lt;&lt;'EOF' &gt; /etc/security/limits.d/rancher-desktop.conf * soft nofile 82920 * hard nofile 82920 EOF  你还可以使用 override.yaml 来覆盖/修改 lima 配置设置。下面的示例创建了额外的挂载： mounts: - location: /some/path writable: true  "},{"title":"Windows​","type":1,"pageTitle":"配置脚本","url":"next/how-to-guides/provisioning-scripts#windows","content":"注意：在 Windows 上，你只能为 1.1.0 或更高版本的 Rancher Desktop 使用这些配置脚本。 你需要至少运行 Rancher Desktop 一次以允许它创建配置。 打开 %AppData%\\\\rancher-desktop\\\\provisioning 目录。完整路径的示例：C:\\\\Users\\\\Joe\\\\AppData\\\\Roaming\\\\rancher-desktop\\\\provisioning。 请注意，任何文件扩展名为 .start 的文件（例如 k3s-overrides.start）都可以在 Rancher Desktop 启动 Kubernetes 后端（如果启用） 时执行。此类文件将在 Rancher Desktop WSL 上下文中运行。 .start 文件的示例流程： Rancher Desktop 内部设置运行配置脚本在 UI 中启用 dockerd 或 containerdKubernetes (K3s) 例如，使用 %AppData%\\\\rancher-desktop\\\\provisioning\\\\insecure-registry.start 将允许 nerdctl 默认使用不安全的镜像仓库： #!/bin/sh mkdir -p /etc/nerdctl cat &gt; /etc/nerdctl/nerdctl.toml &lt;&lt;EOF insecure_registry = true EOF  请注意，文件扩展名为 .stop 的文件（例如 wipe-data.stop）可以在 Rancher Desktop 关闭 Kubernetes 后端（如果启用）后 执行。此类文件将在相同的 Rancher Desktop WSL 上下文中运行。 .stop 文件的示例流程： 停止 k3s、dockerd 或 containerd运行取消配置的脚本 重要提示：脚本需要以 Unix 行结尾保存，未完成行尾转换，且具有 DOS 行结尾的文件可能会产生意想不到的结果。你可以使用配置脚本更改的内容是有限制的。例如，你不能使用配置脚本更改 WSL2 上的硬 ulimit。请谨慎使用配置脚本，如果你对配置脚本有任何具体问题，请随时在 Slack/Github 上与 Rancher Desktop 团队联系。 "},{"title":"Installing and Uninstalling Rancher Desktop Extensions","type":0,"sectionRef":"#","url":"next/how-to-guides/installing-uninstalling-extensions","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Installing and Uninstalling Rancher Desktop Extensions","url":"next/how-to-guides/installing-uninstalling-extensions#prerequisites","content":"Rancher Desktop Extensions are available as part of release v1.9.0-tech-preview or later. "},{"title":"Installing Extensions​","type":1,"pageTitle":"Installing and Uninstalling Rancher Desktop Extensions","url":"next/how-to-guides/installing-uninstalling-extensions#installing-extensions","content":"There are two ways in which you can install extensions, a method using the UI and another using the rdctl extension install command. WindowsmacOSLinux Using the UI​ Click Extensions from the main UI to navigate to the Catalog tab. Here you can search through extensions available for use. When you find an extension you want to use, click on the extension to open the Detail view, then click on the Install button on the right hand side as seen in the image below. Using the Command Line​ We have also extended the rdctl command line in the v1.9.0-tech-preview release to install extensions. Please use the command below to install extensions: 备注 The use of the &lt;tag&gt; parameter is optional. rdctl extension install &lt;image-id&gt;:&lt;tag&gt;  "},{"title":"Uninstalling Extensions​","type":1,"pageTitle":"Installing and Uninstalling Rancher Desktop Extensions","url":"next/how-to-guides/installing-uninstalling-extensions#uninstalling-extensions","content":"Additionally, there are two ways in which you can uninstall extensions, a method using the UI and another using the rdctl extension uninstall command. WindowsmacOSLinux Using the UI​ Click Extensions from the main UI to navigate to the Catalog tab, then click on the Installed tab. Once under the Installed tab, you can uninstall extensions by clicking on the Uninstall button on the right hand side as pictured below. Using the Command Line​ We have also extended the rdctl command line in the v1.9.0-tech-preview release to uninstall extensions. Please use the command below to uninstall extensions: 备注 The use of the &lt;tag&gt; parameter is optional. rdctl extension uninstall &lt;image-id&gt;:&lt;tag&gt;  "},{"title":"Rancher Desktop 上的 Rancher","type":0,"sectionRef":"#","url":"next/how-to-guides/rancher-on-rancher-desktop","content":"Rancher Desktop 上的 Rancher 虽然 Rancher 和 Rancher Desktop 的名字里都包含 Rancher，但它们的功能是有差别的。Rancher Desktop 不是桌面版 Rancher。Rancher 是管理 Kubernetes 集群的强大解决方案，而 Rancher Desktop 运行本地 Kubernetes 和容器管理平台，这两种解决方案相辅相成。例如，你可以将 Rancher 作为工作负载安装在 Rancher Desktop 中。 本指南概述了使用 container runtime 或 helm（本地环境）在 Rancher Desktop 上安装 Rancher Dashboard 的步骤： 注意：如果实用程序（例如：helm）或你的工作负载版本与会话中的 Kubernetes 版本不兼容，你可能会遇到问题。作为一个潜在的修复，你可以通过 Preferences &gt; Kubernetes 对话框切换到兼容的 Kubernetes 版本。支持矩阵页面上列出了 Rancher 支持的 Kubernetes 平台。 nerdctldockerhelm nerdctl run --privileged -d --restart=always -p 8080:80 -p 8443:443 rancher/rancher 安装需要几分钟才能完成。安装后，你可以访问 Rancher UI，如下所示： 通过 container runtime 安装：https://localhost:8443/通过 helm 安装：https://rancher.rd.localhost/ nerdctldocker 要访问 Rancher UI，你需要获取引导密码： 1：获取 Rancher UI 容器 ID/名称： nerdctl ps 2：获取引导密码： nerdctl logs [rancherContainerID] 2&gt;&amp;1 | grep &quot;Bootstrap Password:&quot; 3：引导密码示例： [INFO] Bootstrap Password: 7fwjjw4ldcmnq8ghns22q7nhl5lrznwwt9p9vjljfjc6tqbcvhxmwq 按照向导说明并单击 Continue 以进入 Rancher UI 主页面。 在 Rancher UI 中，你可以管理 local 集群、节点等。如需更多信息，请参阅 Rancher 文档。","keywords":""},{"title":"离线运行","type":0,"sectionRef":"#","url":"next/how-to-guides/running-air-gapped","content":"","keywords":""},{"title":"Windows 用户须知​","type":1,"pageTitle":"离线运行","url":"next/how-to-guides/running-air-gapped#windows-用户须知","content":"本文档的环境变量使用 Powershell 语法。如果你使用的是 Command shell，看到 $env:FOO 环境变量的引用时，请将其替换为 %FOO%。 "},{"title":"网络敏感区域​","type":1,"pageTitle":"离线运行","url":"next/how-to-guides/running-air-gapped#网络敏感区域","content":"Rancher Desktop 假设有两个的区域的网络可用，并会在离线的情况下进行恢复： 将 Kubernetes k3s 镜像拉入 k3s 缓存目录 使用 kuberlr 作为对 kubectl 的版本感知包装器，因此客户端与 Kubernetes Server 的差异不会超过一个次要版本。 "},{"title":"现有 Deployment​","type":1,"pageTitle":"离线运行","url":"next/how-to-guides/running-air-gapped#现有-deployment","content":"如果 Rancher Desktop 安装在最初就具有网络访问权限的主机上，在关闭网络连接后，Rancher Desktop 仍能在该主机上运行。但是，下拉菜单中可用的 Kubernetes 版本会限制为已下载并存储在缓存中的版本。 由于 kuberlr 包装器（Windows 用户需要为每个可执行实用程序文件添加 .exe 后缀），因此使用 kubectl 客户端会存在一个问题。 在这种情况下，虽然我们的系统在初始化时已经连接到互联网，但是后续使用时会让主机脱机使用。 假设 rancher-desktop 缓存中有三个版本的 k3s： 1.24.3 1.21.14 1.19.16 假设在这个系统上我们只有在使用 1.24.3 和 1.21.14 时运行了 kubectl。换言之，~/.kuberlr/PLATFORM-ARCH/ 目录（Windows 上为$env:HOMEDRIVE%\\$env:HOMEPATH/.kuberlr/windows-amd64）只包含两个文件： kubectl1.24.3 kubectl1.21.14 如果我们将系统脱机，并通过 UI 切换到 Kubernetes 1.19.16，则系统会在运行 kubectl 的时候失败。 问题在于 kubectl 是 kuberlr 的别名，它会尝试下载 kubectl 1.19.16 并将它安装到 .kuberlr 目录中，但却无法进行访问。 因此在这种情况下，最好的方法是选择缓存中每个可用的 Kubernetes 版本，并运行 kubectl --context rancher-desktop cluster-info 来确保安装了适当版本的 kubectl 客户端，以便在断开连接时能连接系统。 你可以手动安装版本化的 kubectl，具体内容会在下一节中介绍。 "},{"title":"准备离线系统​","type":1,"pageTitle":"离线运行","url":"next/how-to-guides/running-air-gapped#准备离线系统","content":"此处假设你有某种移动媒体，你可以将其填充到联网系统上，然后移至离线系统中。 要让 Rancher Desktop 离线运行，你需要填充两个目录： Cache 目录​ 要填充源磁盘（我们在此将其称为 %SOURCEDISK%，实际上它也可能是某种可移动设备，例如 USB 驱动器），你需要以下文件： k3s-versions.json：该文件由 Rancher Desktop 创建。它从 https://update.k3s.io/v1-release/channels 读取原始 JSON 文件并将其转换为不同类型的 JSON 文件。目前没有实用程序来进行这种转换。获取此文件的最简单方法是在连接的系统上运行 Rancher Desktop 并保存 CACHE/k3s-versions.json 文件（请参阅下方不同系统的 CACHE 位置）。Kubernetes K3s 镜像的 Tar 包。它们列在 https://github.com/k3s-io​​/k3s/releases。如果你使用的是 k3s v1.26.1 及更高版本，你需要为 AMD/Intel 主机下载 k3s-airgap-images-amd64.tar，为 M1 主机下载 k3s-airgap-images-arm64.tar，或下载相应的 *.tar.zst 压缩包。最后，你需要下载所选版本的 k3s 可执行文件。例如，以下命令将让你离线的情况下使用 K3s v1.24.3 build 1： cd .../CACHE mkdir v1.24.3+k3s1 cd v1.24.3+k3s1 wget https://github.com/k3s-io/k3s/releases/download/v1.24.3%2Bk3s1/k3s-airgap-images-amd64.tar wget https://github.com/k3s-io/k3s/releases/download/v1.24.3%2Bk3s1/sha256sum-amd64.txt wget https://github.com/k3s-io/k3s/releases/download/v1.24.3%2Bk3s1/k3s  WindowsmacOSLinux 在 Linux 上，缓存目录是 $HOME/.cache/rancher-desktop，你可以运行以下命令进行填充： CACHEDIR=$HOME/.cache/rancher-desktop mkdir -p $CACHEDIR/k3s cp $SOURCEDISK/k3s-versions.json $CACHEDIR/ cp -r $SOURCEDISK/v&lt;MAJOR&gt;.&lt;MINOR&gt;.&lt;PATCH&gt;+k3s&lt;BUILD&gt; $CACHEDIR/k3s/  kuberlr 目录​ 这个目录的位置更直接，在所有平台上，该目录都位于 HOME/.kuberlr/PLATFORM-ARCH，其中： HOME 是主目录。通常情况下，在 Windows 上为 $env:HOMEDRIVE%\\$env:HOMEPATH，在 macOS 和 Linux 上为 ~ 或 $HOME。PLATFORM 是 windows、linux 或 darwin。ARCH 在 M1 主机上是 aarch64，在其它主机上是 amd64。 要进行填充，请确定你要使用的 Kubernetes 版本，并联网下载适当的可执行文件。它们将位于： WindowsmacOSLinux https://dl.k8s.io/VERSION/bin/PLATFORM/CPU/kubectl 其中： VERSION 的格式是 vMAJOR.MINOR.PATCH（如 v1.22.1）PLATFORM 是 darwin、linux 或 windowsCPU 在 M1 主机上是 arm64，在其他主机上是 amd64 例如，要获取使用 Kubernetes v1.22 且用于 Windows 的 kubectl，此 Windows 命令 shell（不是 PowerShell）命令会将其放在 SOURCEDISK 上： wget -O %SOURCEDISK/kubectl1.22.1.exe https://dl.k8s.io/v1.22.1/bin/windows/amd64/kubectl.exe  版本说明​ Kubectl 客户端保证使用主要版本相同的 Server，且它们最多只相差一个次要版本。例如，如果你的组织使用的 Kubernetes 版本是 v1.21.x、v1.22.x 和 v1.23.x，对于任何 x 补丁版本，你只需在 .kuberlr 目录中安装 kubectl1.22.x 即可。但是，如果你复制一个 Kubernetes v1.24.x 到 CACHE 目录，你需要确保 .kuberlr 目录中也有一个兼容的 kubectl（v1.23.x、v1.24.x 或 v1.25.x 中的其中一个即可）。 "},{"title":"设置 NGINX Ingress Controller","type":0,"sectionRef":"#","url":"next/how-to-guides/setup-NGINX-Ingress-Controller","content":"","keywords":""},{"title":"步骤​","type":1,"pageTitle":"设置 NGINX Ingress Controller","url":"next/how-to-guides/setup-NGINX-Ingress-Controller#步骤","content":"在 Kubernetes Settings 页面取消选中 Enable Traefik 来禁用 Traefik。你可能需要退出并重新启动 Rancher Desktop 才能使更改生效。 通过 helm 或 kubectl 部署 NGINX Ingress Controller： helmkubectl helm upgrade --install ingress-nginx ingress-nginx \\ --repo https://kubernetes.github.io/ingress-nginx \\ --namespace ingress-nginx --create-namespace  等待 ingress pod 运行： kubectl get pods --namespace=ingress-nginx  创建示例 deployment 和关联的 service： kubectl create deployment demo --image=nginx --port=80 kubectl expose deployment demo  创建 ingress 资源。以下命令使用了映射到 localhost 的主机： kubectl create ingress demo-localhost --class=nginx --rule=&quot;demo.localdev.me/*=demo:80&quot;  将本地端口转发到 Ingress Controller： kubectl port-forward --namespace=ingress-nginx service/ingress-nginx-controller 8080:80  现在，如果你访问 http://demo.localdev.me:8080/ ，你应该会看到 NGINX 的欢迎页面。 "},{"title":"Skaffold 与 Rancher Desktop","type":0,"sectionRef":"#","url":"next/how-to-guides/skaffold-and-rancher-desktop","content":"Skaffold 与 Rancher Desktop Skaffold 是一个命令行工具，用于 Kubernetes 原生应用程序的持续开发。Skaffold 处理构建、推送和部署应用程序的工作流，并提供用于创建 CI/CD 流水线的构建块。它能让你专注于在本地迭代你的应用程序，Skaffold 则能持续部署到你的本地或远程 Kubernetes 集群。要了解有关 Skaffold 的更多信息，请参阅 Skaffold 项目文档。 为了演示使用 Rancher Desktop 设置 Skaffold 的步骤，Rancher Desktop 文档在此处提供了一个 nodejs 应用程序示例。 重要提示：Skaffold 仅适用于 dockerd (Moby)。因此，请确保在 Rancher Desktop UI 的 Kubernetes Settings 面板中选择了 dockerd 作为运行时。 访问 https://skaffold.dev/docs/install/ 安装 Skaffold。 克隆 Rancher Desktop 文档仓库并在终端中导航到 express-sample，如下所示： cd docs.rancherdesktop.io/assets/express-sample 运行 skaffold init。 根据 Skaffold 文档 的介绍，skaffold init 会遍历你的项目目录并查找 build 配置文件（例如 Dockerfile、build.gradle /pom.xml、package.json、requirements.txt 或 go.mod）。 在我们的示例中，我们将选择 Dockerfile 和 package.json。这将生成你可以修改的初始配置文件。出现提示时，选择 yes 将你的配置写入 skaffold.yaml。 在你的编辑器中，查看你的 app.js 和 manifests.yaml 文件。请注意，在 manifests.yaml 中，你将拥有一个 deployment 配置和一个 service 配置。在测试场景下，仅需要 1 个 replica 即可。 回到你的终端，你会注意到你有两个选项，分别是 skaffold run（允许你构建和部署）和 skaffold dev （允许你进入开发模式自动重新部署）。在此示例中，我们将使用 skaffold dev。 由于你需要对镜像仓库具有推送访问权限，因此你可以使用 docker 登录，也可以设置本地镜像仓库： Docker Hub本地镜像仓库 在运行 skaffold dev 之前，如果你有 Docker Hub 账号，请使用你的 docker 登录。然后，在文件 skaffold.yaml 和 manifests.yaml 中，将 matamagu/express-sample 替换为 YOUR_DOCKER_HUB_USERNAME/express-sample，这是因为 skaffold dev 会将构建的镜像推送到 DockerHub。 在进行开发时，Skaffold 将检测所有更改，并会自动再次执行构建和部署的过程。你将能够看到集群中的任何更改。 在浏览器中访问 localhost:3000，你将看到 express-sample 界面。","keywords":""},{"title":"传输容器镜像","type":0,"sectionRef":"#","url":"next/how-to-guides/transfer-container-images","content":"","keywords":""},{"title":"步骤​","type":1,"pageTitle":"传输容器镜像","url":"next/how-to-guides/transfer-container-images#步骤","content":"1. 将源环境的镜像保存为 tar 包。 nerdctldocker 保存单个镜像 nerdctl save -o local-image.tar image:tag 保存多个镜像 nerdctl save -o local-images.tar image1:tag1 image2:tag2 将所有镜像保存在命名空间中 下面两个命令使用 jq 进行 JSON 解析。长命令会执行以下步骤： nerdctl -n k8s.io image ls 子命令会获取 k8s.io 命名空间中所有镜像的列表，因此不包括其他命名空间的镜像（例如 default）。jq 子命令会过滤并格式化上一步获取的镜像列表。 命令的 select(.Repository!=\\&quot;&lt;none&gt;\\&quot;) 部分会跳过仓库值为 &lt;none&gt; 的镜像。根据镜像标签的值是否为 &lt;none&gt;，命令的 if (.Tag==&quot;&lt;none&gt;&quot;) then .Repository else (.Repository+&quot;:&quot;+.Tag) end') 部分会将镜像的名称格式化为 &lt;Repository&gt; 或 &lt;Repository&gt;:&lt;Tag&gt;。 最后，命令的 nerdctl -n k8s.io save -o all-local-images-in-namespace.tar 部分会将前两步过滤和格式化的镜像列表保存到 tar 文件中。 BashPowerShell nerdctl -n k8s.io save -o all-local-images-in-namespace.tar $(nerdctl -n k8s.io image ls --format '{{json .}}' | jq -r 'select(.Repository!=&quot;&lt;none&gt;&quot;) | if (.Tag==&quot;&lt;none&gt;&quot;) then .Repository else (.Repository+&quot;:&quot;+.Tag) end')  2. 使用目标环境中保存的 tar 包加载镜像。 nerdctldocker nerdctl load &lt; local-images.tar  "},{"title":"使用 VS Code Docker 扩展来调试容器应用程序","type":0,"sectionRef":"#","url":"next/how-to-guides/vs-code-docker","content":"","keywords":""},{"title":"调试容器化应用程序的步骤​","type":1,"pageTitle":"使用 VS Code Docker 扩展来调试容器应用程序","url":"next/how-to-guides/vs-code-docker#调试容器化应用程序的步骤","content":"安装并启动 Rancher Desktop。从 Kubernetes Settings 菜单中，将 Container Runtime 选为 dockerd (moby)：  安装并启动 Visual Studio Code 或 Visual Studio Code Insiders。本教程使用 Visual Studio Code：  在扩展市场中安装 Docker 扩展。  你可以使用此 Github 仓库 (https://github.com/bwateratmsft/samples) 中提供的示例。克隆此仓库并在 VS Code 会话中打开 expressapp 文件夹。 打开命令面板（Ctrl+Shift+P、F1 或 Cmd+Shift+P）并运行 “Add Docker Files to Workspace”。由于这是一个 Express 应用程序，因此选择 Node.js 作为应用程序平台，选择 3000（或任何其他可用端口）作为 port。由于这是一个简单的示例，请在 Include optional Docker Compose files 选择 No。此步骤添加了调试应用程序所需的 Dockerfile 和 Launch Configuration。  在代码中插入断点：  在顶部的 Debug 窗口中，将活动调试配置切换为 Docker Node.js Launch。按 F5 以 Debug 模式启动应用程序容器。示例应用程序的登录页面将在你的浏览器中打开，而且代码会在断点处停止执行。你可以在这里调试应用程序，就像应用程序运行在你的主机上一样。   有时候，由于调试进程可能尚未启动，因此应用程序可能不会在第一次运行时在设置的断点处中断。在这种情况下，你可以刷新浏览器来再次触发执行，从而命中断点。你还可以通过在 task.json 文件中设置 inspectMode: 'break' 属性来避免此行为，从而防止应用程序在连接调试器之前运行。 在某些主机上，防火墙设置可能会阻止调试进程在主机和容器进程之间建立连接。在这种情况下，你可以添加防火墙规则，以允许运行容器的 VM 与运行 VS Code 会话的主机进行通信。在 Windows 上，你可以通过在特权 powershell 中运行以下命令来添加防火墙规则： New-NetFirewallRule -Action Allow -Description 'Allow communication from WSL containers' -Direction Inbound -Enabled True -InterfaceAlias 'vEthernet (WSL)' -Name 'WSL Inbound' -DisplayName 'WSL Inbound'  "},{"title":"VS Code Remote Containers","type":0,"sectionRef":"#","url":"next/how-to-guides/vs-code-remote-containers","content":"","keywords":""},{"title":"使用示例开发容器的步骤​","type":1,"pageTitle":"VS Code Remote Containers","url":"next/how-to-guides/vs-code-remote-containers#使用示例开发容器的步骤","content":"安装并启动 Rancher Desktop。从 Kubernetes Settings 菜单中，将 Container Runtime 选为 dockerd (moby)：  安装并启动 Visual Studio Code 或 Visual Studio Code Insiders。本教程使用 Visual Studio Code：  安装 Remote Development 扩展包：  安装扩展后，你将在侧栏中看到扩展项，左下角有一个显示命令面板的绿色按钮，其中包含与 Remote Development 相关的各种选项/命令：  Microsoft 在此 GitHub 仓库 (https://github.com/microsoft/vscode-dev-containers.git) 中提供了许多示例开发容器。将此仓库克隆到你的本地主机： git clone https://github.com/microsoft/vscode-dev-containers.git  单击窗口左下角的 按钮，然后从命令面板中选择 Open Folder in Container...。浏览克隆仓库中的其中一个示例，例如 javascript-node：   选择示例后，你会在容器加载时看到进度通知 ，容器启动成功后，左下角会显示容器名称 。 容器启动后，在 VS Code IDE 中按 F5 启动示例应用程序。你将看到应用程序已启动并在 localhost:3000 上提供服务：  恭喜！你已经使用 Rancher Desktop 和 VS Code 成功加载并运行了一个示例开发容器。 "},{"title":"后续步骤​","type":1,"pageTitle":"VS Code Remote Containers","url":"next/how-to-guides/vs-code-remote-containers#后续步骤","content":"Microsoft 在此处提供了在各种场景中使用开发容器的大量文档。请参阅以下教程，尝试使用与你的需求类似的用例。 现在，体验使用 Rancher Desktop 进行容器化的快乐吧！ "},{"title":"架构","type":0,"sectionRef":"#","url":"next/references/architecture","content":"架构 Ranche Desktop 是一个基于 Electron 的应用程序，它包装了其他工具，同时还提供了简单的用户体验。在 macOS 和 Linux 上，Rancher Desktop 利用虚拟机运行 containerd 或 dockerd 和 Kubernetes。适用于 Linux v2 的 Windows Subsystem 可用于 Windows 系统。你只需要下载并运行该应用程序即可。","keywords":""},{"title":"捆绑的实用程序","type":0,"sectionRef":"#","url":"next/references/bundled-utilities","content":"捆绑的实用程序 Rancher Desktop 使用多个实用程序/子系统作为依赖项。例如，docker CLI 会与 dockerd 交互，helm 会管理 Chart，而 trivy 用于容器镜像扫描。本文介绍了特定 Rancher Desktop 版本包括的捆绑实用程序版本信息。 Rancher Desktop 版本\t依赖版本v1.8.1\t1.8.1 版本中没有更新的依赖项 v1.8.0 amazon-ecr-credential-helper: 0.6.0 docker: 23.0.1 docker-buildx: 0.10.4 docker-compose: 2.16.0 docker-credential-helpers: 0.6.4 helm: 3.11.2 kuberlr: 0.4.2 nerdctl: 1.2.1 trivy: 0.38.3 v1.7.0 amazon-ecr-credential-helper: 0.6.0 docker: 20.10.21 docker-buildx: 0.9.1 docker-compose: 2.14.0 docker-credential-helpers: 0.6.4 helm: 3.10.2 kuberlr: 0.4.2 nerdctl: 1.0.0 trivy: 0.35.0 v1.6.2\t1.6.2 版本中没有更新的依赖项 v1.6.1\t1.6.1 版本中没有更新的依赖项 v1.6.0 amazon-ecr-credential-helper: 0.6.0 docker: 20.10.17 docker-buildx: 0.9.1 docker-compose: 2.11.1 docker-credential-helpers: 0.6.4 helm: 3.9.4 kuberlr: 0.4.2 nerdctl: 0.23.0 trivy: 0.32.0 ","keywords":""},{"title":"故障排除提示","type":0,"sectionRef":"#","url":"next/troubleshooting-tips","content":"故障排除提示 此页面提供了 Rancher Desktop 相关问题的故障排除提示。 问：为什么我在 Rancher Desktop 的 WSL 集成页面下看不到我的 WSL 发行版？​ 答：你可能使用的是 WSL 1 发行版。Rancher Desktop 仅支持 WSL 2 发行版。你可以通过运行 wsl --set-version &lt;distro-name&gt; 2 命令将 WSL 1 发行版转换为 WSL 2 发行版。你还可以运行 wsl --set-default-version 2 命令来将你之后可能安装的所有发行版设置为使用 WSL 2。 问：运行 kubectl config get-contexts 时，我没有看到 Rancher Desktop 的条目，它在哪里？​ 答：Rancher Desktop 将配置放置在默认位置 ~/.kube/config。你的 KUBECONFIG 环境变量可能被设置为在其他位置查找配置文件。 问：Rancher Desktop 卡在 Waiting for Kubernetes API，我该怎么办？​ 答：没有额外信息我们很难确定原因。导航到 Troubleshooting 选项卡并访问日志。然后，转到 Rancher Desktop GitHub 页面并提交附加了你的日志的 Issue。 问：安装 Rancher Desktop 并卸载 Docker Desktop 后，我无法再运行 docker compose，为什么？​ 答：这是 Rancher Desktop 早期版本（1.1.0 之前）的问题。Rancher Desktop 1.1.0 及以上版本附带了 docker-compose，并在 ~/.docker/cli-plugins 提供了 CLI 插件。我们强烈建议你升级到最新版本的 Rancher Desktop。 如果你仍然无法使用 docker-compose，请在 Github上报告这个 Bug。 问：我使用 Homebrew 来安装 Rancher Desktop，但是 brew install rancher-desktop 提示失败，为什么？​ 答：Homebrew cask 的命名约定规定了 -desktop 后缀要从 cask formula 名称中删除。因此，请改用 brew install rancher。 问：尝试在 WSL 上使用 Docker 时，如何修复 permission denied 错误？​ 答：你需要写权限才能访问 docker socket。解决这个问题的方法有很多，以下是常见的方法之一。使用 Ubuntu WSL 命令行： sudo groupadd docker sudo adduser $USER docker sudo chown root:docker /var/run/docker.sock sudo chmod g+w /var/run/docker.sock newgrp docker 问：如何解决 Linux 上的 kubectl: command not found 问题？​ A: 默认情况下，Rancher Desktop 会在 Linux 的 /home/&lt;user&gt;/.local/bin 下创建 kubectl、docker、helm 和 nerdctl 二进制文件的符号链接。要直接从控制台调用这些命令，你可以在控制台中执行以下命令，并执行注销和登录来将目录添加到你的 PATH 环境变量中： echo &quot;export PATH=\\$PATH:/home/$(whoami)/.local/bin&quot; &gt;&gt; ~/.bashrc 问：使用 nerdctl run 运行容器时，如何修复 FATA[0005] subnet 10.4.0.0/24 overlaps with other one on this address space 问题？​ 答：如果路由规则的 IP 地址来自 Iptables 上的冲突子网，你将看到此错误。冲突的路由可能来自主机网络（桥接模式）或 Kubernetes 网络。此问题的快速解决方法是通过命令 wsl --shutdown 关闭 WSL。 警告：关闭 WSL 将停止所有其他发行版以及 rancher-desktop 发行版。 问：在 Windows 上将现有 MSI 降级到较旧的 EXE 版本（1.6.x 或更早版本）时，如何修复 Installation Aborted 错误？​ 答：在 MSI 卸载过程中，如果应该删除的 Windows 注册表项 HKEY_LOCAL_MACHINE\\\\System\\\\CurrentControlSet\\\\Services\\\\EventLog\\\\Application\\\\RancherDesktopPrivilegedService 没有被删除，你将看到此错误。请手动删除注册表项并尝试安装 EXE 版本。你可以在特权 shell 中运行以下命令来删除注册表项： reg.exe delete HKLM\\System\\CurrentControlSet\\Services\\EventLog\\Application\\RancherDesktopPrivilegedService /reg:64 /f 问：为什么启动 Cluster Dashboard 时会出现空白屏幕？​ 答：Cluster Dashboard 可能无法正常运行，因为你主机上的另一个进程正在使用 Dashboard 进程（steve）所依赖的 9080 或 9443 端口。要解决此问题，请识别并终止使用这些端口的进程。你可以使用下面的命令来识别使用主机上特定端口的进程。请注意，在 macOS 和 Linux 上，Rancher Dashboard 进程名为 steve，而在 Windows 上，它是 steve.exe。如果 steve 是唯一使用端口 9080 或 9443 的进程，请不要终止它。 查找使用特定端口的进程的命令。 WindowsmacOSLinux netstat -ano | findstr :9443 ","keywords":""},{"title":"命令参考：rdctl","type":0,"sectionRef":"#","url":"next/references/rdctl-command-reference","content":"","keywords":""},{"title":"rdctl 或 rdctl help​","type":1,"pageTitle":"命令参考：rdctl","url":"next/references/rdctl-command-reference#rdctl-或-rdctl-help","content":"运行 rdctl 或 rdctl help 查看可用命令的列表： 示例输出 &gt; rdctl help The eventual goal of this CLI is to enable any UI-based operation to be done from the command-line as well. Usage: rdctl [command] Available Commands: api Run API endpoints directly completion Generate the autocompletion script for the specified shell factory-reset Clear all the Rancher Desktop state and shut it down. help Help about any command list-settings Lists the current settings. set Update selected fields in the Rancher Desktop UI and restart the backend. shell Run an interactive shell or a command in a Rancher Desktop-managed VM shutdown Shuts down the running Rancher Desktop application start Start up Rancher Desktop, or update its settings. version Shows the CLI version. Flags: --config-path string config file (default /Users/jan/Library/Application Support/rancher-desktop/rd-engine.json) -h, --help help for rdctl --host string default is localhost; most useful for WSL --password string overrides the password setting in the config file --port string overrides the port setting in the config file --user string overrides the user setting in the config file Use &quot;rdctl [command] --help&quot; for more information about a command.  "},{"title":"rdctl api​","type":1,"pageTitle":"命令参考：rdctl","url":"next/references/rdctl-command-reference#rdctl-api","content":"运行 rdctl api / 全局列出所有端点： 示例输出 $ rdctl api / | jq -r .[] GET / GET /v0 GET /v1 GET /v1/about GET /v1/diagnostic_categories GET /v1/diagnostic_checks POST /v1/diagnostic_checks GET /v1/diagnostic_ids PUT /v1/factory_reset PUT /v1/propose_settings GET /v1/settings PUT /v1/settings PUT /v1/shutdown GET /v1/transient_settings PUT /v1/transient_settings  "},{"title":"rdctl api /vX​","type":1,"pageTitle":"命令参考：rdctl","url":"next/references/rdctl-command-reference#rdctl-api-vx","content":"运行 rdctl api /v1 列出版本 1 中的所有端点： 示例输出 $ rdctl api /v1 | jq -r .[] GET /v1 GET /v1/about GET /v1/diagnostic_categories GET /v1/diagnostic_checks POST /v1/diagnostic_checks GET /v1/diagnostic_ids PUT /v1/factory_reset PUT /v1/propose_settings GET /v1/settings PUT /v1/settings PUT /v1/shutdown GET /v1/transient_settings PUT /v1/transient_settings  "},{"title":"rdctl api /v0/settings​","type":1,"pageTitle":"命令参考：rdctl","url":"next/references/rdctl-command-reference#rdctl-api-v0settings","content":"rdctl api [endpoints] 是对直接使用 API 的用户最有用的命令，因此它们不适合像 rdctl set 一样日常使用。例如： 以下命令 rdctl api /v0/settings --method PUT --body '{&quot;kubernetes&quot;: {&quot;enabled&quot;: false}}'  与以下命令是一样的： rdctl set --kubernetes-enabled=false  只是它没那么简洁和用户友好。 "},{"title":"rdctl list-settings​","type":1,"pageTitle":"命令参考：rdctl","url":"next/references/rdctl-command-reference#rdctl-list-settings","content":"CLIAPI 运行 rdctl list-settings 以查看当前的活动配置： 示例输出 &gt; rdctl list-settings { &quot;version&quot;: 6, &quot;application&quot;: { &quot;adminAccess&quot;: false, &quot;pathManagementStrategy&quot;: &quot;rcfiles&quot;, &quot;updater&quot;: { &quot;enabled&quot;: false }, &quot;debug&quot;: false, &quot;telemetry&quot;: { &quot;enabled&quot;: true }, &quot;autoStart&quot;: false, &quot;startInBackground&quot;: false, &quot;hideNotificationIcon&quot;: false, &quot;window&quot;: { &quot;quitOnClose&quot;: false } }, &quot;virtualMachine&quot;: { &quot;memoryInGB&quot;: 6, &quot;numberCPUs&quot;: 2, &quot;hostResolver&quot;: true }, &quot;WSL&quot;: { &quot;integrations&quot;: {} }, &quot;containerEngine&quot;: { &quot;allowedImages&quot;: { &quot;enabled&quot;: false, &quot;patterns&quot;: [ &quot;docker.io&quot; ] }, &quot;name&quot;: &quot;moby&quot; }, &quot;kubernetes&quot;: { &quot;version&quot;: &quot;&quot;, &quot;port&quot;: 6443, &quot;enabled&quot;: false, &quot;options&quot;: { &quot;traefik&quot;: true, &quot;flannel&quot;: true }, &quot;ingress&quot;: { &quot;localhostOnly&quot;: false } }, &quot;portForwarding&quot;: { &quot;includeKubernetesServices&quot;: false }, &quot;images&quot;: { &quot;showAll&quot;: true, &quot;namespace&quot;: &quot;k8s.io&quot; }, &quot;diagnostics&quot;: { &quot;showMuted&quot;: false, &quot;mutedChecks&quot;: {} }, &quot;experimental&quot;: { &quot;virtualMachine&quot;: { &quot;type&quot;: &quot;qemu&quot;, &quot;useRosetta&quot;: false, &quot;socketVMNet&quot;: false, &quot;mount&quot;: { &quot;type&quot;: &quot;reverse-sshfs&quot;, &quot;9p&quot;: { &quot;securityModel&quot;: &quot;none&quot;, &quot;protocolVersion&quot;: &quot;9p2000.L&quot;, &quot;msizeInKB&quot;: 128, &quot;cacheMode&quot;: &quot;mmap&quot; } }, &quot;networkingTunnel&quot;: false } }, &quot;extensions&quot;: { &quot;docker/logs-explorer-extension:0.2.2&quot;: true } }  "},{"title":"rdctl set​","type":1,"pageTitle":"命令参考：rdctl","url":"next/references/rdctl-command-reference#rdctl-set","content":"CLIAPI 运行 rdctl set [flags] 来设置属性。在大多数情况下，Kubernetes 会在运行 set 命令时重置。你可以通过在单个命令中使用链接来设置多个属性。下面是一些参考示例： 示例输出 &gt; rdctl set --kubernetes-enabled=false &gt; rdctl set --container-engine docker --kubernetes-version 1.21.2  "},{"title":"rdctl shutdown​","type":1,"pageTitle":"命令参考：rdctl","url":"next/references/rdctl-command-reference#rdctl-shutdown","content":"CLIAPI 运行 rdctl shutdown 来正常关闭 Rancher Desktop： 示例输出 &gt; rdctl shutdown Shutting down.  "},{"title":"rdctl start​","type":1,"pageTitle":"命令参考：rdctl","url":"next/references/rdctl-command-reference#rdctl-start","content":"CLIAPI 运行 rdctl start 来确保 Rancher Desktop 按照要求运行和配置： 示例输出 &gt; rdctl start --container-runtime dockerd -- kubernetes-version 1.19.3  "},{"title":"rdctl version​","type":1,"pageTitle":"命令参考：rdctl","url":"next/references/rdctl-command-reference#rdctl-version","content":"运行 rdctl version 来查看当前 rdctl CLI 的版本： 示例输出 &gt; rdctl version rdctl client version: 1.1.0, targeting server version: v1  "},{"title":"使用容器","type":0,"sectionRef":"#","url":"next/tutorials/working-with-containers","content":"","keywords":""},{"title":"运行容器​","type":1,"pageTitle":"使用容器","url":"next/tutorials/working-with-containers#运行容器","content":"要使用默认的 bridge CNI 网络 (10.4.0.0/24) 运行容器： nerdctldocker nerdctl run -it --rm alpine  要使用 BuildKit 构建镜像： nerdctldocker nerdctl build -t foo /some-dockerfile-directory nerdctl run -it --rm foo  要使用 BuiltKit 进行构建并将输出发送到本地目录： nerdctldocker nerdctl build -o type=local,dest=. /some-dockerfile-directory  "},{"title":"Docker Compose​","type":1,"pageTitle":"使用容器","url":"next/tutorials/working-with-containers#docker-compose","content":"Docker Compose 是一个用于定义和运行多容器 Docker 应用程序的工具。 nerdctldocker nerdctl-compose CLI 用于与 docker-compose 兼容： nerdctl compose up -d nerdctl compose down  "},{"title":"暴露端口​","type":1,"pageTitle":"使用容器","url":"next/tutorials/working-with-containers#暴露端口","content":"要为容器公开端口 8000： nerdctldocker nerdctl run -d -p 8000:80 nginx  然后，你可以在浏览器中访问 http://localhost:8000/ 来访问容器： 注意：默认情况下，暴露的端口可以在 macOS 和 Linux 上的所有网络接口上访问。然而，在 Windows 上，暴露的端口只能通过 localhost 网络接口访问（参见 issue #1180）。目前的一个解决方法是在 Windows 主机上配置 portproxy，从而将端口公开给其他网络接口。 netsh interface portproxy add v4tov4 listenport=8080 listenaddress=0.0.0.0 connectport=8080 connectaddress=localhost  "},{"title":"定位 Kubernetes 命名空间​","type":1,"pageTitle":"使用容器","url":"next/tutorials/working-with-containers#定位-kubernetes-命名空间","content":"你还可以通过 containerd 使用 --namespace 参数来定位 Kubernetes 命名空间。请注意 docker 不使用命名空间。 nerdctl nerdctl --namespace k8s.io build -t demo:latest /code/demos/rd/anvil-app nerdctl --namespace k8s.io ps  "},{"title":"诊断","type":0,"sectionRef":"#","url":"next/ui/diagnostics","content":"诊断 Diagnostics 功能通过在后台运行多项检查来检测环境中的常见问题（例如不满足最低要求、配置错误等），帮助你自行排除和修复 Rancher Desktop 应用程序的问题。 注意：Rancher Desktop 不会将诊断数据发送到任何远程服务器进行处理或存储。 WindowsmacOSLinux 每次启动应用程序时都会运行诊断检查。如果发现任何问题，则失败检查的数量会显示在左侧导航栏中的 Diagnostics 菜单文本的旁边。Diagnostics 选项卡会显示诊断测试的结果，突出显示需要注意的区域，并指导你解决问题。 如果你进行了非标准设置，并且知道这些检查不适用于你的情况，你可以在此选项卡上 mute/unmute 个别检查。你还可以随时重新运行诊断程序，从而验证你对环境所做的更改是否已经解决了问题。","keywords":""},{"title":"使用镜像","type":0,"sectionRef":"#","url":"next/tutorials/working-with-images","content":"","keywords":""},{"title":"常规用法​","type":1,"pageTitle":"使用镜像","url":"next/tutorials/working-with-images#常规用法","content":"使用任何一种工具都需要 Rancher Desktop 与适当的容器运行时一起运行。对于 nerdctl，使用 containerd 运行时。对于 docker，使用 Moby 运行时。 要了解所有命令选项并显示帮助文档，运行： nerdctldocker nerdctl -h 与 Docker 不同，containerd 具有自己的命名空间。默认情况下，nerdctl 镜像存储在 default 命名空间中。如果你希望你的镜像可供 Kubernetes 使用，请使用 --namespace k8s.io 或 -n k8s.io CLI 参数。你还可以使用 --namespace &lt;NAMESPACE_NAME&gt; 选项来切换到 default 或其他命名空间。请注意，nerdctl 命名空间独立于 Kubernetes 和 kubectl 命名空间。 "},{"title":"列出镜像​","type":1,"pageTitle":"使用镜像","url":"next/tutorials/working-with-images#列出镜像","content":"要查看当前可用的镜像，请运行以下命令： nerdctldocker nerdctl images  "},{"title":"构建镜像​","type":1,"pageTitle":"使用镜像","url":"next/tutorials/working-with-images#构建镜像","content":"nerdctldocker 构建镜像与现有工具的操作相似。你可以在具有 Dockerfile（Dockerfile 使用了一个 scratch 镜像）的路径上运行 nerdctl： nerdctl build . [+] Building 0.1s (4/4) FINISHED =&gt; [internal] load build definition from Dockerfile =&gt; =&gt; transferring dockerfile: 31B =&gt; [internal] load .dockerignore =&gt; =&gt; transferring context: 2B =&gt; [internal] load build context =&gt; =&gt; transferring context: 33B =&gt; CACHED [1/1] ADD anvil-app / nerdctl 具有在构建时进行标记的选项以及一些其他选项： nerdctl build -t TAG . 要构建用于 Kubernetes 的镜像，请指定 k8s.io 命名空间，如下所示： nerdctl build -n k8s.io .  "},{"title":"构建本地镜像​","type":1,"pageTitle":"使用镜像","url":"next/tutorials/working-with-images#构建本地镜像","content":"为了演示构建本地镜像和运行应用程序的步骤，Rancher Desktop 的 docs 仓库提供了一个示例 nodejs 应用程序。首先，克隆仓库并 cd 到终端中的 assets/express-sample 中。 运行以下命令来使用 Dockerfile 构建镜像： nerdctldocker nerdctl --namespace k8s.io build -t expressapp:v1.0 .  运行以下命令来运行容器： kubectl run --image expressapp:v1.0 expressapp kubectl port-forward pods/expressapp 3000:3000  注意：添加 latest 标签时，请务必同时指定以下内容： imagePullPolicy: Never  "},{"title":"标记镜像​","type":1,"pageTitle":"使用镜像","url":"next/tutorials/working-with-images#标记镜像","content":"如果要标记已构建的现有镜像，你可以运行以下命令： nerdctldocker nerdctl tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]  "},{"title":"删除镜像​","type":1,"pageTitle":"使用镜像","url":"next/tutorials/working-with-images#删除镜像","content":"要删除镜像，请运行以下命令： nerdctldocker nerdctl rmi IMAGE  "},{"title":"Extensions","type":0,"sectionRef":"#","url":"next/ui/extensions","content":"Extensions WindowsmacOSLinux The Catalog tab acts as a marketplace for available Rancher Desktop Extensions. Users can view and click on extensions for further description and the ability to install extensions directly through the UI. Search​ Users can make use of the Search functionality to query through available extensions. WindowsmacOSLinux The Installed tab is a view for all installed extensions on your Rancher Desktop application. Name​ A list of names of installed extensions. Users can directly uninstall extensions by clicking the Uninstall button for the respective extension on the right hand side. WindowsmacOSLinux The Details tab can be reached when clicking on an available extension on the Catalog tab. Users can see a description of the extension, as well as the most recent update, platform compatibility, and latest version. Install/Uninstall​ This button can be used to install or uninstall extensions depending on your use case.","keywords":""},{"title":"通用","type":0,"sectionRef":"#","url":"next/ui/general","content":"通用 General 选项卡提供了社区 channel 的信息，用户可以通过这些 channel 联系 Rancher Desktop 团队和社区，并提出问题、报告错误或讨论 Rancher Desktop。 WindowsmacOSLinux","keywords":""},{"title":"镜像","type":0,"sectionRef":"#","url":"next/ui/images","content":"","keywords":""},{"title":"Scanning Images​","type":1,"pageTitle":"镜像","url":"next/ui/images#scanning-images","content":"此功能使用 Trivy 来扫描你的镜像，从而查找漏洞和配置问题。 要扫描镜像： 从镜像列表中，找到要扫描的镜像。单击 ⋮ &gt; Scan。将显示按严重程度排序的漏洞摘要。单击 &gt; 查看​​每个漏洞的详细信息，其中包括漏洞详情的链接。 "},{"title":"Adding Images​","type":1,"pageTitle":"镜像","url":"next/ui/images#adding-images","content":"Pulling Images​ 此选项可以让你将镜像从镜像仓库拉取到你的虚拟机中。 要拉取镜像： 单击右上角的 + 按钮。单击 Pull 选项卡。输入要拉取的镜像的名称。 注意：默认情况下，镜像是从 Docker Hub 中提取的（格式：repo/image[:tag]）。要从其他镜像仓库中拉取，请包含主机名 registry.example.com/repo/image[:tag]。 单击 Pull。 Building Images​ 使用此选项构建镜像并将其添加到你的虚拟机。 要构建镜像： 单击右上角的 + 按钮。单击 Build 选项卡。输入构建的镜像的名称，例如 repo/image、repo/image:tag、registry.example.com/repo/image 或 registry.example.com/repo/image:tag。单击 Build。在文件浏览器中，选择要用来构建镜像的 Dockerfile。 "},{"title":"端口转发","type":0,"sectionRef":"#","url":"next/ui/port-forwarding","content":"端口转发 WindowsmacOSLinux 如需转发端口： 找到 Service 并单击 Forward，指定要使用的端口或使用随机分配的端口。点击 ✓ 按钮来确认你的选择。可选：单击 Cancel 来移除分配的端口。","keywords":""},{"title":"应用程序","type":0,"sectionRef":"#","url":"next/ui/preferences/application","content":"应用程序 WindowsmacOSLinux General​ Administrative Access​ 允许 Rancher Desktop 在启动某些操作时获得管理访问权限（sudo 权限）。这能用于增强功能，包括桥接网络和默认 docker socket 支持。更改会在 Rancher Desktop 下次启动时应用。 Automatic Updates​ 当一个新版本发布时，用户会得到一个通知和升级目标的发行版说明。无论是否启用了自动更新，用户都会收到通知。如果启用此选项，更新会被下载，然后在下次启动 Rancher Desktop 时安装更新。 Statistics​ 该选项允许 Rancher Desktop 收集关于你与 Rancher Desktop 应用程序交互的信息，但不会收集你运行的工作负载等信息。 Behavior​ Startup​ Rancher Desktop 可以作为用户登录的一部分自动启动。同时也将考虑页面中的其他行为设置。 Background​ Rancher Desktop 在后台启动时不会显示应用程序窗口，也不会在任务切换程序或任务栏中显示条目。应用程序窗口可以通过通知图标的右键菜单打开。 已经在后台运行的 Rancher Desktop 再次启动时将显示应用程序窗口，而且应用程序将添加到任务切换程序和任务栏中。通知图标也不可用时，这方法可用于再次访问后台应用程序。 即使主应用程序窗口关闭（应用程序因此从任务切换程序和任务栏中删除），Rancher Desktop 通常仍然在后台运行，但也可以配置为在主窗口关闭时终止程序。 Notification Icon​ Rancher Desktop 通过通知图标来显示应用程序的状态。图标的右键菜单提供了更多状态信息，并提供了应用程序其他功能的快速访问入口。此选项将禁用通知图标的创建。 Environment​ 配置 PATH​ Rancher Desktop 附带命令行实用程序，用于与其各种功能交互。这些实用程序包括 docker、nerdctl、kubectl 和 helm 等。这些实用程序位于 ~/.rd/bin，因此你可以通过运行 ls ~/.rd/bin 来查看你的安装中包含了哪些实用程序。 要使用这些实用程序，~/.rd/bin 必须位于 shell 的 PATH 变量中。 有两种执行此操作的选项： Automatic：PATH 管理将通过修改你的 shell .rc 文件来将 ~/.rd/bin 添加到 PATH 中。Manual：PATH 管理不会改变任何东西 - 在这种模式下，你必须手动将 ~/.rd/bin 添加到 PATH 中。","keywords":""},{"title":"容器引擎","type":0,"sectionRef":"#","url":"next/ui/preferences/container-engine","content":"","keywords":""},{"title":"General​","type":1,"pageTitle":"容器引擎","url":"next/ui/preferences/container-engine#general","content":"为 Rancher Desktop 设置容器运行时。用户可以选择 containerd 为容器提供命名空间，也可以使用 nerdctl 或 dockerd (moby) 来启用 D​​ocker API 和 Docker CLI。一次只能运行一个容器运行时。 WindowsmacOSLinux 容器引擎​ 切换到不同容器运行时的时候：使用当前容器运行时构建或拉取的工作负载和镜像在切换的容器运行时不可用。 "},{"title":"Allowed Images​","type":1,"pageTitle":"容器引擎","url":"next/ui/preferences/container-engine#allowed-images","content":"Allowed Images 选项卡用于控制可以在 Rancher Desktop 中访问的镜像仓库工件。例如，你可能只想从组织的私有镜像仓库，或仅从组织镜像仓库中特定部门的命名空间中拉取容器镜像。你可以指定镜像名称模式，从而仅允许访问特定镜像仓库和/或仓库的镜像。 WindowsmacOSLinux Allowed image patterns​ 选中 Enable 复选框，这样，Rancher Desktop 在拉取或推送镜像时将应用指定的模式，这意味着只允许名称至少与指定模式之一匹配的镜像。 你可以使用 + 和 - 按钮来添加/删除镜像名称模式。 如何指定 Allowed Image Patterns​ 你可以使用 [registry/][:port/][organization/]repository[:tag] 格式来指定 Allowed Image Pattern（允许的镜像模式）。 如果未指定 Allowed Image Patterns， registry 默认为 Docker Hub (docker.io)。port 默认为 433。Docker Hub 的 organization 默认为 library，不适用于其他镜像仓库。tag 默认为任何内容，不仅仅是 latest。 注意：按 tag 过滤实际上不起作用；相应的摘要 (repository@digest) 也必须添加到允许列表中才行，因此不实用。如果你有需要根据标签进行过滤的用例，请提交 Github issue。 示例​ 模式\t意义busybox\t允许 docker.io 镜像仓库的 library 组织中的 busybox 仓库。 suse/\t允许 docker.io 镜像仓库的 suse 组织中的任何镜像。 注意：仓库末尾的斜杠表示后面跟着单独的一段，例如 suse/nginx，而不是 suse/cap/uaa。 suse//\t允许 docker.io 镜像仓库的 suse 组织中的任何镜像。 注意：仓库末尾的双斜杠表示后面跟着一个或多个段，例如 suse/cap/uaa。 registry.internal:5000\t允许来自 registry.internal:5000 镜像仓库的任何镜像。 registry.suse.com/nginx\t允许来自 registry.suse.com 镜像仓库的镜像 nginx。 注意：DockerHub 之外的镜像仓库没有顶层组织的概念，因此没有默认的 library 组织。 "},{"title":"Kubernetes","type":0,"sectionRef":"#","url":"next/ui/preferences/kubernetes","content":"Kubernetes WindowsmacOSLinux Enable Kubernetes​ 此选项允许你启用或禁用 Kubernetes。禁用 Kubernetes 后，你可以只运行 containerd 或 dockerd 来减少资源消耗。默认情况下，Kubernetes 是启用的。 要启用/禁用 Kubernetes，只需选中/取消选中 Enable Kubernetes 复选框。启用/禁用 Kubernetes 时，该应用程序将重新启动。禁用 Kubernetes 不会删除现有资源，重新启用 Kubernetes 时，你可以再次使用这些资源。 Kubernetes Version​ 该选项显示了 Rancher Desktop 实例可以使用的 Kubernetes 版本列表。 升级时： 会进行检查，看目标 Kubernetes 版本是否可以在本地使用。如果没有，它会下载对应文件。保留工作负载。保留镜像。 降级时： 移除工作负载。保留镜像。 要切换版本： 点击 Kubernetes version 下拉菜单。选择要转换的版本。 Kubernetes Port​ 设置 Kubernetes 暴露的端口。如果有多个 K3s 实例正在运行，使用此设置可以避免端口冲突。 Enable Traefik​ 此选项允许你启用或禁用 Traefik。禁用 Traefik 后，你可以释放端口 80 和 443，以便将其用于备用 ingress 配置。默认情况下，Traefik 是启用的。 禁用 Traefik 不会删除现有资源。","keywords":""},{"title":"虚拟机（macOS 和 Linux）","type":0,"sectionRef":"#","url":"next/ui/preferences/virtual-machine","content":"虚拟机（macOS 和 Linux） macOSLinux Memory​ 分配给 Rancher Desktop 的内存。可选范围取决于你的系统。红色区域表示分配可能会影响系统服务。 CPU​ 分配给 Rancher Desktop 的 CPU 数量。可选范围取决于你的系统。红色区域表示分配可能会影响系统服务。","keywords":""},{"title":"WSL (Windows)","type":0,"sectionRef":"#","url":"next/ui/preferences/wsl","content":"WSL (Windows) 该选项使 Rancher Desktop Kubernetes 配置能够被任何 WSL 配置的 Linux 发行版所访问。一旦启用，你可以使用 WSL 发行版中的 kubectl 等工具与 Rancher Desktop Kubernetes 集群进行通信。 WSL 让你在所有 Linux 发行版中全局配置内存和 CPU 分配。请参阅 WSL 文档中的说明。","keywords":""},{"title":"故障排除","type":0,"sectionRef":"#","url":"next/ui/troubleshooting","content":"","keywords":""},{"title":"Show Logs​","type":1,"pageTitle":"故障排除","url":"next/ui/troubleshooting#show-logs","content":"使用此选项打开包含所有 Rancher Desktop 日志文件的文件夹。 Enable Debug Mode​ 启用 debug 级别日志记录。 "},{"title":"Reset Kubernetes​","type":1,"pageTitle":"故障排除","url":"next/ui/troubleshooting#reset-kubernetes","content":"重置 Kubernetes 并删除所有工作负载和配置。在重置之前，用户会看到确认信息以及删除容器镜像的选项。 要重置 Kubernetes： 单击 Reset Kubernetes，然后，你会看到一个确认窗口。可选：选择是否同时删除容器镜像。单击 Reset。Kubernetes 会停止并重新启动。 "},{"title":"Factory Reset​","type":1,"pageTitle":"故障排除","url":"next/ui/troubleshooting#factory-reset","content":"删除集群和所有其他 Rancher Desktop 设置。必须再次执行初始设置流程。 要恢复出厂设置： 单击 Reset。然后，你会看到一个确认窗口。可选：选择是否保留缓存的 Kubernetes 镜像。单击 Factory Reset。Kubernetes 会停止，Rancher Desktop 会关闭。可选：再次启动 Rancher Desktop。 "},{"title":"概述","type":0,"sectionRef":"#","url":"","content":"","keywords":""},{"title":"容器管理​","type":1,"pageTitle":"概述","url":"#容器管理","content":"Rancher Desktop 提供了构建、推送和拉取容器镜像以及运行容器的功能，这些功能可以通过 Docker CLI（当你选择 Moby/dockerd 作为引擎时）或 nerdctl（当你选择 containerd 作为引擎时）实现，而 nerdctl 是 containerd 项目提供的 &quot;兼容 containerd 的 Docker CLI&quot;。 "},{"title":"Kubernetes​","type":1,"pageTitle":"概述","url":"#kubernetes","content":"Kubernetes 内置在 Rancher Desktop 中，由 K3s 提供。K3s 是一个经过认证的轻量级发行版。通过 Rancher Desktop，你能够 选择你的 Kubernetes 版本，并且一键重置 Kubernetes 或 Kubernetes 以及整个容器运行时。 "},{"title":"Rancher 与 Rancher Desktop​","type":1,"pageTitle":"概述","url":"#rancher-与-rancher-desktop","content":"虽然 Rancher 和 Rancher Desktop 的名字里都包含 Rancher，但它们的功能是有差别的。Rancher Desktop 不是桌面版 Rancher。Rancher 是管理 Kubernetes 集群的强大解决方案，Rancher Desktop 提供本地 Kubernetes 和容器管理平台，这两种解决方案相辅相成。 如果要在本地系统上运行 Rancher，你可以将 Rancher 安装到 Rancher Desktop 中。 "},{"title":"v1.6.0","type":0,"sectionRef":"#","url":"bundled-utilities-version-info/v1.6.0","content":"v1.6.0 amazon-ecr-credential-helper: 0.6.0 docker: 20.10.17 docker-buildx: 0.9.1 docker-compose: 2.11.1 docker-credential-helpers: 0.6.4 helm: 3.9.4 kuberlr: 0.4.2 nerdctl: 0.23.0 trivy: 0.32.0 ","keywords":""},{"title":"v1.7.0","type":0,"sectionRef":"#","url":"bundled-utilities-version-info/v1.7.0","content":"v1.7.0 amazon-ecr-credential-helper: 0.6.0 docker: 20.10.21 docker-buildx: 0.9.1 docker-compose: 2.14.0 docker-credential-helpers: 0.6.4 helm: 3.10.2 kuberlr: 0.4.2 nerdctl: 1.0.0 trivy: 0.35.0 ","keywords":""},{"title":"v1.8.0","type":0,"sectionRef":"#","url":"bundled-utilities-version-info/v1.8.0","content":"v1.8.0 amazon-ecr-credential-helper: 0.6.0 docker: 23.0.1 docker-buildx: 0.10.4 docker-compose: 2.16.0 docker-credential-helpers: 0.6.4 helm: 3.11.2 kuberlr: 0.4.2 nerdctl: 1.2.1 trivy: 0.38.3 ","keywords":""},{"title":"常见问题","type":0,"sectionRef":"#","url":"faq","content":"常见问题 本文包含了用户常见的 Rancher Desktop 问题和解答。 问：Rancher Desktop 是 Rancher 的桌面版吗？​ 答：不是。Rancher Desktop 不是桌面版 Rancher。 虽然 Rancher 和 Rancher Desktop 的名字里都包含 Rancher，但它们的功能是有差别的。这两种解决方案相辅相成。 Rancher 是一个完整的软件堆栈，用于跨任何基础设施管理多个 Kubernetes 集群。 Rancher Desktop 在桌面上提供容器管理和 Kubernetes 实例，用于支持本地开发用例。 问：Rancher Desktop 中有 Kubernetes Cluster Explorer 吗？​ 答：是的，Rancher Dashboard 作为功能预览包含在 1.2.1 版本中。你可以通过单击系统托盘菜单中的 Dashboard 选项来调用仪表板。 要了解有关 Rancher Desktop 的更多信息，请单击此处。 要了解有关 Rancher 的更多信息，请单击此处。 问：我可以同时安装 Docker Desktop 与 Rancher Desktop 吗？​ 答：可以，但它们不能同时运行，因为 Rancher Desktop 和 Docker Desktop 使用相同的 Docker socket（/var/run/docker.sock）。在启动一个之前，一定要先停止另一个。 问：如何彻底卸载 Rancher Desktop？​ 答：首先，执行恢复出厂设置，然后卸载该应用程序。卸载过程因操作系统而异。如需更多信息，请参阅此处。 问：Windows 上的 DNS VPN 有哪些支持（如果有）？​ 答：Windows 的替代 DNS 解析器已实现，用来解决 Windows 上的某些 VPN 问题。它支持通过 VPN 连接进行 DNS 查找。它必须通过编辑内部配置文件手动启用。 问：“WSL 集成”选项卡有什么作用？​ 答：它能使 Kubernetes 配置可以在显示的 WSL 发行版中访问，以便你使用 kubectl 之类的命令与 Kubernetes 进行通信。 问：我在哪里可以找到详细的日志？​ 答：点击 Troubleshooting 标签，然后点击 Show Logs。 问：如何为 Traefik Ingress Controller 启用仪表板？​ 答：出于安全原因，Traefik 仪表板默认不公开。但是，你可以通过多种方式公开仪表板。你可以使用下面显示的两种方法之一。 使用 port-forward 来启用仪表板访问​ kubectl port-forward -n kube-system $(kubectl -n kube-system get pods --selector &quot;app.kubernetes.io/name=traefik&quot; --output=name) 9000:9000 在浏览器中访问 http://127.0.0.1:9000/dashboard/ 以查看 Traefik 仪表板。 使用 HelmChartConfig 来启用仪表板访问​ 将以下说明复制到文件中，例如 expose-traefik.yaml： apiVersion: helm.cattle.io/v1 kind: HelmChartConfig metadata: name: traefik namespace: kube-system spec: valuesContent: |- dashboard: enabled: true ports: traefik: expose: true # Avoid this in production deployments logs: access: enabled: true 运行命令： kubectl apply -f expose-traefik.yaml 在浏览器中访问 http://127.0.0.1:9000/dashboard/ 以查看 Traefik 仪表板。 问：如何禁用 Traefik，这样会删除 Traefik 资源吗？​ 答：是的，你可以禁用 Traefik 以释放端口 80 和 443 用于备用 ingress 配置。禁用 Traefik 不会 删除现有资源。Kubernetes Settings 下会默认选择 Enable Traefik 功能，取消选中此框即可禁用它。 如果要删除 Traefik 资源，请在 UI 的 Kubernetes Settings 面板上单击 Reset Kubernetes。 问：是否支持内部容器端口转发？​ 答：是的，从 v1.1.0 起，所有三个平台（Windows、Linux 和 macOS）都支持此功能。 问：文件共享的工作原理与 Docker Desktop 类似吗？是否必须进行任何其他配置才能将卷挂载到 VM？​ 答：目前默认共享以下目录：macOS 上为 /Users/$USER，Linux 上为 /home/$USER，二者均共享 /tmp/rancher-desktop。对于 Windows，所有文件都通过 WSL2 自动共享。 通常无法开箱即用地从主机访问标准的 Docker 卷。 要访问 Linux/macOS 上的其他目录，你必须进行额外的配置。 如果要改变挂载的行为，你也需要进行额外的配置。 问：容器是否能通过 host.docker.internal 回到主机服务？​ 答：是的。在 Windows 上，你可能需要创建防火墙规则来允许主机和容器之间的通信。你可以在特权 powershell 中运行以下命令来创建防火墙规则： New-NetFirewallRule -DisplayName &quot;WSL&quot; -Direction Inbound -InterfaceAlias &quot;vEthernet (WSL)&quot; -Action Allow 问：我不需要 Rancher Desktop 部署的 Kubernetes 集群；如何禁用它以节省资源？​ 答：打开 Rancher Desktop 设置，点击齿轮打开 Preferences，选择 Kuberentes 选项卡，然后取消勾选 Kubernetes Settings 下的 Enable Kubernetes 功能以禁用它。 这将允许你在不为 Kubernetes 分配资源的情况下仅运行 containerd 或 dockerd。 问：Kubernetes Image Manager (kim) 发生了什么？​ 答：从 1.0 版本开始，Kim 不再被支持，而且已被 nerdctl 和 Docker CLI 取代。 问：为什么运行 brew install rancher 时出现 It seems there is already a Binary at '/usr/local/bin/&lt;BINARY&gt;' 的错误？​ 答：如果支持 Rancher Desktop 的工具（Helm、kubectl、nerdctl、docker）已经由 Homebrew 管理，那么由于 Homebrew cask 公式的定义方式，安装会失败。你可以使用 Mac 应用程序进行安装来避免这个问题。 问：我通过 Arch User Repository 安装了 nerdctl，但它不能与 Rancher Desktop 一起使用，为什么？​ 答：对于 Rancher Desktop，nerdctl 必须在 VM 内部而不是在主机上运行。与 Rancher Desktop 一起打包的主机版本只是一个 shell wrapper，用于在 VM 内执行命令。 问：Support Utilities 页面（Rancher Desktop &lt;1.3.0）上的工具未安装，我看到 Insufficient permission to modify /usr/local/bin 错误，我该如何解决？​ 答：当你没有 /usr/local/bin 的权限时就会发生这种情况。改善权限处理的长期解决方案正在开发中。同时，一个临时的解决方法是通过运行 sudo chown $USER /usr/local/bin 来更改 /usr/local/bin 的权限。当你能够写入目录时，Rancher Desktop 就能够创建符号链接。 从 1.3.0 及更高版本开始，我们不再在 /usr/local/bin 中创建符号链接，而是在 ~/.rd/bin 中创建符号链接，并将该目录放在 PATH 中，这样可以避免处理 /usr/local/bin 的写权限和文件冲突。我们强烈建议你升级到最新版本的 Rancher Desktop。 问：Cygwin 与 Rancher Desktop 兼容吗？​ 答：没有，但我们有增加兼容性的计划。 问：如何将 Rancher Desktop 添加到 Windows 的启动程序列表中？​ 答：在 Windows 上，你可以通过不同的方式将程序添加到启动程序列表中。例如，你可以执行以下步骤： 按 Windows+R 打开运行对话框。输入 shell:startup，然后按 Enter 打开 Startup 文件夹。从桌面复制“Rancher Desktop”快捷方式并粘贴到 Startup 文件夹中。重新启动主机。 问：Rancher Desktop 实际将数据卷放在哪里？​ 答： Windows： 打开运行菜单（按 Windows + R）并打开下面的路径（具体取决于活动的容器运行时）： dockerd(moby): \\\\wsl$\\rancher-desktop-data\\var\\lib\\docker\\volumes containerd: \\\\wsl$\\rancher-desktop-data\\var\\lib\\nerdctl\\dbb19c5e\\volumes\\&lt;namespace&gt; macOS 和 Linux： 根据活动的容器运行时，在 (lima) VM 中导航到下面的路径。你可以使用 rdctl shell 访问 VM 中的这些路径。 dockerd(moby): /var/lib/docker/volumes containerd: /var/lib/nerdctl/dbb19c5e/volumes/&lt;namespace&gt; 问：如何将 Rancher Desktop 降级到旧版本​ 答：我们强烈建议你使用包含最新功能和错误修复的当前发行版。但是，如果你想降级到较早的版本，请按照以下步骤操作。 执行 Troubleshooting &gt; Factory Reset。请确保没有在 Factory Reset 对话框中选中 Keep cached Kubernetes images。按照适用于你操作系统的卸载说明卸载当前版本。安装你所需的旧版本。","keywords":""},{"title":"部署配置文件","type":0,"sectionRef":"#","url":"getting-started/deployment","content":"","keywords":""},{"title":"启动首选值​","type":1,"pageTitle":"部署配置文件","url":"getting-started/deployment#启动首选值","content":"Rancher Desktop 设置如下： 加载 “admin” 部署配置文件（“defaults” 和 “locked”）如果都不存在，则加载 “user” 部署配置文件（同样是 “defaults” 和 “locked”）从 settings.json 文件加载保存的首选项如果没有保存的设置，请改用之前加载的 “defaults” 配置文件将用于启动应用程序的命令行参数值复制到设置中如果设置仍然完全为空，则显示首次运行对话框使用内置应用程序默认值填充任何缺失的值将 “locked” 配置文件中的值复制到当前设置上 用户无法通过 GUI 或 CLI 修改已被配置文件锁定的设置。 如果配置文件存在但无法正确解析，Rancher Desktop 将拒绝加载应用程序。 Rancher Desktop 不会修改或删除部署配置文件。它们不会受到恢复出厂设置或卸载的影响。 配置文件数据的结构与应用程序设置匹配： rdctl list-settings { ... &quot;containerEngine&quot;: { &quot;allowedImages&quot;: { &quot;enabled&quot;: false, &quot;patterns&quot;: [] }, &quot;name&quot;: &quot;containerd&quot; }, ... }  下面针对各系统的文档说明了如何创建部署配置文件，该配置文件将默认容器引擎更改为 moby，禁用 Kubernetes，并将镜像列表锁定为仅允许 busybox 和 nginx。 "},{"title":"配置文件格式和位置​","type":1,"pageTitle":"部署配置文件","url":"getting-started/deployment#配置文件格式和位置","content":"不同系统使用的部署配置文件存储格式和位置不同。 WindowsmacOSLinux 在 Linux 上，部署配置文件以 JSON 格式存储。 配置文件的位置是： /etc/rancher-desktop/defaults.json /etc/rancher-desktop/locked.json ~/.config/rancher-desktop.defaults.json ~/.config/rancher-desktop.locked.json 将所有当前设置转换为部署配置文件​ 由于部署配置文件以 JSON 格式存储，因此创建配置文件最简单的方法是将当前应用程序设置保存到配置文件位置，然后使用文本编辑器微调配置文件。 rdctl list-settings &gt; ~/.config/rancher-desktop.defaults.json 默认使用 “moby” 容器引擎并禁用 Kubernetes​ ~/.config/rancher-desktop.defaults.json { &quot;containerEngine&quot;: { &quot;name&quot;: &quot;moby&quot; }, &quot;kubernetes&quot;: { &quot;enabled&quot;: false } } 将镜像列表锁定为仅允许 “busybox” 和 “nginx”​ ~/.config/rancher-desktop.locked.json { &quot;containerEngine&quot;: { &quot;allowedImages&quot;: { &quot;enabled&quot;: true, &quot;patterns&quot;: [&quot;busybox&quot;,&quot;nginx&quot;] } } }  "},{"title":"已知问题和限制​","type":1,"pageTitle":"部署配置文件","url":"getting-started/deployment#已知问题和限制","content":"containerEngine.allowedImages 是当前唯一可以锁定的设置。在 macOS 上，格式不正确的配置文件会被忽略，而不是阻止应用程序加载。无法通过部署配置文件设置 diagnostics.showMuted（Windows 上的 WSL.integrations）。在 macOS 和 Linux 上，如果 “defaults” 配置文件未为 application.pathManagementStrategy 配置值，则仍会显示一个简短的首次运行对话框。 "},{"title":"使用 k3d 创建多节点集群","type":0,"sectionRef":"#","url":"how-to-guides/create-multi-node-cluster","content":"","keywords":""},{"title":"启动多节点集群的步骤​","type":1,"pageTitle":"使用 k3d 创建多节点集群","url":"how-to-guides/create-multi-node-cluster#启动多节点集群的步骤","content":"确保在 Kubernetes Settings 页面中选择了 dockerd(moby) 作为容器运行时。 安装 k3d。 wgetcurl wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash  运行 k3d cluster create 命令来启动多节点集群。例如： k3d cluster create two-node-cluster --agents 2 k3d cluster create three-node-cluster --agents 3  k3d 将新创建的集群设置为 active。你可以通过 kubectl config use-context 命令来切换集群。例如： kubectl config use-context k3d-two-node-cluster  要了解有关 k3s 和 k3d 的更多信息，请参阅这些项目的文档（k3s 文档 和 k3d 文档）。 ⚠️ 请注意，k3d 创建的集群不是通过 Rancher Desktop GUI 管理的。 "},{"title":"安装","type":0,"sectionRef":"#","url":"getting-started/installation","content":"","keywords":""},{"title":"macOS​","type":1,"pageTitle":"安装","url":"getting-started/installation#macos","content":""},{"title":"要求​","type":1,"pageTitle":"安装","url":"getting-started/installation#要求","content":"Rancher Desktop 在 macOS 上运行需要以下条件： macOS Catalina 10.15 或更高版本。带有 VT-x 的 Apple 芯片 (M1) 或 Intel CPU。连接到互联网。 还建议具备以下条件： 8 GB 内存4 个 CPU 你要运行的工作负载可能还需要一些额外的资源。 "},{"title":"在 macOS 上安装 Rancher Desktop​","type":1,"pageTitle":"安装","url":"getting-started/installation#在-macos-上安装-rancher-desktop","content":"转到 GitHub 上的 Releases 页面。找到要下载的 Rancher Desktop 版本。展开 Assets 部分并下载 Rancher.Desktop-X.Y.Z.dmg，其中 X.Y.Z 是 Rancher Desktop 的版本。导航到下载安装程序的目录，并运行安装程序。这个目录通常是下载文件夹。双击 DMG 文件。在打开的访达窗口中，将 Rancher Desktop 图标拖到应用程序文件夹中。导航到应用程序文件夹，然后双击 Rancher Desktop 来启动它。 安装 Rancher Desktop 后，用户可以访问以下支持的工具： Helmkubectlnerdctldocker (moby) "},{"title":"在 macOS 上卸载 Rancher Desktop​","type":1,"pageTitle":"安装","url":"getting-started/installation#在-macos-上卸载-rancher-desktop","content":"打开访达 &gt; 应用程序。找到 Rancher Desktop。选中它，然后选择文件 &gt; 移到废纸篓。要删除应用程序，选择访达 &gt; 清倒废纸篓。 "},{"title":"Windows​","type":1,"pageTitle":"安装","url":"getting-started/installation#windows","content":""},{"title":"要求​","type":1,"pageTitle":"安装","url":"getting-started/installation#要求-1","content":"Rancher Desktop 在 Windows 上运行需要以下条件： Windows 10 build 1909 或更高版本。支持家庭版。在具有虚拟化功能的主机上运行。连接到互联网。 Rancher Desktop 在 Windows 上需要 Windows Subsystem for Linux，它将作为 Rancher Desktop 设置的一部分自动安装。你不需要手动下载发行版。 还建议具备以下条件： 8 GB 内存4 个 CPU 你要运行的工作负载可能还需要一些额外的资源。 注意：你可以在 Windows 主机上以非管理员用户身份使用 Rancher Desktop。但是，以下组件的安装过程需要管理员的干预： WSL2：你需要管理员权限才能安装 WSL2，它是 Rancher Desktop 的重要组件。Rancher Desktop Privileged Service：你需要管理员权限才能安装 Rancher Desktop Privileged Service，这是在主机的所有接口上公开运行在容器内的应用程序/服务所必需的。你也可以跳过 Rancher Desktop Privileged Service 的安装，这样的话，你将无法在 127.0.0.1 之外的任何接口上公开应用程序/服务。 "},{"title":"在 Windows 上安装 Rancher Desktop​","type":1,"pageTitle":"安装","url":"getting-started/installation#在-windows-上安装-rancher-desktop","content":"转到 GitHub 上的 Releases 页面。找到要下载的 Rancher Desktop 版本。展开 Assets 部分并下载 Windows 安装程序。它的名称是 Rancher.Desktop.Setup.X.Y.Z.msi，其中 X.Y.Z 是 Rancher Desktop 的版本。导航到下载安装程序的目录，并运行安装程序。这个目录通常是下载文件夹。查看许可协议并单击 I Agree 来继续安装。如果出现提示，请选择为计算机的所有用户安装，或仅为当前用户安装。建议为所有用户安装，以便安装 Rancher Desktop Privileged Service，如上所述。按照提示确认安装。安装完成后，单击 Finish 来关闭安装向导。 "},{"title":"在 Windows 上卸载 Rancher Desktop​","type":1,"pageTitle":"安装","url":"getting-started/installation#在-windows-上卸载-rancher-desktop","content":"在任务栏中，单击开始菜单。转到设置 &gt; 应用程序 &gt; 应用程序和功能。找到并选择 Rancher Desktop。点击卸载，出现确认信息时再次点击。按照 Rancher Desktop 卸载程序上的提示继续。完成后点击完成。 "},{"title":"Linux​","type":1,"pageTitle":"安装","url":"getting-started/installation#linux","content":""},{"title":"要求​","type":1,"pageTitle":"安装","url":"getting-started/installation#要求-2","content":"Rancher Desktop 在 Linux 上运行需要以下条件： 一个可以安装 .deb 或 .rpm 包或 AppImages 的发行版。连接到互联网。带有 AMD-V 或 VT-x 的 x86_64 处理器。/dev/kvm 上的读写权限。详情见下文。 还建议具备以下条件： 8 GB 内存4 个 CPU 你要运行的工作负载可能还需要一些额外的资源。 "},{"title":"确保你可以访问 /dev/kvm​","type":1,"pageTitle":"安装","url":"getting-started/installation#确保你可以访问-devkvm","content":"Rancher Desktop 需要 /dev/kvm 的权限，而在某些发行版（例如 Ubuntu 18.04）上，用户没有足够的权限。 要检查你是否具有所需的权限，请执行以下操作： [ -r /dev/kvm ] &amp;&amp; [ -w /dev/kvm ] || echo 'insufficient privileges'  如果输出是 insufficientprivilege，你需要将你的用户添加到 kvm 组。你可以执行以下操作： sudo usermod -a -G kvm &quot;$USER&quot;  然后重新启动使更改生效。 "},{"title":"pass 设置​","type":1,"pageTitle":"安装","url":"getting-started/installation#pass-设置","content":"默认情况下，Rancher Desktop 使用 pass 来安全地存储通过 docker login 和 nerdctl login 传递的凭证。在第一次在主机上使用时，pass 需要你进行少量的设置。如果你不打算使用 docker login 或 nerdctl login，你不需要设置 pass。但请记住，如果你以后需要使用它们，你必须设置它们，否则会出现错误。 安装 Rancher Desktop 后，你应该创建一个 GPG 密钥。pass 会使用它来保护密文。要创建 GPG 密钥： gpg --generate-key  输出应该与 8D818FB37A9279E341F01506ED96AD27A40C9C73 类似。 这是你的密钥 ID。然后，你可以通过将此密钥 ID 传递给它来初始化 pass： pass init 8D818FB37A9279E341F01506ED96AD27A40C9C73  关于 pass 的更多信息，请参阅此处。 "},{"title":"Traefik 端口绑定访问​","type":1,"pageTitle":"安装","url":"getting-started/installation#traefik-端口绑定访问","content":"Rancher Desktop 使用 Traefik 作为默认 Ingress Controller。由于 Traefik Ingress 上的端口访问受限，用户在部署 Rancher Desktop 后可能会遇到 permission denied 错误。大多数 Linux 发行版（例如 Ubuntu 20.04）不允许非 root 用户监听 1024 以下的 TCP 和 UDP 端口。为了让 Traefik 监听本地主机上的特权端口，请运行以下命令： sudo sysctl -w net.ipv4.ip_unprivileged_port_start=80  命令运行后，80 及以上的所有端口都将变为非特权端口，Traefik 将能够成功访问这些端口。 "},{"title":"通过 .deb 包安装​","type":1,"pageTitle":"安装","url":"getting-started/installation#通过-deb-包安装","content":"添加 Rancher Desktop 仓库并使用以下命令安装 Rancher Desktop： curl -s https://download.opensuse.org/repositories/isv:/Rancher:/stable/deb/Release.key | gpg --dearmor | sudo dd status=none of=/usr/share/keyrings/isv-rancher-stable-archive-keyring.gpg echo 'deb [signed-by=/usr/share/keyrings/isv-rancher-stable-archive-keyring.gpg] https://download.opensuse.org/repositories/isv:/Rancher:/stable/deb/ ./' | sudo dd status=none of=/etc/apt/sources.list.d/isv-rancher-stable.list sudo apt update sudo apt install rancher-desktop  "},{"title":"卸载 .deb 包​","type":1,"pageTitle":"安装","url":"getting-started/installation#卸载-deb-包","content":"你可以使用以下命令删除包、仓库和密钥： sudo apt remove --autoremove rancher-desktop sudo rm /etc/apt/sources.list.d/isv-rancher-stable.list sudo rm /usr/share/keyrings/isv-rancher-stable-archive-keyring.gpg sudo apt update  "},{"title":"通过 .rpm 包安装​","type":1,"pageTitle":"安装","url":"getting-started/installation#通过-rpm-包安装","content":"注意：Rancher Desktop 在 Linux 上使用 QEMU，而 RHEL、Fedora 和相关发行版打包 QEMU 的方式与其他发行版不同。要在这些发行版上使用 Rancher Desktop，请使用 AppImage。 在 openSUSE 上添加仓库并安装： sudo zypper addrepo https://download.opensuse.org/repositories/isv:/Rancher:/stable/rpm/isv:Rancher:stable.repo sudo zypper install rancher-desktop  "},{"title":"卸载 .rpm 包​","type":1,"pageTitle":"安装","url":"getting-started/installation#卸载-rpm-包","content":"确保 Rancher Desktop 已退出（如果没有，它应该出现在 Dock 中），然后执行： sudo zypper remove --clean-deps rancher-desktop sudo zypper removerepo isv_Rancher_stable  "},{"title":"通过 AppImage 安装​","type":1,"pageTitle":"安装","url":"getting-started/installation#通过-appimage-安装","content":"首先，确保安装了 pass 和 gpg。例如，在 Fedora 上： dnf install pass gnupg2  你可以在此处下载 AppImage。要运行它，只需要添加可执行权限，然后执行即可。为了更好地与你的桌面集成，你可以使用 AppImageLauncher。 "},{"title":"卸载 AppImage​","type":1,"pageTitle":"安装","url":"getting-started/installation#卸载-appimage","content":"只需删除 AppImage。 "},{"title":"Hello World 示例","type":0,"sectionRef":"#","url":"how-to-guides/hello-world-example","content":"","keywords":""},{"title":"示例 1 - 构建镜像并运行容器​","type":1,"pageTitle":"Hello World 示例","url":"how-to-guides/hello-world-example#示例-1---构建镜像并运行容器","content":"创建文件夹​ mkdir hello-world cd hello-world  创建一个空白的 Dockerfile​ 在 Windows 上，创建一个名为 Dockerfile 的空白文件。 在 Linux 上，你可以使用以下命令创建一个空白的 Dockerfile: vi Dockerfile  使用以下命令填充 Dockerfile​ FROM alpine CMD [&quot;echo&quot;, &quot;Hello World!!&quot;]  构建并运行镜像以进行验证​ nerdctldocker nerdctl build --tag helloworld:v1.0 . nerdctl images | grep helloworld nerdctl run --rm helloworld:v1.0 # 移除镜像 nerdctl rmi helloworld:v1.0  "},{"title":"示例 2 - 构建镜像并将容器部署到 Kubernetes​","type":1,"pageTitle":"Hello World 示例","url":"how-to-guides/hello-world-example#示例-2---构建镜像并将容器部署到-kubernetes","content":"根据需要将 Kubernetes Settings 面板中的 Container Runtime 切换为 dockerd 或 containerd。 创建一个文件夹并添加一个示例 index.html 文件，如下所示​ mkdir nginx cd nginx echo &quot;&lt;h1&gt;Hello World from NGINX!!&lt;/h1&gt;&quot; &gt; index.html  创建一个空白的 Dockerfile​ 在 Windows 上，创建一个名为 Dockerfile 的空白文件。 在 Linux 上，你可以使用以下命令创建一个空白的 Dockerfile: vi Dockerfile  使用以下命令填充 Dockerfile​ FROM nginx:alpine COPY . /usr/share/nginx/html  使用本地代码构建镜像​ ⚠️ 注意：你需要将 --namespace k8s.io 标志传递给 nerdctl build 命令，以便 nerdctl 构建镜像并使其在 k8s.io 命名空间中可用。 nerdctldocker nerdctl --namespace k8s.io build --tag nginx-helloworld:latest . nerdctl --namespace k8s.io images | grep nginx-helloworld  部署到 Kubernetes​ 运行以下命令，从而使用在上一步中构建的镜像创建和运行 pod。 ⚠️ 注意：你需要传递 --image-pull-policy=Never 标志以使用带有 :latest 标签的本地镜像（:latest 标签将始终尝试从远程仓库中拉取镜像）。 kubectl run hello-world --image=nginx-helloworld:latest --image-pull-policy=Never --port=80 kubectl port-forward pods/hello-world 8080:80  在浏览器中访问 localhost:8080，你将看到 Hello World from NGINX!! 的信息。如果你想留在命令行上，请使用 curl localhost:8080。 删除 pod 和镜像​ nerdctldocker kubectl delete pod hello-world # 移除镜像 nerdctl --namespace k8s.io rmi nginx-helloworld:latest  "},{"title":"增加打开文件限制","type":0,"sectionRef":"#","url":"how-to-guides/increasing-open-file-limit","content":"","keywords":""},{"title":"macOS & Linux 步骤​","type":1,"pageTitle":"增加打开文件限制","url":"how-to-guides/increasing-open-file-limit#macos--linux-步骤","content":"首先，使用 lima override.yaml 编写配置脚本。 在以下路径创建 override.yaml 文件。 macOSLinux ~/Library/Application Support/rancher-desktop/lima/_config/override.yaml  然后，使用下面的脚本为 override.yaml 文件中的容器增加 ulimit。 provision: - mode: system script: | #!/bin/sh cat &lt;&lt;'EOF' &gt; /etc/security/limits.d/rancher-desktop.conf * soft nofile 82920 * hard nofile 82920 EOF  如果你使用 Elastic 平台，请使用下面的脚本设置 vm.max_map_count 参数。 provision: - mode: system script: | #!/bin/sh cat &lt;&lt;'EOF' &gt; /etc/security/limits.d/rancher-desktop.conf * soft nofile 82920 * hard nofile 82920 sysctl -w vm.max_map_count=262144 EOF  最后，停止并重启 Rancher Desktop 来让新的限制生效。 "},{"title":"Windows 步骤​","type":1,"pageTitle":"增加打开文件限制","url":"how-to-guides/increasing-open-file-limit#windows-步骤","content":"首先，确保 Rancher Desktop 至少运行过一次来初始化配置。 然后，使用以下代码在 %AppData%\\rancher-desktop\\provisioning 中创建一个配置脚本，比如 map_count.start，这样能通过增加 max_map_count 参数的值来更新打开文件的限制。 #!/bin/sh sysctl -w vm.max_map_count=262144  最后，停止并重启 Rancher Desktop 来让变更生效。 "},{"title":"配置脚本","type":0,"sectionRef":"#","url":"how-to-guides/provisioning-scripts","content":"","keywords":""},{"title":"macOS & Linux​","type":1,"pageTitle":"配置脚本","url":"how-to-guides/provisioning-scripts#macos--linux","content":"在 macOS 和 Linux 上，你可以使用 lima override.yaml 来编写配置脚本。 在以下路径创建 override.yaml 文件。 macOSLinux ~/Library/Application Support/rancher-desktop/lima/_config/override.yaml  在上一步中创建的 override.yaml 文件中编写配置脚本。例如，你可以使用以下脚本来增加容器的 ulimit： provision: - mode: system script: | #!/bin/sh cat &lt;&lt;'EOF' &gt; /etc/security/limits.d/rancher-desktop.conf * soft nofile 82920 * hard nofile 82920 EOF  你还可以使用 override.yaml 来覆盖/修改 lima 配置设置。下面的示例创建了额外的挂载： mounts: - location: /some/path writable: true  "},{"title":"Windows​","type":1,"pageTitle":"配置脚本","url":"how-to-guides/provisioning-scripts#windows","content":"注意：在 Windows 上，你只能为 1.1.0 或更高版本的 Rancher Desktop 使用这些配置脚本。 你需要至少运行 Rancher Desktop 一次以允许它创建配置。 打开 %AppData%\\\\rancher-desktop\\\\provisioning 目录。完整路径的示例：C:\\\\Users\\\\Joe\\\\AppData\\\\Roaming\\\\rancher-desktop\\\\provisioning。 请注意，任何文件扩展名为 .start 的文件（例如 k3s-overrides.start）都可以在 Rancher Desktop 启动 Kubernetes 后端（如果启用） 时执行。此类文件将在 Rancher Desktop WSL 上下文中运行。 .start 文件的示例流程： Rancher Desktop 内部设置运行配置脚本在 UI 中启用 dockerd 或 containerdKubernetes (K3s) 例如，使用 %AppData%\\\\rancher-desktop\\\\provisioning\\\\insecure-registry.start 将允许 nerdctl 默认使用不安全的镜像仓库： #!/bin/sh mkdir -p /etc/nerdctl cat &gt; /etc/nerdctl/nerdctl.toml &lt;&lt;EOF insecure_registry = true EOF  请注意，文件扩展名为 .stop 的文件（例如 wipe-data.stop）可以在 Rancher Desktop 关闭 Kubernetes 后端（如果启用）后 执行。此类文件将在相同的 Rancher Desktop WSL 上下文中运行。 .stop 文件的示例流程： 停止 k3s、dockerd 或 containerd运行取消配置的脚本 重要提示：脚本需要以 Unix 行结尾保存，未完成行尾转换，且具有 DOS 行结尾的文件可能会产生意想不到的结果。你可以使用配置脚本更改的内容是有限制的。例如，你不能使用配置脚本更改 WSL2 上的硬 ulimit。请谨慎使用配置脚本，如果你对配置脚本有任何具体问题，请随时在 Slack/Github 上与 Rancher Desktop 团队联系。 "},{"title":"Rancher Desktop 上的 Rancher","type":0,"sectionRef":"#","url":"how-to-guides/rancher-on-rancher-desktop","content":"Rancher Desktop 上的 Rancher 虽然 Rancher 和 Rancher Desktop 的名字里都包含 Rancher，但它们的功能是有差别的。Rancher Desktop 不是桌面版 Rancher。Rancher 是管理 Kubernetes 集群的强大解决方案，而 Rancher Desktop 运行本地 Kubernetes 和容器管理平台，这两种解决方案相辅相成。例如，你可以将 Rancher 作为工作负载安装在 Rancher Desktop 中。 本指南概述了使用 container runtime 或 helm（本地环境）在 Rancher Desktop 上安装 Rancher Dashboard 的步骤： 注意：如果实用程序（例如：helm）或你的工作负载版本与会话中的 Kubernetes 版本不兼容，你可能会遇到问题。作为一个潜在的修复，你可以通过 Preferences &gt; Kubernetes 对话框切换到兼容的 Kubernetes 版本。支持矩阵页面上列出了 Rancher 支持的 Kubernetes 平台。 nerdctldockerhelm nerdctl run --privileged -d --restart=always -p 8080:80 -p 8443:443 rancher/rancher 安装需要几分钟才能完成。安装后，你可以访问 Rancher UI，如下所示： 通过 container runtime 安装：https://localhost:8443/通过 helm 安装：https://rancher.rd.localhost/ nerdctldocker 要访问 Rancher UI，你需要获取引导密码： 1：获取 Rancher UI 容器 ID/名称： nerdctl ps 2：获取引导密码： nerdctl logs [rancherContainerID] 2&gt;&amp;1 | grep &quot;Bootstrap Password:&quot; 3：引导密码示例： [INFO] Bootstrap Password: 7fwjjw4ldcmnq8ghns22q7nhl5lrznwwt9p9vjljfjc6tqbcvhxmwq 按照向导说明并单击 Continue 以进入 Rancher UI 主页面。 在 Rancher UI 中，你可以管理 local 集群、节点等。如需更多信息，请参阅 Rancher 文档。","keywords":""},{"title":"设置 NGINX Ingress Controller","type":0,"sectionRef":"#","url":"how-to-guides/setup-NGINX-Ingress-Controller","content":"","keywords":""},{"title":"步骤​","type":1,"pageTitle":"设置 NGINX Ingress Controller","url":"how-to-guides/setup-NGINX-Ingress-Controller#步骤","content":"在 Kubernetes Settings 页面取消选中 Enable Traefik 来禁用 Traefik。你可能需要退出并重新启动 Rancher Desktop 才能使更改生效。 通过 helm 或 kubectl 部署 NGINX Ingress Controller： helmkubectl helm upgrade --install ingress-nginx ingress-nginx \\ --repo https://kubernetes.github.io/ingress-nginx \\ --namespace ingress-nginx --create-namespace  等待 ingress pod 运行： kubectl get pods --namespace=ingress-nginx  创建示例 deployment 和关联的 service： kubectl create deployment demo --image=nginx --port=80 kubectl expose deployment demo  创建 ingress 资源。以下命令使用了映射到 localhost 的主机： kubectl create ingress demo-localhost --class=nginx --rule=&quot;demo.localdev.me/*=demo:80&quot;  将本地端口转发到 Ingress Controller： kubectl port-forward --namespace=ingress-nginx service/ingress-nginx-controller 8080:80  现在，如果你访问 http://demo.localdev.me:8080/ ，你应该会看到 NGINX 的欢迎页面。 "},{"title":"离线运行","type":0,"sectionRef":"#","url":"how-to-guides/running-air-gapped","content":"","keywords":""},{"title":"Windows 用户须知​","type":1,"pageTitle":"离线运行","url":"how-to-guides/running-air-gapped#windows-用户须知","content":"本文档的环境变量使用 Powershell 语法。如果你使用的是 Command shell，看到 $env:FOO 环境变量的引用时，请将其替换为 %FOO%。 "},{"title":"网络敏感区域​","type":1,"pageTitle":"离线运行","url":"how-to-guides/running-air-gapped#网络敏感区域","content":"Rancher Desktop 假设有两个的区域的网络可用，并会在离线的情况下进行恢复： 将 Kubernetes k3s 镜像拉入 k3s 缓存目录 使用 kuberlr 作为对 kubectl 的版本感知包装器，因此客户端与 Kubernetes Server 的差异不会超过一个次要版本。 "},{"title":"现有 Deployment​","type":1,"pageTitle":"离线运行","url":"how-to-guides/running-air-gapped#现有-deployment","content":"如果 Rancher Desktop 安装在最初就具有网络访问权限的主机上，在关闭网络连接后，Rancher Desktop 仍能在该主机上运行。但是，下拉菜单中可用的 Kubernetes 版本会限制为已下载并存储在缓存中的版本。 由于 kuberlr 包装器（Windows 用户需要为每个可执行实用程序文件添加 .exe 后缀），因此使用 kubectl 客户端会存在一个问题。 在这种情况下，虽然我们的系统在初始化时已经连接到互联网，但是后续使用时会让主机脱机使用。 假设 rancher-desktop 缓存中有三个版本的 k3s： 1.24.3 1.21.14 1.19.16 假设在这个系统上我们只有在使用 1.24.3 和 1.21.14 时运行了 kubectl。换言之，~/.kuberlr/PLATFORM-ARCH/ 目录（Windows 上为$env:HOMEDRIVE%\\$env:HOMEPATH/.kuberlr/windows-amd64）只包含两个文件： kubectl1.24.3 kubectl1.21.14 如果我们将系统脱机，并通过 UI 切换到 Kubernetes 1.19.16，则系统会在运行 kubectl 的时候失败。 问题在于 kubectl 是 kuberlr 的别名，它会尝试下载 kubectl 1.19.16 并将它安装到 .kuberlr 目录中，但却无法进行访问。 因此在这种情况下，最好的方法是选择缓存中每个可用的 Kubernetes 版本，并运行 kubectl --context rancher-desktop cluster-info 来确保安装了适当版本的 kubectl 客户端，以便在断开连接时能连接系统。 你可以手动安装版本化的 kubectl，具体内容会在下一节中介绍。 "},{"title":"准备离线系统​","type":1,"pageTitle":"离线运行","url":"how-to-guides/running-air-gapped#准备离线系统","content":"此处假设你有某种移动媒体，你可以将其填充到联网系统上，然后移至离线系统中。 要让 Rancher Desktop 离线运行，你需要填充两个目录： Cache 目录​ 要填充源磁盘（我们在此将其称为 %SOURCEDISK%，实际上它也可能是某种可移动设备，例如 USB 驱动器），你需要以下文件： k3s-versions.json：该文件由 Rancher Desktop 创建。它从 https://update.k3s.io/v1-release/channels 读取原始 JSON 文件并将其转换为不同类型的 JSON 文件。目前没有实用程序来进行这种转换。获取此文件的最简单方法是在连接的系统上运行 Rancher Desktop 并保存 CACHE/k3s-versions.json 文件（请参阅下方不同系统的 CACHE 位置）。Kubernetes K3s 镜像的 Tar 包。它们列在 https://github.com/k3s-io​​/k3s/releases。如果你使用的是 k3s v1.26.1 及更高版本，你需要为 AMD/Intel 主机下载 k3s-airgap-images-amd64.tar，为 M1 主机下载 k3s-airgap-images-arm64.tar，或下载相应的 *.tar.zst 压缩包。最后，你需要下载所选版本的 k3s 可执行文件。例如，以下命令将让你离线的情况下使用 K3s v1.24.3 build 1： cd .../CACHE mkdir v1.24.3+k3s1 cd v1.24.3+k3s1 wget https://github.com/k3s-io/k3s/releases/download/v1.24.3%2Bk3s1/k3s-airgap-images-amd64.tar wget https://github.com/k3s-io/k3s/releases/download/v1.24.3%2Bk3s1/sha256sum-amd64.txt wget https://github.com/k3s-io/k3s/releases/download/v1.24.3%2Bk3s1/k3s  WindowsmacOSLinux 在 Linux 上，缓存目录是 $HOME/.cache/rancher-desktop，你可以运行以下命令进行填充： CACHEDIR=$HOME/.cache/rancher-desktop mkdir -p $CACHEDIR/k3s cp $SOURCEDISK/k3s-versions.json $CACHEDIR/ cp -r $SOURCEDISK/v&lt;MAJOR&gt;.&lt;MINOR&gt;.&lt;PATCH&gt;+k3s&lt;BUILD&gt; $CACHEDIR/k3s/  kuberlr 目录​ 这个目录的位置更直接，在所有平台上，该目录都位于 HOME/.kuberlr/PLATFORM-ARCH，其中： HOME 是主目录。通常情况下，在 Windows 上为 $env:HOMEDRIVE%\\$env:HOMEPATH，在 macOS 和 Linux 上为 ~ 或 $HOME。PLATFORM 是 windows、linux 或 darwin。ARCH 在 M1 主机上是 aarch64，在其它主机上是 amd64。 要进行填充，请确定你要使用的 Kubernetes 版本，并联网下载适当的可执行文件。它们将位于： WindowsmacOSLinux https://dl.k8s.io/VERSION/bin/PLATFORM/CPU/kubectl 其中： VERSION 的格式是 vMAJOR.MINOR.PATCH（如 v1.22.1）PLATFORM 是 darwin、linux 或 windowsCPU 在 M1 主机上是 arm64，在其他主机上是 amd64 例如，要获取使用 Kubernetes v1.22 且用于 Windows 的 kubectl，此 Windows 命令 shell（不是 PowerShell）命令会将其放在 SOURCEDISK 上： wget -O %SOURCEDISK/kubectl1.22.1.exe https://dl.k8s.io/v1.22.1/bin/windows/amd64/kubectl.exe  版本说明​ Kubectl 客户端保证使用主要版本相同的 Server，且它们最多只相差一个次要版本。例如，如果你的组织使用的 Kubernetes 版本是 v1.21.x、v1.22.x 和 v1.23.x，对于任何 x 补丁版本，你只需在 .kuberlr 目录中安装 kubectl1.22.x 即可。但是，如果你复制一个 Kubernetes v1.24.x 到 CACHE 目录，你需要确保 .kuberlr 目录中也有一个兼容的 kubectl（v1.23.x、v1.24.x 或 v1.25.x 中的其中一个即可）。 "},{"title":"Skaffold 与 Rancher Desktop","type":0,"sectionRef":"#","url":"how-to-guides/skaffold-and-rancher-desktop","content":"Skaffold 与 Rancher Desktop Skaffold 是一个命令行工具，用于 Kubernetes 原生应用程序的持续开发。Skaffold 处理构建、推送和部署应用程序的工作流，并提供用于创建 CI/CD 流水线的构建块。它能让你专注于在本地迭代你的应用程序，Skaffold 则能持续部署到你的本地或远程 Kubernetes 集群。要了解有关 Skaffold 的更多信息，请参阅 Skaffold 项目文档。 为了演示使用 Rancher Desktop 设置 Skaffold 的步骤，Rancher Desktop 文档在此处提供了一个 nodejs 应用程序示例。 重要提示：Skaffold 仅适用于 dockerd (Moby)。因此，请确保在 Rancher Desktop UI 的 Kubernetes Settings 面板中选择了 dockerd 作为运行时。 访问 https://skaffold.dev/docs/install/ 安装 Skaffold。 克隆 Rancher Desktop 文档仓库并在终端中导航到 express-sample，如下所示： cd docs.rancherdesktop.io/assets/express-sample 运行 skaffold init。 根据 Skaffold 文档 的介绍，skaffold init 会遍历你的项目目录并查找 build 配置文件（例如 Dockerfile、build.gradle /pom.xml、package.json、requirements.txt 或 go.mod）。 在我们的示例中，我们将选择 Dockerfile 和 package.json。这将生成你可以修改的初始配置文件。出现提示时，选择 yes 将你的配置写入 skaffold.yaml。 在你的编辑器中，查看你的 app.js 和 manifests.yaml 文件。请注意，在 manifests.yaml 中，你将拥有一个 deployment 配置和一个 service 配置。在测试场景下，仅需要 1 个 replica 即可。 回到你的终端，你会注意到你有两个选项，分别是 skaffold run（允许你构建和部署）和 skaffold dev （允许你进入开发模式自动重新部署）。在此示例中，我们将使用 skaffold dev。 由于你需要对镜像仓库具有推送访问权限，因此你可以使用 docker 登录，也可以设置本地镜像仓库： Docker Hub本地镜像仓库 在运行 skaffold dev 之前，如果你有 Docker Hub 账号，请使用你的 docker 登录。然后，在文件 skaffold.yaml 和 manifests.yaml 中，将 matamagu/express-sample 替换为 YOUR_DOCKER_HUB_USERNAME/express-sample，这是因为 skaffold dev 会将构建的镜像推送到 DockerHub。 在进行开发时，Skaffold 将检测所有更改，并会自动再次执行构建和部署的过程。你将能够看到集群中的任何更改。 在浏览器中访问 localhost:3000，你将看到 express-sample 界面。","keywords":""},{"title":"传输容器镜像","type":0,"sectionRef":"#","url":"how-to-guides/transfer-container-images","content":"","keywords":""},{"title":"步骤​","type":1,"pageTitle":"传输容器镜像","url":"how-to-guides/transfer-container-images#步骤","content":"1. 将源环境的镜像保存为 tar 包。 nerdctldocker 保存单个镜像 nerdctl save -o local-image.tar image:tag 保存多个镜像 nerdctl save -o local-images.tar image1:tag1 image2:tag2 将所有镜像保存在命名空间中 下面两个命令使用 jq 进行 JSON 解析。长命令会执行以下步骤： nerdctl -n k8s.io image ls 子命令会获取 k8s.io 命名空间中所有镜像的列表，因此不包括其他命名空间的镜像（例如 default）。jq 子命令会过滤并格式化上一步获取的镜像列表。 命令的 select(.Repository!=\\&quot;&lt;none&gt;\\&quot;) 部分会跳过仓库值为 &lt;none&gt; 的镜像。根据镜像标签的值是否为 &lt;none&gt;，命令的 if (.Tag==&quot;&lt;none&gt;&quot;) then .Repository else (.Repository+&quot;:&quot;+.Tag) end') 部分会将镜像的名称格式化为 &lt;Repository&gt; 或 &lt;Repository&gt;:&lt;Tag&gt;。 最后，命令的 nerdctl -n k8s.io save -o all-local-images-in-namespace.tar 部分会将前两步过滤和格式化的镜像列表保存到 tar 文件中。 BashPowerShell nerdctl -n k8s.io save -o all-local-images-in-namespace.tar $(nerdctl -n k8s.io image ls --format '{{json .}}' | jq -r 'select(.Repository!=&quot;&lt;none&gt;&quot;) | if (.Tag==&quot;&lt;none&gt;&quot;) then .Repository else (.Repository+&quot;:&quot;+.Tag) end')  2. 使用目标环境中保存的 tar 包加载镜像。 nerdctldocker nerdctl load &lt; local-images.tar  "},{"title":"使用 VS Code Docker 扩展来调试容器应用程序","type":0,"sectionRef":"#","url":"how-to-guides/vs-code-docker","content":"","keywords":""},{"title":"调试容器化应用程序的步骤​","type":1,"pageTitle":"使用 VS Code Docker 扩展来调试容器应用程序","url":"how-to-guides/vs-code-docker#调试容器化应用程序的步骤","content":"安装并启动 Rancher Desktop。从 Kubernetes Settings 菜单中，将 Container Runtime 选为 dockerd (moby)：  安装并启动 Visual Studio Code 或 Visual Studio Code Insiders。本教程使用 Visual Studio Code：  在扩展市场中安装 Docker 扩展。  你可以使用此 Github 仓库 (https://github.com/bwateratmsft/samples) 中提供的示例。克隆此仓库并在 VS Code 会话中打开 expressapp 文件夹。 打开命令面板（Ctrl+Shift+P、F1 或 Cmd+Shift+P）并运行 “Add Docker Files to Workspace”。由于这是一个 Express 应用程序，因此选择 Node.js 作为应用程序平台，选择 3000（或任何其他可用端口）作为 port。由于这是一个简单的示例，请在 Include optional Docker Compose files 选择 No。此步骤添加了调试应用程序所需的 Dockerfile 和 Launch Configuration。  在代码中插入断点：  在顶部的 Debug 窗口中，将活动调试配置切换为 Docker Node.js Launch。按 F5 以 Debug 模式启动应用程序容器。示例应用程序的登录页面将在你的浏览器中打开，而且代码会在断点处停止执行。你可以在这里调试应用程序，就像应用程序运行在你的主机上一样。   有时候，由于调试进程可能尚未启动，因此应用程序可能不会在第一次运行时在设置的断点处中断。在这种情况下，你可以刷新浏览器来再次触发执行，从而命中断点。你还可以通过在 task.json 文件中设置 inspectMode: 'break' 属性来避免此行为，从而防止应用程序在连接调试器之前运行。 在某些主机上，防火墙设置可能会阻止调试进程在主机和容器进程之间建立连接。在这种情况下，你可以添加防火墙规则，以允许运行容器的 VM 与运行 VS Code 会话的主机进行通信。在 Windows 上，你可以通过在特权 powershell 中运行以下命令来添加防火墙规则： New-NetFirewallRule -Action Allow -Description 'Allow communication from WSL containers' -Direction Inbound -Enabled True -InterfaceAlias 'vEthernet (WSL)' -Name 'WSL Inbound' -DisplayName 'WSL Inbound'  "},{"title":"架构","type":0,"sectionRef":"#","url":"references/architecture","content":"架构 Ranche Desktop 是一个基于 Electron 的应用程序，它包装了其他工具，同时还提供了简单的用户体验。在 macOS 和 Linux 上，Rancher Desktop 利用虚拟机运行 containerd 或 dockerd 和 Kubernetes。适用于 Linux v2 的 Windows Subsystem 可用于 Windows 系统。你只需要下载并运行该应用程序即可。","keywords":""},{"title":"VS Code Remote Containers","type":0,"sectionRef":"#","url":"how-to-guides/vs-code-remote-containers","content":"","keywords":""},{"title":"使用示例开发容器的步骤​","type":1,"pageTitle":"VS Code Remote Containers","url":"how-to-guides/vs-code-remote-containers#使用示例开发容器的步骤","content":"安装并启动 Rancher Desktop。从 Kubernetes Settings 菜单中，将 Container Runtime 选为 dockerd (moby)：  安装并启动 Visual Studio Code 或 Visual Studio Code Insiders。本教程使用 Visual Studio Code：  安装 Remote Development 扩展包：  安装扩展后，你将在侧栏中看到扩展项，左下角有一个显示命令面板的绿色按钮，其中包含与 Remote Development 相关的各种选项/命令：  Microsoft 在此 GitHub 仓库 (https://github.com/microsoft/vscode-dev-containers.git) 中提供了许多示例开发容器。将此仓库克隆到你的本地主机： git clone https://github.com/microsoft/vscode-dev-containers.git  单击窗口左下角的 按钮，然后从命令面板中选择 Open Folder in Container...。浏览克隆仓库中的其中一个示例，例如 javascript-node：   选择示例后，你会在容器加载时看到进度通知 ，容器启动成功后，左下角会显示容器名称 。 容器启动后，在 VS Code IDE 中按 F5 启动示例应用程序。你将看到应用程序已启动并在 localhost:3000 上提供服务：  恭喜！你已经使用 Rancher Desktop 和 VS Code 成功加载并运行了一个示例开发容器。 "},{"title":"后续步骤​","type":1,"pageTitle":"VS Code Remote Containers","url":"how-to-guides/vs-code-remote-containers#后续步骤","content":"Microsoft 在此处提供了在各种场景中使用开发容器的大量文档。请参阅以下教程，尝试使用与你的需求类似的用例。 现在，体验使用 Rancher Desktop 进行容器化的快乐吧！ "},{"title":"捆绑的实用程序","type":0,"sectionRef":"#","url":"references/bundled-utilities","content":"捆绑的实用程序 Rancher Desktop 使用多个实用程序/子系统作为依赖项。例如，docker CLI 会与 dockerd 交互，helm 会管理 Chart，而 trivy 用于容器镜像扫描。本文介绍了特定 Rancher Desktop 版本包括的捆绑实用程序版本信息。 Rancher Desktop 版本\t依赖版本v1.8.1\t1.8.1 版本中没有更新的依赖项 v1.8.0 amazon-ecr-credential-helper: 0.6.0 docker: 23.0.1 docker-buildx: 0.10.4 docker-compose: 2.16.0 docker-credential-helpers: 0.6.4 helm: 3.11.2 kuberlr: 0.4.2 nerdctl: 1.2.1 trivy: 0.38.3 v1.7.0 amazon-ecr-credential-helper: 0.6.0 docker: 20.10.21 docker-buildx: 0.9.1 docker-compose: 2.14.0 docker-credential-helpers: 0.6.4 helm: 3.10.2 kuberlr: 0.4.2 nerdctl: 1.0.0 trivy: 0.35.0 v1.6.2\t1.6.2 版本中没有更新的依赖项 v1.6.1\t1.6.1 版本中没有更新的依赖项 v1.6.0 amazon-ecr-credential-helper: 0.6.0 docker: 20.10.17 docker-buildx: 0.9.1 docker-compose: 2.11.1 docker-credential-helpers: 0.6.4 helm: 3.9.4 kuberlr: 0.4.2 nerdctl: 0.23.0 trivy: 0.32.0 ","keywords":""},{"title":"故障排除提示","type":0,"sectionRef":"#","url":"troubleshooting-tips","content":"故障排除提示 此页面提供了 Rancher Desktop 相关问题的故障排除提示。 问：为什么我在 Rancher Desktop 的 WSL 集成页面下看不到我的 WSL 发行版？​ 答：你可能使用的是 WSL 1 发行版。Rancher Desktop 仅支持 WSL 2 发行版。你可以通过运行 wsl --set-version &lt;distro-name&gt; 2 命令将 WSL 1 发行版转换为 WSL 2 发行版。你还可以运行 wsl --set-default-version 2 命令来将你之后可能安装的所有发行版设置为使用 WSL 2。 问：运行 kubectl config get-contexts 时，我没有看到 Rancher Desktop 的条目，它在哪里？​ 答：Rancher Desktop 将配置放置在默认位置 ~/.kube/config。你的 KUBECONFIG 环境变量可能被设置为在其他位置查找配置文件。 问：Rancher Desktop 卡在 Waiting for Kubernetes API，我该怎么办？​ 答：没有额外信息我们很难确定原因。导航到 Troubleshooting 选项卡并访问日志。然后，转到 Rancher Desktop GitHub 页面并提交附加了你的日志的 Issue。 问：安装 Rancher Desktop 并卸载 Docker Desktop 后，我无法再运行 docker compose，为什么？​ 答：这是 Rancher Desktop 早期版本（1.1.0 之前）的问题。Rancher Desktop 1.1.0 及以上版本附带了 docker-compose，并在 ~/.docker/cli-plugins 提供了 CLI 插件。我们强烈建议你升级到最新版本的 Rancher Desktop。 如果你仍然无法使用 docker-compose，请在 Github上报告这个 Bug。 问：我使用 Homebrew 来安装 Rancher Desktop，但是 brew install rancher-desktop 提示失败，为什么？​ 答：Homebrew cask 的命名约定规定了 -desktop 后缀要从 cask formula 名称中删除。因此，请改用 brew install rancher。 问：尝试在 WSL 上使用 Docker 时，如何修复 permission denied 错误？​ 答：你需要写权限才能访问 docker socket。解决这个问题的方法有很多，以下是常见的方法之一。使用 Ubuntu WSL 命令行： sudo groupadd docker sudo adduser $USER docker sudo chown root:docker /var/run/docker.sock sudo chmod g+w /var/run/docker.sock newgrp docker 问：如何解决 Linux 上的 kubectl: command not found 问题？​ A: 默认情况下，Rancher Desktop 会在 Linux 的 /home/&lt;user&gt;/.local/bin 下创建 kubectl、docker、helm 和 nerdctl 二进制文件的符号链接。要直接从控制台调用这些命令，你可以在控制台中执行以下命令，并执行注销和登录来将目录添加到你的 PATH 环境变量中： echo &quot;export PATH=\\$PATH:/home/$(whoami)/.local/bin&quot; &gt;&gt; ~/.bashrc 问：使用 nerdctl run 运行容器时，如何修复 FATA[0005] subnet 10.4.0.0/24 overlaps with other one on this address space 问题？​ 答：如果路由规则的 IP 地址来自 Iptables 上的冲突子网，你将看到此错误。冲突的路由可能来自主机网络（桥接模式）或 Kubernetes 网络。此问题的快速解决方法是通过命令 wsl --shutdown 关闭 WSL。 警告：关闭 WSL 将停止所有其他发行版以及 rancher-desktop 发行版。 问：在 Windows 上将现有 MSI 降级到较旧的 EXE 版本（1.6.x 或更早版本）时，如何修复 Installation Aborted 错误？​ 答：在 MSI 卸载过程中，如果应该删除的 Windows 注册表项 HKEY_LOCAL_MACHINE\\\\System\\\\CurrentControlSet\\\\Services\\\\EventLog\\\\Application\\\\RancherDesktopPrivilegedService 没有被删除，你将看到此错误。请手动删除注册表项并尝试安装 EXE 版本。你可以在特权 shell 中运行以下命令来删除注册表项： reg.exe delete HKLM\\System\\CurrentControlSet\\Services\\EventLog\\Application\\RancherDesktopPrivilegedService /reg:64 /f 问：为什么启动 Cluster Dashboard 时会出现空白屏幕？​ 答：Cluster Dashboard 可能无法正常运行，因为你主机上的另一个进程正在使用 Dashboard 进程（steve）所依赖的 9080 或 9443 端口。要解决此问题，请识别并终止使用这些端口的进程。你可以使用下面的命令来识别使用主机上特定端口的进程。请注意，在 macOS 和 Linux 上，Rancher Dashboard 进程名为 steve，而在 Windows 上，它是 steve.exe。如果 steve 是唯一使用端口 9080 或 9443 的进程，请不要终止它。 查找使用特定端口的进程的命令。 WindowsmacOSLinux netstat -ano | findstr :9443 ","keywords":""},{"title":"命令参考：rdctl","type":0,"sectionRef":"#","url":"references/rdctl-command-reference","content":"","keywords":""},{"title":"rdctl 或 rdctl help​","type":1,"pageTitle":"命令参考：rdctl","url":"references/rdctl-command-reference#rdctl-或-rdctl-help","content":"运行 rdctl 或 rdctl help 查看可用命令的列表： 示例输出 &gt; rdctl help The eventual goal of this CLI is to enable any UI-based operation to be done from the command-line as well. Usage: rdctl [command] Available Commands: api Run API endpoints directly completion Generate the autocompletion script for the specified shell factory-reset Clear all the Rancher Desktop state and shut it down. help Help about any command list-settings Lists the current settings. set Update selected fields in the Rancher Desktop UI and restart the backend. shell Run an interactive shell or a command in a Rancher Desktop-managed VM shutdown Shuts down the running Rancher Desktop application start Start up Rancher Desktop, or update its settings. version Shows the CLI version. Flags: --config-path string config file (default /Users/jan/Library/Application Support/rancher-desktop/rd-engine.json) -h, --help help for rdctl --host string default is localhost; most useful for WSL --password string overrides the password setting in the config file --port string overrides the port setting in the config file --user string overrides the user setting in the config file Use &quot;rdctl [command] --help&quot; for more information about a command.  "},{"title":"rdctl api​","type":1,"pageTitle":"命令参考：rdctl","url":"references/rdctl-command-reference#rdctl-api","content":"运行 rdctl api / 全局列出所有端点： 示例输出 $ rdctl api / | jq -r .[] GET / GET /v0 GET /v1 GET /v1/about GET /v1/diagnostic_categories GET /v1/diagnostic_checks POST /v1/diagnostic_checks GET /v1/diagnostic_ids PUT /v1/factory_reset PUT /v1/propose_settings GET /v1/settings PUT /v1/settings PUT /v1/shutdown GET /v1/transient_settings PUT /v1/transient_settings  "},{"title":"rdctl api /vX​","type":1,"pageTitle":"命令参考：rdctl","url":"references/rdctl-command-reference#rdctl-api-vx","content":"运行 rdctl api /v1 列出版本 1 中的所有端点： 示例输出 $ rdctl api /v1 | jq -r .[] GET /v1 GET /v1/about GET /v1/diagnostic_categories GET /v1/diagnostic_checks POST /v1/diagnostic_checks GET /v1/diagnostic_ids PUT /v1/factory_reset PUT /v1/propose_settings GET /v1/settings PUT /v1/settings PUT /v1/shutdown GET /v1/transient_settings PUT /v1/transient_settings  "},{"title":"rdctl api /v0/settings​","type":1,"pageTitle":"命令参考：rdctl","url":"references/rdctl-command-reference#rdctl-api-v0settings","content":"rdctl api [endpoints] 是对直接使用 API 的用户最有用的命令，因此它们不适合像 rdctl set 一样日常使用。例如： 以下命令 rdctl api /v0/settings --method PUT --body '{&quot;kubernetes&quot;: {&quot;enabled&quot;: false}}'  与以下命令是一样的： rdctl set --kubernetes-enabled=false  只是它没那么简洁和用户友好。 "},{"title":"rdctl list-settings​","type":1,"pageTitle":"命令参考：rdctl","url":"references/rdctl-command-reference#rdctl-list-settings","content":"CLIAPI 运行 rdctl list-settings 以查看当前的活动配置： 示例输出 &gt; rdctl list-settings { &quot;version&quot;: 6, &quot;application&quot;: { &quot;adminAccess&quot;: false, &quot;pathManagementStrategy&quot;: &quot;rcfiles&quot;, &quot;updater&quot;: { &quot;enabled&quot;: false }, &quot;debug&quot;: false, &quot;telemetry&quot;: { &quot;enabled&quot;: true }, &quot;autoStart&quot;: false, &quot;startInBackground&quot;: false, &quot;hideNotificationIcon&quot;: false, &quot;window&quot;: { &quot;quitOnClose&quot;: false } }, &quot;virtualMachine&quot;: { &quot;memoryInGB&quot;: 6, &quot;numberCPUs&quot;: 2, &quot;hostResolver&quot;: true }, &quot;WSL&quot;: { &quot;integrations&quot;: {} }, &quot;containerEngine&quot;: { &quot;allowedImages&quot;: { &quot;enabled&quot;: false, &quot;patterns&quot;: [ &quot;docker.io&quot; ] }, &quot;name&quot;: &quot;moby&quot; }, &quot;kubernetes&quot;: { &quot;version&quot;: &quot;&quot;, &quot;port&quot;: 6443, &quot;enabled&quot;: false, &quot;options&quot;: { &quot;traefik&quot;: true, &quot;flannel&quot;: true }, &quot;ingress&quot;: { &quot;localhostOnly&quot;: false } }, &quot;portForwarding&quot;: { &quot;includeKubernetesServices&quot;: false }, &quot;images&quot;: { &quot;showAll&quot;: true, &quot;namespace&quot;: &quot;k8s.io&quot; }, &quot;diagnostics&quot;: { &quot;showMuted&quot;: false, &quot;mutedChecks&quot;: {} }, &quot;experimental&quot;: { &quot;virtualMachine&quot;: { &quot;type&quot;: &quot;qemu&quot;, &quot;useRosetta&quot;: false, &quot;socketVMNet&quot;: false, &quot;mount&quot;: { &quot;type&quot;: &quot;reverse-sshfs&quot;, &quot;9p&quot;: { &quot;securityModel&quot;: &quot;none&quot;, &quot;protocolVersion&quot;: &quot;9p2000.L&quot;, &quot;msizeInKB&quot;: 128, &quot;cacheMode&quot;: &quot;mmap&quot; } }, &quot;networkingTunnel&quot;: false } }, &quot;extensions&quot;: { &quot;docker/logs-explorer-extension:0.2.2&quot;: true } }  "},{"title":"rdctl set​","type":1,"pageTitle":"命令参考：rdctl","url":"references/rdctl-command-reference#rdctl-set","content":"CLIAPI 运行 rdctl set [flags] 来设置属性。在大多数情况下，Kubernetes 会在运行 set 命令时重置。你可以通过在单个命令中使用链接来设置多个属性。下面是一些参考示例： 示例输出 &gt; rdctl set --kubernetes-enabled=false &gt; rdctl set --container-engine docker --kubernetes-version 1.21.2  "},{"title":"rdctl shutdown​","type":1,"pageTitle":"命令参考：rdctl","url":"references/rdctl-command-reference#rdctl-shutdown","content":"CLIAPI 运行 rdctl shutdown 来正常关闭 Rancher Desktop： 示例输出 &gt; rdctl shutdown Shutting down.  "},{"title":"rdctl start​","type":1,"pageTitle":"命令参考：rdctl","url":"references/rdctl-command-reference#rdctl-start","content":"CLIAPI 运行 rdctl start 来确保 Rancher Desktop 按照要求运行和配置： 示例输出 &gt; rdctl start --container-runtime dockerd -- kubernetes-version 1.19.3  "},{"title":"rdctl version​","type":1,"pageTitle":"命令参考：rdctl","url":"references/rdctl-command-reference#rdctl-version","content":"运行 rdctl version 来查看当前 rdctl CLI 的版本： 示例输出 &gt; rdctl version rdctl client version: 1.1.0, targeting server version: v1  "},{"title":"使用容器","type":0,"sectionRef":"#","url":"tutorials/working-with-containers","content":"","keywords":""},{"title":"运行容器​","type":1,"pageTitle":"使用容器","url":"tutorials/working-with-containers#运行容器","content":"要使用默认的 bridge CNI 网络 (10.4.0.0/24) 运行容器： nerdctldocker nerdctl run -it --rm alpine  要使用 BuildKit 构建镜像： nerdctldocker nerdctl build -t foo /some-dockerfile-directory nerdctl run -it --rm foo  要使用 BuiltKit 进行构建并将输出发送到本地目录： nerdctldocker nerdctl build -o type=local,dest=. /some-dockerfile-directory  "},{"title":"Docker Compose​","type":1,"pageTitle":"使用容器","url":"tutorials/working-with-containers#docker-compose","content":"Docker Compose 是一个用于定义和运行多容器 Docker 应用程序的工具。 nerdctldocker nerdctl-compose CLI 用于与 docker-compose 兼容： nerdctl compose up -d nerdctl compose down  "},{"title":"暴露端口​","type":1,"pageTitle":"使用容器","url":"tutorials/working-with-containers#暴露端口","content":"要为容器公开端口 8000： nerdctldocker nerdctl run -d -p 8000:80 nginx  然后，你可以在浏览器中访问 http://localhost:8000/ 来访问容器： 注意：默认情况下，暴露的端口可以在 macOS 和 Linux 上的所有网络接口上访问。然而，在 Windows 上，暴露的端口只能通过 localhost 网络接口访问（参见 issue #1180）。目前的一个解决方法是在 Windows 主机上配置 portproxy，从而将端口公开给其他网络接口。 netsh interface portproxy add v4tov4 listenport=8080 listenaddress=0.0.0.0 connectport=8080 connectaddress=localhost  "},{"title":"定位 Kubernetes 命名空间​","type":1,"pageTitle":"使用容器","url":"tutorials/working-with-containers#定位-kubernetes-命名空间","content":"你还可以通过 containerd 使用 --namespace 参数来定位 Kubernetes 命名空间。请注意 docker 不使用命名空间。 nerdctl nerdctl --namespace k8s.io build -t demo:latest /code/demos/rd/anvil-app nerdctl --namespace k8s.io ps  "},{"title":"诊断","type":0,"sectionRef":"#","url":"ui/diagnostics","content":"诊断 Diagnostics 功能通过在后台运行多项检查来检测环境中的常见问题（例如不满足最低要求、配置错误等），帮助你自行排除和修复 Rancher Desktop 应用程序的问题。 注意：Rancher Desktop 不会将诊断数据发送到任何远程服务器进行处理或存储。 WindowsmacOSLinux 每次启动应用程序时都会运行诊断检查。如果发现任何问题，则失败检查的数量会显示在左侧导航栏中的 Diagnostics 菜单文本的旁边。Diagnostics 选项卡会显示诊断测试的结果，突出显示需要注意的区域，并指导你解决问题。 如果你进行了非标准设置，并且知道这些检查不适用于你的情况，你可以在此选项卡上 mute/unmute 个别检查。你还可以随时重新运行诊断程序，从而验证你对环境所做的更改是否已经解决了问题。","keywords":""},{"title":"使用镜像","type":0,"sectionRef":"#","url":"tutorials/working-with-images","content":"","keywords":""},{"title":"常规用法​","type":1,"pageTitle":"使用镜像","url":"tutorials/working-with-images#常规用法","content":"使用任何一种工具都需要 Rancher Desktop 与适当的容器运行时一起运行。对于 nerdctl，使用 containerd 运行时。对于 docker，使用 Moby 运行时。 要了解所有命令选项并显示帮助文档，运行： nerdctldocker nerdctl -h 与 Docker 不同，containerd 具有自己的命名空间。默认情况下，nerdctl 镜像存储在 default 命名空间中。如果你希望你的镜像可供 Kubernetes 使用，请使用 --namespace k8s.io 或 -n k8s.io CLI 参数。你还可以使用 --namespace &lt;NAMESPACE_NAME&gt; 选项来切换到 default 或其他命名空间。请注意，nerdctl 命名空间独立于 Kubernetes 和 kubectl 命名空间。 "},{"title":"列出镜像​","type":1,"pageTitle":"使用镜像","url":"tutorials/working-with-images#列出镜像","content":"要查看当前可用的镜像，请运行以下命令： nerdctldocker nerdctl images  "},{"title":"构建镜像​","type":1,"pageTitle":"使用镜像","url":"tutorials/working-with-images#构建镜像","content":"nerdctldocker 构建镜像与现有工具的操作相似。你可以在具有 Dockerfile（Dockerfile 使用了一个 scratch 镜像）的路径上运行 nerdctl： nerdctl build . [+] Building 0.1s (4/4) FINISHED =&gt; [internal] load build definition from Dockerfile =&gt; =&gt; transferring dockerfile: 31B =&gt; [internal] load .dockerignore =&gt; =&gt; transferring context: 2B =&gt; [internal] load build context =&gt; =&gt; transferring context: 33B =&gt; CACHED [1/1] ADD anvil-app / nerdctl 具有在构建时进行标记的选项以及一些其他选项： nerdctl build -t TAG . 要构建用于 Kubernetes 的镜像，请指定 k8s.io 命名空间，如下所示： nerdctl build -n k8s.io .  "},{"title":"构建本地镜像​","type":1,"pageTitle":"使用镜像","url":"tutorials/working-with-images#构建本地镜像","content":"为了演示构建本地镜像和运行应用程序的步骤，Rancher Desktop 的 docs 仓库提供了一个示例 nodejs 应用程序。首先，克隆仓库并 cd 到终端中的 assets/express-sample 中。 运行以下命令来使用 Dockerfile 构建镜像： nerdctldocker nerdctl --namespace k8s.io build -t expressapp:v1.0 .  运行以下命令来运行容器： kubectl run --image expressapp:v1.0 expressapp kubectl port-forward pods/expressapp 3000:3000  注意：添加 latest 标签时，请务必同时指定以下内容： imagePullPolicy: Never  "},{"title":"标记镜像​","type":1,"pageTitle":"使用镜像","url":"tutorials/working-with-images#标记镜像","content":"如果要标记已构建的现有镜像，你可以运行以下命令： nerdctldocker nerdctl tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]  "},{"title":"删除镜像​","type":1,"pageTitle":"使用镜像","url":"tutorials/working-with-images#删除镜像","content":"要删除镜像，请运行以下命令： nerdctldocker nerdctl rmi IMAGE  "},{"title":"通用","type":0,"sectionRef":"#","url":"ui/general","content":"通用 General 选项卡提供了社区 channel 的信息，用户可以通过这些 channel 联系 Rancher Desktop 团队和社区，并提出问题、报告错误或讨论 Rancher Desktop。 WindowsmacOSLinux","keywords":""},{"title":"镜像","type":0,"sectionRef":"#","url":"ui/images","content":"","keywords":""},{"title":"Scanning Images​","type":1,"pageTitle":"镜像","url":"ui/images#scanning-images","content":"此功能使用 Trivy 来扫描你的镜像，从而查找漏洞和配置问题。 要扫描镜像： 从镜像列表中，找到要扫描的镜像。单击 ⋮ &gt; Scan。将显示按严重程度排序的漏洞摘要。单击 &gt; 查看​​每个漏洞的详细信息，其中包括漏洞详情的链接。 "},{"title":"Adding Images​","type":1,"pageTitle":"镜像","url":"ui/images#adding-images","content":"Pulling Images​ 此选项可以让你将镜像从镜像仓库拉取到你的虚拟机中。 要拉取镜像： 单击右上角的 + 按钮。单击 Pull 选项卡。输入要拉取的镜像的名称。 注意：默认情况下，镜像是从 Docker Hub 中提取的（格式：repo/image[:tag]）。要从其他镜像仓库中拉取，请包含主机名 registry.example.com/repo/image[:tag]。 单击 Pull。 Building Images​ 使用此选项构建镜像并将其添加到你的虚拟机。 要构建镜像： 单击右上角的 + 按钮。单击 Build 选项卡。输入构建的镜像的名称，例如 repo/image、repo/image:tag、registry.example.com/repo/image 或 registry.example.com/repo/image:tag。单击 Build。在文件浏览器中，选择要用来构建镜像的 Dockerfile。 "},{"title":"端口转发","type":0,"sectionRef":"#","url":"ui/port-forwarding","content":"端口转发 WindowsmacOSLinux 如需转发端口： 找到 Service 并单击 Forward，指定要使用的端口或使用随机分配的端口。点击 ✓ 按钮来确认你的选择。可选：单击 Cancel 来移除分配的端口。","keywords":""},{"title":"应用程序","type":0,"sectionRef":"#","url":"ui/preferences/application","content":"应用程序 WindowsmacOSLinux General​ Administrative Access​ 允许 Rancher Desktop 在启动某些操作时获得管理访问权限（sudo 权限）。这能用于增强功能，包括桥接网络和默认 docker socket 支持。更改会在 Rancher Desktop 下次启动时应用。 Automatic Updates​ 当一个新版本发布时，用户会得到一个通知和升级目标的发行版说明。无论是否启用了自动更新，用户都会收到通知。如果启用此选项，更新会被下载，然后在下次启动 Rancher Desktop 时安装更新。 Statistics​ 该选项允许 Rancher Desktop 收集关于你与 Rancher Desktop 应用程序交互的信息，但不会收集你运行的工作负载等信息。 Behavior​ Startup​ Rancher Desktop 可以作为用户登录的一部分自动启动。同时也将考虑页面中的其他行为设置。 Background​ Rancher Desktop 在后台启动时不会显示应用程序窗口，也不会在任务切换程序或任务栏中显示条目。应用程序窗口可以通过通知图标的右键菜单打开。 已经在后台运行的 Rancher Desktop 再次启动时将显示应用程序窗口，而且应用程序将添加到任务切换程序和任务栏中。通知图标也不可用时，这方法可用于再次访问后台应用程序。 即使主应用程序窗口关闭（应用程序因此从任务切换程序和任务栏中删除），Rancher Desktop 通常仍然在后台运行，但也可以配置为在主窗口关闭时终止程序。 Notification Icon​ Rancher Desktop 通过通知图标来显示应用程序的状态。图标的右键菜单提供了更多状态信息，并提供了应用程序其他功能的快速访问入口。此选项将禁用通知图标的创建。 Environment​ 配置 PATH​ Rancher Desktop 附带命令行实用程序，用于与其各种功能交互。这些实用程序包括 docker、nerdctl、kubectl 和 helm 等。这些实用程序位于 ~/.rd/bin，因此你可以通过运行 ls ~/.rd/bin 来查看你的安装中包含了哪些实用程序。 要使用这些实用程序，~/.rd/bin 必须位于 shell 的 PATH 变量中。 有两种执行此操作的选项： Automatic：PATH 管理将通过修改你的 shell .rc 文件来将 ~/.rd/bin 添加到 PATH 中。Manual：PATH 管理不会改变任何东西 - 在这种模式下，你必须手动将 ~/.rd/bin 添加到 PATH 中。","keywords":""},{"title":"Kubernetes","type":0,"sectionRef":"#","url":"ui/preferences/kubernetes","content":"Kubernetes WindowsmacOSLinux Enable Kubernetes​ 此选项允许你启用或禁用 Kubernetes。禁用 Kubernetes 后，你可以只运行 containerd 或 dockerd 来减少资源消耗。默认情况下，Kubernetes 是启用的。 要启用/禁用 Kubernetes，只需选中/取消选中 Enable Kubernetes 复选框。启用/禁用 Kubernetes 时，该应用程序将重新启动。禁用 Kubernetes 不会删除现有资源，重新启用 Kubernetes 时，你可以再次使用这些资源。 Kubernetes Version​ 该选项显示了 Rancher Desktop 实例可以使用的 Kubernetes 版本列表。 升级时： 会进行检查，看目标 Kubernetes 版本是否可以在本地使用。如果没有，它会下载对应文件。保留工作负载。保留镜像。 降级时： 移除工作负载。保留镜像。 要切换版本： 点击 Kubernetes version 下拉菜单。选择要转换的版本。 Kubernetes Port​ 设置 Kubernetes 暴露的端口。如果有多个 K3s 实例正在运行，使用此设置可以避免端口冲突。 Enable Traefik​ 此选项允许你启用或禁用 Traefik。禁用 Traefik 后，你可以释放端口 80 和 443，以便将其用于备用 ingress 配置。默认情况下，Traefik 是启用的。 禁用 Traefik 不会删除现有资源。","keywords":""},{"title":"容器引擎","type":0,"sectionRef":"#","url":"ui/preferences/container-engine","content":"","keywords":""},{"title":"General​","type":1,"pageTitle":"容器引擎","url":"ui/preferences/container-engine#general","content":"为 Rancher Desktop 设置容器运行时。用户可以选择 containerd 为容器提供命名空间，也可以使用 nerdctl 或 dockerd (moby) 来启用 D​​ocker API 和 Docker CLI。一次只能运行一个容器运行时。 WindowsmacOSLinux 容器引擎​ 切换到不同容器运行时的时候：使用当前容器运行时构建或拉取的工作负载和镜像在切换的容器运行时不可用。 "},{"title":"Allowed Images​","type":1,"pageTitle":"容器引擎","url":"ui/preferences/container-engine#allowed-images","content":"Allowed Images 选项卡用于控制可以在 Rancher Desktop 中访问的镜像仓库工件。例如，你可能只想从组织的私有镜像仓库，或仅从组织镜像仓库中特定部门的命名空间中拉取容器镜像。你可以指定镜像名称模式，从而仅允许访问特定镜像仓库和/或仓库的镜像。 WindowsmacOSLinux Allowed image patterns​ 选中 Enable 复选框，这样，Rancher Desktop 在拉取或推送镜像时将应用指定的模式，这意味着只允许名称至少与指定模式之一匹配的镜像。 你可以使用 + 和 - 按钮来添加/删除镜像名称模式。 如何指定 Allowed Image Patterns​ 你可以使用 [registry/][:port/][organization/]repository[:tag] 格式来指定 Allowed Image Pattern（允许的镜像模式）。 如果未指定 Allowed Image Patterns， registry 默认为 Docker Hub (docker.io)。port 默认为 433。Docker Hub 的 organization 默认为 library，不适用于其他镜像仓库。tag 默认为任何内容，不仅仅是 latest。 注意：按 tag 过滤实际上不起作用；相应的摘要 (repository@digest) 也必须添加到允许列表中才行，因此不实用。如果你有需要根据标签进行过滤的用例，请提交 Github issue。 示例​ 模式\t意义busybox\t允许 docker.io 镜像仓库的 library 组织中的 busybox 仓库。 suse/\t允许 docker.io 镜像仓库的 suse 组织中的任何镜像。 注意：仓库末尾的斜杠表示后面跟着单独的一段，例如 suse/nginx，而不是 suse/cap/uaa。 suse//\t允许 docker.io 镜像仓库的 suse 组织中的任何镜像。 注意：仓库末尾的双斜杠表示后面跟着一个或多个段，例如 suse/cap/uaa。 registry.internal:5000\t允许来自 registry.internal:5000 镜像仓库的任何镜像。 registry.suse.com/nginx\t允许来自 registry.suse.com 镜像仓库的镜像 nginx。 注意：DockerHub 之外的镜像仓库没有顶层组织的概念，因此没有默认的 library 组织。 "},{"title":"虚拟机（macOS 和 Linux）","type":0,"sectionRef":"#","url":"ui/preferences/virtual-machine","content":"虚拟机（macOS 和 Linux） macOSLinux Memory​ 分配给 Rancher Desktop 的内存。可选范围取决于你的系统。红色区域表示分配可能会影响系统服务。 CPU​ 分配给 Rancher Desktop 的 CPU 数量。可选范围取决于你的系统。红色区域表示分配可能会影响系统服务。","keywords":""},{"title":"WSL (Windows)","type":0,"sectionRef":"#","url":"ui/preferences/wsl","content":"WSL (Windows) 该选项使 Rancher Desktop Kubernetes 配置能够被任何 WSL 配置的 Linux 发行版所访问。一旦启用，你可以使用 WSL 发行版中的 kubectl 等工具与 Rancher Desktop Kubernetes 集群进行通信。 WSL 让你在所有 Linux 发行版中全局配置内存和 CPU 分配。请参阅 WSL 文档中的说明。","keywords":""},{"title":"故障排除","type":0,"sectionRef":"#","url":"ui/troubleshooting","content":"","keywords":""},{"title":"Show Logs​","type":1,"pageTitle":"故障排除","url":"ui/troubleshooting#show-logs","content":"使用此选项打开包含所有 Rancher Desktop 日志文件的文件夹。 Enable Debug Mode​ 启用 debug 级别日志记录。 "},{"title":"Reset Kubernetes​","type":1,"pageTitle":"故障排除","url":"ui/troubleshooting#reset-kubernetes","content":"重置 Kubernetes 并删除所有工作负载和配置。在重置之前，用户会看到确认信息以及删除容器镜像的选项。 要重置 Kubernetes： 单击 Reset Kubernetes，然后，你会看到一个确认窗口。可选：选择是否同时删除容器镜像。单击 Reset。Kubernetes 会停止并重新启动。 "},{"title":"Factory Reset​","type":1,"pageTitle":"故障排除","url":"ui/troubleshooting#factory-reset","content":"删除集群和所有其他 Rancher Desktop 设置。必须再次执行初始设置流程。 要恢复出厂设置： 单击 Reset。然后，你会看到一个确认窗口。可选：选择是否保留缓存的 Kubernetes 镜像。单击 Factory Reset。Kubernetes 会停止，Rancher Desktop 会关闭。可选：再次启动 Rancher Desktop。 "}]